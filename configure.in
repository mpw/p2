dnl $Id: configure.in,v 45.2 1997/09/20 21:50:32 jthomas Exp $
dnl Copyright (C) 1997, The University of Texas at Austin.
dnl
dnl This file is processed by autoconf to produce a /bin/sh script
dnl called configure.
dnl
dnl ###########################################################################
dnl
dnl P2_PROG_CC: Determines CC and CFLAGS
dnl
AC_DEFUN(P2_PROG_CC,
[AC_PROG_CC
if test "$CC" = "gcc" ; then
  CFLAGS="-Wall -Werror"
  AC_MSG_CHECKING(for sane header files)
  AC_TRY_COMPILE([#include <stdio.h>],
    [return fprintf(stdout, "foo");],
    [AC_MSG_RESULT(yes)
      CFLAGS="-Wall -Wno-uninitialized"
      LEX_CFLAGS="-Wall -Wno-uninitialized -Wno-unused"],
    [AC_MSG_RESULT(no)
      CFLAGS="-W"
      LEX_CFLAGS="-W"])
  XP_CFLAGS="-W"
  PB_CFLAGS="-W"
fi
AC_SUBST(CC)dnl
AC_SUBST(CFLAGS)dnl
AC_SUBST(LEX_CFLAGS)dnl
AC_SUBST(XP_CFLAGS)dnl
AC_SUBST(PB_CFLAGS)dnl
])dnl
dnl
dnl ###########################################################################
dnl
dnl P2_EXIT_FLAGS: Defines EXIT_SUCCESS and EXIT_FAILURE.
dnl
AC_DEFUN(P2_EXIT_FLAGS,
[AC_REQUIRE_CPP()dnl
AC_MSG_CHECKING(for definitions of EXIT_SUCCESS and EXIT_FAILURE)
AC_TRY_COMPILE([#include <stdlib.h>],
  [return (EXIT_SUCCESS);],
  AC_MSG_RESULT(yes),
  AC_MSG_RESULT(no)
  [AC_DEFINE(EXIT_SUCCESS,0) AC_DEFINE(EXIT_FAILURE,1)])
])dnl
dnl
dnl ###########################################################################
dnl
dnl P2_PROG_INDENT: Determines indent.
dnl
dnl Only use indent if GNU indent version 1.9 or higher is available.
dnl Otherwise, alias indent to touch.
dnl
AC_DEFUN(P2_PROG_INDENT,
[AC_PATH_PROG(INDENT, indent, touch, /p/bin:$PATH)
if test "${INDENT}" != "touch" ; then
  AC_MSG_CHECKING(for GNU indent version 1.9 or higher)
  version=`${INDENT} --version 2>&1`
  if `echo "$version" | grep 'GNU' >/dev/null` ; then
    if `echo "$version" \
      | grep -v '[01]\.[0-8]\(\([^0-9].*\)\|\)$' >/dev/null` ; then
        AC_MSG_RESULT(yes)
    else
      INDENT="touch"
      AC_MSG_RESULT(no)
    fi
  else
    INDENT="touch"
    AC_MSG_RESULT(no)
  fi
  AC_SUBST(INDENT)dnl
fi
])dnl
dnl
dnl ###########################################################################
dnl
dnl P2_UNION_SEMUN: Determine how to declare variables of type union semun.
dnl
dnl On some systems (e.g. Solaris) union semun is not defined anywhere.
dnl On other systems (e.g. Linux) union semun is defined.
dnl To call semctl(..., union semun arg) we must declare a variable of
dnl type union semun; this macro tells us whether we should define
dnl union semun or just reference it.
dnl
AC_DEFUN(P2_UNION_SEMUN,
[AC_REQUIRE_CPP()dnl
AC_MSG_CHECKING(for union semun declaration)
AC_TRY_COMPILE([#include <sys/types.h>
    #include <sys/ipc.h>
    #include <sys/sem.h>],
  [union semun arg;],
  [AC_MSG_RESULT(yes)
    AC_DEFINE(UNION_SEMUN,union semun)],
  [AC_MSG_RESULT(no)
    AC_DEFINE(UNION_SEMUN,union semun { int val; struct semid_ds *buf; ushort *array; })])
AC_SUBST(UNION_SEMUN)dnl
])dnl
dnl
dnl ###########################################################################
dnl
dnl P2_PROG_EGREP: Determines egrep
dnl
dnl Use egrep if it exists.  If not, use grep -e.
dnl
dnl Note that it's unlikely that egrep does not exist and grep -e does,
dnl but it's worth a try. (JAT)
dnl
AC_DEFUN(P2_PROG_EGREP,
[AC_CHECK_PROG(EGREP, egrep, egrep, "grep -e")
])dnl
dnl
dnl ###########################################################################
dnl
dnl P2_PROG_AUTOCONF: Determines autoconf, autoheader.
dnl
dnl Use autoconf-2.4 and autoheader-2.4 if they exist.
dnl If not, use autoconf and autoheader.
dnl
dnl This is a hack.  In our development environment, we have not yet
dnl installed the latest versions of autoconf and autoheader.
dnl Instead, we have retained an older version of autoconf and autoheader,
dnl and named the latest versions autoconf-2.4 and autoheader-2.4
dnl
AC_DEFUN(P2_PROG_AUTOCONF,
[AC_CHECK_PROG(AUTOCONF, autoconf-2.4, autoconf-2.4, autoconf)
AC_CHECK_PROG(AUTOHEADER, autoheader-2.4, autoheader-2.4, autoheader)
])dnl
dnl
dnl ###########################################################################
dnl
dnl P2_MALLOC_PACKAGE: Determines which malloc package to use.
dnl
dnl   --with-malloc-package=db
dnl   --with-malloc-package=unix
dnl   --with-malloc-package=gc [default]
dnl
dnl Note that the backslash (\) before $(objroot) is necessary because
dnl ksh and bash interpret $(foo) as "substitute output of command foo"
dnl (i.e., like `foo` in sh and csh).  And, even though the configure
dnl script generated by autoconf begins with #!/bin/sh, some systems
dnl (e.g. linux) substitute for /bin/sh a symlink to bash or ksh.
dnl So, these systems invoke bash or ksh to execute the configure
dnl script. (JAT)
dnl
AC_DEFUN(P2_GC_MALLOC_PACKAGE,
[GC="gc"
AC_MSG_RESULT(GC malloc)
LIBS="$LIBS \$(objroot)/gc/gc.a"
])dnl
dnl
AC_DEFUN(P2_MALLOC_PACKAGE,
[GC=""
AC_MSG_CHECKING(which malloc package to use)
AC_ARG_WITH(malloc-package,
[  --with-malloc-package=db|unix|gc],
[case $withval in
  d*)
    AC_MSG_RESULT(DB malloc)
    AC_DEFINE(USE_DB_MALLOC_PACKAGE)
    LIBS="\$(objroot)/dbmalloc/libdbmalloc.a $LIBS" ;;
  u*)
    AC_MSG_RESULT(UNIX malloc)
    AC_DEFINE(USE_UNIX_MALLOC_PACKAGE) ;;
  g*|yes)
    P2_GC_MALLOC_PACKAGE ;;
  *)
    AC_MSG_RESULT(error)
    AC_MSG_ERROR([invalid argument --with-malloc-package=$withval]) ;;
esac],
P2_GC_MALLOC_PACKAGE)
AC_SUBST(GC)dnl
AC_SUBST(LIBS)dnl
])dnl
dnl
dnl ###########################################################################
dnl
dnl P2_DECL_YYTEXT: Define a preprocessor symbol to declare yytext
dnl
AC_DEFUN(P2_DECL_YYTEXT,
[AC_REQUIRE_CPP()dnl
AC_REQUIRE([AC_PROG_LEX])dnl
AC_MSG_CHECKING(for yytext declaration)
yytext_defined="no"
for yytext_declaration in \
changequote(,)dnl
  'unsigned char yytext[]' 'char yytext[]' 'char *yytext'; do
changequote([,])dnl
  # Create a minimal lex program.
  echo '%%
%{
#undef yywrap
%}
%%
int yywrap() { return(1); }' | ${LEX}
  # Find the lex output.
  if test -f "lex.yy.c" ; then
    LEX_OUTPUT_ROOT="lex.yy"
  elif test -f "lexyy.c" ; then
    LEX_OUTPUT_ROOT="lexyy"
  else
    # Don't know what to do here.
    AC_MSG_ERROR(cannot find output from $LEX, giving up)
    break
  fi
  echo "extern ${yytext_declaration};" >> $LEX_OUTPUT_ROOT.c
  ac_save_LIBS="$LIBS"
  LIBS="$LIBS $LEXLIB"
  # The #include "$LEX_OUTPUT_ROOT.c" is a hack necessary because
  # `cat $LEX_OUTPUT_ROOT.c` cases "no space" error on AIX shell.
  AC_TRY_LINK([#include "$LEX_OUTPUT_ROOT.c"],,
    AC_DEFINE_UNQUOTED(YYTEXT_DECLARATION, ${yytext_declaration})
    yytext_defined="yes")
  LIBS="$ac_save_LIBS"
  # rm -f "${LEX_OUTPUT_ROOT}.c"
  if test "$yytext_defined" = "yes" ; then
    break
  fi
done
AC_MSG_RESULT($yytext_declaration)
if test "$yytext_defined" = "no" ; then
  AC_MSG_WARN(using default declaration of yytext)
  AC_DEFINE_UNQUOTED(YYTEXT_DECLARATION, ${yytext_declaration})
fi
AC_SUBST(LEX_OUTPUT_ROOT)dnl
])dnl
dnl
dnl ###########################################################################
dnl
dnl P2_LEX_TABLE_SIZE: Determines if lex supports table size settings.
dnl
AC_DEFUN(P2_LEX_TABLE_SIZE,
[AC_REQUIRE([AC_PROG_LEX])dnl
AC_REQUIRE([P2_DECL_YYTEXT])dnl
AC_MSG_CHECKING([if ${LEX} supports table size settings])
  # Create a lex program with table size settings.
  echo '%a5000
%e5000
%k1000
%n5000
%o5000
%p10000
%%
%%' | ${LEX} > /dev/null 2>&1
  if test $? -eq 0 ; then
    AC_MSG_RESULT(yes)
    # It is necessary to quote the percent signs (\%),
    # because configure uses the percent sign as a sed delimeter.
    LEX_TABLE_SIZE="\%a5000 \%e5000 \%k1000 \%n5000 \%o5000 \%p10000"
  else
    AC_MSG_RESULT(no)
  fi
  rm -f "${LEX_OUTPUT_ROOT}.c"
AC_SUBST(LEX_TABLE_SIZE)dnl
])dnl
dnl
dnl ###########################################################################
dnl
dnl P2_SYSTEM_PAGE_SIZE: Determines how to get the system page size.
dnl
dnl   getpagesize: SunOS/BSD
dnl   sysconf(_SC_PAGESIZE): Solaris
dnl   4096: default
dnl
AC_DEFUN(P2_SYSTEM_PAGE_SIZE,
[AC_CHECK_FUNC(getpagesize,
  AC_DEFINE(SYSTEM_PAGE_SIZE,getpagesize()),
  AC_TRY_COMPILE([#include <unistd.h>],
    [return sysconf(_SC_PAGESIZE);],
    [AC_DEFINE(SYSTEM_PAGE_SIZE,sysconf(_SC_PAGESIZE))],
    [AC_DEFINE(SYSTEM_PAGE_SIZE,4096)]))
AC_SUBST(SYSTEM_PAGE_SIZE)dnl
])dnl
dnl
dnl ###########################################################################
dnl
dnl P2_PROG_ECHO_N: Determines sh echo option for no new-line.
dnl
dnl Autoconf implements a similar macro (AC_PROG_ECHO_N in acspecific.m4),
dnl but that is intended for internal use only. (JAT)
dnl
AC_DEFUN(P2_PROG_ECHO_N,
[AC_MSG_CHECKING(sh echo option for no new-line)
if echo "foo\c" | grep c >/dev/null; then
  if echo -n "foo" | sed s/-n/xn/ | grep xn >/dev/null; then
    AC_MSG_RESULT(none)
    AC_MSG_WARN(could determine sh echo option for no new-line)
    ECHO_C=""
    ECHO_N=""
  else
    AC_MSG_RESULT(option n)
    ECHO_C=""
    ECHO_N="-n"
  fi
else
  AC_MSG_RESULT(backslash c)
  ECHO_C="\c"
  ECHO_N=""
fi
AC_SUBST(ECHO_C)dnl
AC_SUBST(ECHO_N)dnl
])dnl
dnl
dnl ###########################################################################
dnl
dnl P2_SH_KILL_EXIT_STATUS: Determines the value returned by sh killed process
dnl
AC_DEFUN(P2_SH_KILL_EXIT_STATUS,
[AC_MSG_CHECKING(sh killed process exit status)
( sleep 60 ) &
p=$!
( sleep 1; kill $p ) &
wait $p
SH_KILL_EXIT_STATUS=$?
AC_MSG_RESULT($SH_KILL_EXIT_STATUS)
AC_SUBST(SH_KILL_EXIT_STATUS)dnl
])dnl
dnl
dnl ###########################################################################
dnl
dnl P2_SYSTEM_V_SIGNALS: Check for System V signals.
dnl
dnl We may also want to explicitly check for BSD signals, because the
dnl absence of System V signals does not necessarily imply the
dnl existance of BSB signals.
dnl
dnl The choice between checking explicitly for System V signals or BSD
dnl signals is arbitrary.
dnl
AC_DEFUN(P2_SYSTEM_V_SIGNALS,
[AC_MSG_CHECKING(for system V signals)
AC_TRY_LINK([#include <signal.h>],
  [sighold(SIGALRM); sigpause(SIGALRM);],
  [AC_MSG_RESULT(yes)
   AC_DEFINE(SYSTEM_V_SIGNALS)],
  [AC_MSG_RESULT(no)])
AC_SUBST(SYSTEM_V_SIGNALS)
])dnl
dnl
dnl ###########################################################################
dnl
dnl Make sure that a recent enough version of Autoconf is being used.
dnl
AC_PREREQ(2.0)
dnl
dnl Must call AC_INIT before doing anything else.  The argument to AC_INIT
dnl may be any file in the top directory of the source hierarchy.
dnl
AC_INIT(layergen.c)
dnl
dnl Create configuration header file (instead of output variable DEFS).
dnl Template in acconfig.h
dnl
AC_CONFIG_HEADER(config.h)
dnl
P2_PROG_CC
AC_C_INLINE
AC_PROG_AWK
AC_PROG_INSTALL
AC_PROG_LEX
AC_PROG_YACC
AC_PROG_RANLIB
P2_EXIT_FLAGS
P2_PROG_INDENT
P2_PROG_AUTOCONF
P2_PROG_EGREP
P2_DECL_YYTEXT
P2_UNION_SEMUN
P2_LEX_TABLE_SIZE
P2_SYSTEM_PAGE_SIZE
P2_PROG_ECHO_N
P2_SH_KILL_EXIT_STATUS
P2_SYSTEM_V_SIGNALS
dnl
dnl Define HAVE_SYS_SYSMIPS_H if the header file sys/sysmips.h exists.
dnl
AC_CHECK_HEADERS(sys/sysmips.h)
dnl
dnl Do this last since this might add gc.a to $LIBS even though
dnl gc.a might not exist yet.
dnl
P2_MALLOC_PACKAGE
dnl
dnl Must call AC_OUTPUT after doing everything else.
dnl The first argument to AC_OUTPUT specifies the Makefile's
dnl and other files resulting from configuration.
dnl The second argument to AC_OUTPUT ensures that config.h is
dnl considered up to date.
dnl
AC_OUTPUT(Makefile Makeconfig P2
  ddl/Makefile gc/Makefile info/Makefile pb/Makefile paces/Makefile
  rl/Makefile tools/Makefile xp/Makefile x/Makefile,
  date > stamp-conf)
