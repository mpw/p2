// $Id: generic_funcall.xp,v 45.0 1997/09/19 05:46:22 jthomas Exp $
// Copyright (C) 1997, The University of Texas at Austin.

layer ds generic_funcall[ ds ] stable curs_state no annotation retrieval_always

!#include <assert.h> /* assert() */
!#include "qopt.h"
!#include "generic_funcall.h"

#define COMMENT "proceduralized by generic_funcall"

/* Cursor */

optimize(cursor)
{
  optimize(cursor);
  %c.retrieval_layer = layer;
  layer = %ln;
}

ref(cursor, field)
%{ 
    ref(cursor, field)
%} 

iref(cursor, field)
%{ 
    iref(cursor, field)
%} 

pos(cursor, expr)
%{ 
    pos(cursor, expr)
%} 

swap(cursor0, cursor1)
%{ 
    swap(cursor0, cursor1);
%} 

upd(cursor, field, expr)
{
  if (cursor_id == GENERIC_CURS_ID
      || funbody == MACRO_EXPAND_FUNBODY || funbody == UPD_OP)
  {
    layer = %c.retrieval_layer;
    %{
       upd(cursor, field, expr);
    %}
    layer = %ln;
  }
  else
  {
    char func[MAX_IDENT_LEN*2+30];
    int t = op_list_match(op_list, "upd", field);
    assert(t >= 0);
    sprintf(func, "/* upd %s */ (%s).op_vec[%d]",
            COMMENT, cursor, t);
    sprintf(container, "*(%s).con", cursor);
    %{
       %v.func(cursor, expr);
    %} 
  }
}

def_cursor_func : 
$HEADER
{ 
    if (cursor_id == GENERIC_CURS_ID
        || funbody == MACRO_EXPAND_FUNBODY || funbody == $OP)
    { 
      layer = %c.retrieval_layer; 
      $CALLDOWN; 
      layer = %ln; 
    } 
    else
    { 
      char func[MAX_IDENT_LEN*3+30]; 
      int t = op_list_match(op_list, $STRNAME, 0); 
      assert(t >= 0);
      assert(strlen($STRNAME) < MAX_IDENT_LEN);
      sprintf(func, "/* %s %s */ (%s).op_vec[%d]",
              COMMENT, $STRNAME, cursor, t);
      sprintf(container, "*(%s).con", cursor); 
      %{ 
        %v.func $GENERICARGS 
      %} 
    }
    $GENSEMI; 
}

def_container_func : 
$HEADER
{ 
    if (container_id == GENERIC_CONT_ID
        || funbody == MACRO_EXPAND_FUNBODY || funbody == $OP)
    {
      $CALLDOWN; 
    } 
    else
    { 
      char func[MAX_IDENT_LEN*3+30];
      int t = op_list_match(op_list, $STRNAME, 0);
      assert(t >= 0);
      assert(strlen($STRNAME) < MAX_IDENT_LEN);
      sprintf(func, "/* %s %s */ (%s).op_vec[%d]",
              COMMENT, $STRNAME, container, t); 
      %{ 
        %v.func $GENERICARGS 
      %} 
    }
    $GENSEMI; 
}
