// $Id: qsort.xp,v 45.2 1997/09/20 03:43:56 jthomas Exp $
// Copyright (C) 1997, The University of Texas at Austin.

layer ds qsort[ mem ] stable annotation retrieval_sometimes

!#include "qsort.h"
!#include "qopt.h"

#define COMPARISON_FUNCTION "qsort_cmp_id%d" // container_id

#define SORT() \
{ \
  if (!container.sorted) { \
     qsort(container.elements, container.current_size, \
           sizeof(struct obj_type), %v.comp); \
     container.sorted = 1; \
  } \
}

#define SEARCH() \
  i = (lower + upper) / 2; \
  cursor.obj = container.elements + i; \
  comparison_result = %v.prim(cursor.%a.ofield, %v.key); \
  if (comparison_result < 0) \
    lower = i + 1; \
  else if (comparison_result > 0) \
    upper = i - 1; \

// Primary (i.e., unique) key.
// Find any matching element.

#define RESET_START_PRIMARY_KEY(FIRST, NEXT_FREE) \
{ \
  BOUNDS b; \
  char comp[MAX_IDENT_LEN]; \
  sprintf(comp, COMPARISON_FUNCTION, container_id); \
  define_bounds(te, &b,cursor,predicate,%a.ofield,%a.bi); \
  if (!b.bottom && strcmp(b.lower,b.upper) == 0) \
  { \
    char prim[MAX_IDENT_LEN]; \
    char key[MAX_IDENT_LEN]; \
    sprintf(prim, "%scmp", %a.ofield_type); \
    sprintf(key, "%s", b.lower); \
    %{ \
       { \
         int i; \
         int lower = 0; \
         int upper = container.current_size-1; \
         int comparison_result = 1; \
         SORT() \
         while (lower <= upper && comparison_result != 0) { \
           SEARCH() \
         } \
         if (comparison_result != 0) \
           cursor.obj = NEXT_FREE; \
       } \
    %} \
  } \
  else { \
    %{ \
       SORT() \
       cursor.obj = FIRST; \
    %} \
  } \
}

// Secondary (i.e. non-unique) key.
// Finds leftmost matching element.

#define RESET_START_SECONDARY_KEY(FIRST, NEXT_FREE, UPPER, ONE) \
{ \
  BOUNDS b; \
  char comp[MAX_IDENT_LEN]; \
  sprintf(comp, COMPARISON_FUNCTION, container_id); \
  define_bounds(te, &b,cursor,predicate,%a.ofield,%a.bi); \
  if (!b.bottom && strcmp(b.lower,b.upper) == 0) \
  { \
    char prim[MAX_IDENT_LEN]; \
    char key[MAX_IDENT_LEN]; \
    sprintf(prim, "%scmp", %a.ofield_type); \
    sprintf(key, "%s", b.lower); \
    %{ \
       { \
         int i; \
         int lower = 0; \
         int upper = container.current_size-1; \
         int comparison_result = 1; \
         struct obj_type *temp = NEXT_FREE; \
         SORT() \
         while (lower <= upper) { \
           SEARCH() \
           else { \
             temp = cursor.obj; \
             UPPER = i - ONE; \
           } \
         } \
         if (comparison_result == 0) \
           cursor.obj = temp; \
       } \
    %} \
  } \
  else { \
    %{ \
       SORT() \
       cursor.obj = FIRST; \
    %} \
  } \
}

xform(element, container, cursor)
{
   // Step 1:  add fields to container

   add container : int sorted;
   add container : int current_size;
   add container : struct element *next_free;
   add container : struct element elements[%a.max_size];

   // Step 2:  remember additional info about annotations

   %a.typeptr     = find_data_type(element, %a.ofield);
   %a.ofield_type = %a.typeptr->typename;
   %a.bi          = %a.typeptr->bounds_impact;

   // Step 3:  transform the input data types

   xform(element, container, cursor);
}

ddlhint(argc, argv) 
{
  limit 3 arguments;

  get_ddlhint_argument(%a.ofield, argv[1]);
  get_ddlhint_argument(%a.max_size, argv[2]);
  get_ddlhint_argument(%a.primary_or_secondary, argv[3]);

  // Option is "prinary" (key is unique)
  // or "secondary" (key is not necessarily unique).
  // Default is "secondary"
  if (strcmp(%a.primary_or_secondary, "") == 0)
    strcpy(%a.primary_or_secondary, "secondary");

  if (strcmp(%a.primary_or_secondary, "primary") != 0
      && strcmp(%a.primary_or_secondary, "secondary") != 0)
    error("expected primary or secondary");
}

optimize(cursor)
{
   cost = 1;
   layer = %ln;
   if (strcmp(%a.ofield, orderby_field) == 0)
     retrieval_direction = 1;
   else
     retrieval_direction = 0;
}

init_curs(cursor)
%{
%}

init_cont(container)
%{
   init_cont (container);
   container.sorted = 0;
   container.current_size = 0;
   container.next_free = container.elements;
%}

pos(cursor, expr)
%{
   cursor.obj = expr;
%}

query(cursor)
{ 
   char *p = bind_predicate(te, cursor, obj_type, predicate);
   %{  
      %v.p
   %}
   xfree(p);
}

insert(cursor, record)
%{
#ifndef NDEBUG
   // The sorted flag must be equal to zero or one.
   if (container.sorted != 0 && container.sorted != 1)
     P2_runtime_error("qsort:insert: container.sorted flag corrupted");
#endif // NDEBUG
   if (container.sorted)
     container.sorted = 0;
   (container.current_size)++;
   cursor.obj = container.next_free++;
   * (struct orig_type *) cursor.obj = record;
%}

overflow(container)
%{ 
   (container.next_free >= container.elements + %a.max_size)
%}

end_adv(cursor)
%{
   (cursor.obj >= container.next_free)
%}

end_rev(cursor)
%{
   (cursor.obj < container.elements)
%}

adv(cursor)
%{
   (cursor.obj++);
%}

rev(cursor)
%{
   (cursor.obj--);
%}

delete(cursor)
{
   warning(3, "cannot delete records in qsort");
}

reset_start(cursor)
{
  if (strcmp(%a.primary_or_secondary, "secondary") == 0)
    RESET_START_SECONDARY_KEY(container.elements, container.next_free, upper, 1)
  else
    RESET_START_PRIMARY_KEY(container.elements, container.next_free)
}

reset_end(cursor)
{
  if (strcmp(%a.primary_or_secondary, "secondary") == 0)
    RESET_START_SECONDARY_KEY(container.next_free-1, container.elements-1, lower, -1)
  else
    RESET_START_PRIMARY_KEY(container.next_free-1, container.elements-1)
}

swap(cursor0, cursor1)
%{
#ifndef NDEBUG
   // The sorted flag must be equal to zero or one.
   if (container.sorted != 0 && container.sorted != 1)
     P2_runtime_error("qsort:swap container.sorted flag corrupted");
#endif // NDEBUG
   if (container.sorted)  
     container.sorted = 0;
#if 0
   {
     struct obj_type r = *(cursor0.obj);
     *(cursor0.obj) = *(cursor1.obj);
     *(cursor1.obj) = r;
   }
#else
   {
     struct orig_type r;
     memcpy(&r, cursor0.obj, sizeof(struct orig_type));
     memcpy(cursor0.obj, cursor1.obj, sizeof(struct orig_type));
     memcpy(cursor1.obj, &r, sizeof(struct orig_type));
   }
#endif
%}

getrec(cursor, record)
%{
   record = *(struct orig_type *) cursor.obj;
%}

upd(cursor, field, expr)
{
  // cursor.field = expr.
  char func[MAX_IDENT_LEN+10];
#if 0
  ENTRY *e = symtab_lookup(symtab[SUE], orig_type);
#else
  ENTRY *e = symtab_lookup(symtab[SUE], obj_type);
#endif

  // Mark the container unsorted only if updating the ordering field.
  if (strcmp(field, %a.ofield) == 0)
  %{
#ifndef NDEBUG
     // The sorted flag must be equal to zero or one.
     if (container.sorted != 0 && container.sorted != 1)
       P2_runtime_error("qsort:upd: container.sorted flag corrupted");
#endif // NDEBUG
    if (container.sorted)
      container.sorted = 0;
  %}

  strcpy(func, find_data_type(e->ident, field)->typename);
  strcat(func,"_CPY");
%{
  %v.func(cursor.field, expr);
%}
}

k_verbatim(container)
{
  char prim[MAX_IDENT_LEN];
  char comp[MAX_IDENT_LEN];
  sprintf(prim, "%scmp", %a.ofield_type);
  sprintf(comp, COMPARISON_FUNCTION, container_id);
  %{
    int %v.comp (const void *o1, const void *o2)
    {
      return(%v.prim(((struct obj_type *) o1)->%a.ofield,
                     ((struct obj_type *) o2)->%a.ofield));
    }
    k_verbatim(container);
  %}
}

// Default adhoc operations. 

#include "adhoc.xph"

