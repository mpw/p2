// $Id: prime.p2,v 45.0 1997/09/19 05:44:02 jthomas Exp $
// Copyright (C) 1997, The University of Texas at Austin.

// This example program was written by BJG.  It is used as an example
// in the manual, so don't change this file without also changing the
// manual, particularly info/language.texi (JAT)

// PART I

#define MAX_ARRAY 10 // Size of prime_cont2
#define MAX_NUM 250 // Default max_num

typedef struct { 
  int num;
} prime_num_type;

typex { 
  ta = conceptual[cardinality[dlist[malloc[transient]]]];
  tb = conceptual[cardinality[odlist[array[transient]]]];
}

// PART II

container < prime_num_type > stored_as ta with {
} prime_cont1;

container < prime_num_type > stored_as tb with {
  odlist key is num;
  array size is MAX_ARRAY;
} prime_cont2;

typedef generic_container < prime_num_type > GK;

// PART III

cursor < prime_cont1 > orderby ascending num c11;
cursor < prime_cont1 > where "($.num%10) == 1" orderby ascending num c12;

cursor < prime_cont2 > orderby descending num c21;
cursor < prime_cont2 > where "($.num%10) == 1" orderby descending num c22;

typedef generic_cursor < prime_num_type > GC;

// PART IV

element < prime_cont1 > prime_cont1_type;
element < prime_cont2 > prime_cont2_type;

// PART V

int max_num; // We will find all primes <= max_num (default is MAX_NUM)

// PART VI

void print(GC gc, char *name)
{   
  printf("\nContainer %s:\n",name); 
  foreach(gc) { 
    printf("%3d ",gc.num); 
  } 
  printf("\n"); 
}

void print_cardinality(GK gk, char *title) 
{
  printf("cardinality of %s container =  %d\n",title,cardinality(gk));
}  

void init_primes(GC gc)
{
  int i,j;
  int div;
  prime_num_type node;

  for(i=3;i<max_num;i+=2) {
    div = 0;
    for(j=2;j<(i/2) && !div;j++)
      if (i%j == 0) 
	div=1;
    if (!div) { 
      node.num = i;
      insert(gc, node);
    }
  }
  node.num = 2;
  insert(gc, node);
}

// PART VII

int main (int argc, char *argv[])
{
  if (argc > 2)
    printf("Usage: prime [max_num]");
  if (argc == 2)
    max_num = atoi(argv[1]);
  else
    max_num = MAX_NUM;

  open_cont(prime_cont1);
  open_cont(prime_cont2);

  init_curs(c11);
  init_curs(c12);
  init_curs(c21);
  init_curs(c22);

  init_primes((GC)&c11);

  // Insert all primes ending in 1 into the 2nd container.
  foreach(c12) { 
    prime_num_type p;
        
    if (overflow(prime_cont2)) { 
      printf("reached container 2 capacity\n");
      break;
    }
    p.num = c12.num;
    insert(c21,p);
  }

  printf("size of container #1 structure is: %d\n",
	 sizeof(prime_cont1_type));
  printf("size of container #2 structure is: %d\n",
	 sizeof(prime_cont2_type));
  printf("size of elements are: %d\n",
	 sizeof(prime_num_type));

  print((GC)&c11, "#1");
  print_cardinality((GK)&prime_cont1, "all primes");

  print((GC)&c22, "#2 -- 1s only");
  print_cardinality((GK)&prime_cont2, "primes ending in 1");

  close_cont(prime_cont2);
  close_cont(prime_cont1);

  return(0);
}
