/* $Id: xact-schema1.p2,v 45.0 1997/09/19 05:45:22 jthomas Exp $ */
/* Copyright (C) 1996, The University of Texas at Austin. */

/* Schema/Transaction Regression Test. */
/* Schema with containers and composite cursors. */
/* Transaction with begin_xact() and commit_xact(). */

#include "P2_paces.h"

typedef struct {
  int  empno;
  int  age;
  int  deptno;
  int  jobno;
  char *dept_name;
  char *name;
} EMPLOYEE;

typedef struct {
  int  deptno;
  char *name;
} DEPARTMENT;

typedef struct {
  int  jobno;
  char *name;
} JOB;

typex {
  t = P2_COMPCURS_TYPEX;
}

/* Schema with containers. */

schema {
  container <EMPLOYEE> employee;
  container <DEPARTMENT> department;
  container <JOB> job;
  int i;
  int j;
}
stored_as t with {
#if 1
  P2_COMPCURS_SCHEMA_ANNOTE(employee, empno, 1000);
  P2_COMPCURS_SCHEMA_ANNOTE(department, deptno, 100);
  P2_COMPCURS_SCHEMA_ANNOTE(job, jobno, 10);
#else
  array size of employee is 1000;
  array size of department is 100;
  array size of job is 10;
#endif
} s;

compcurs < ee s.employee, dd s.department, jj s.job >
  where "$ee.deptno == $dd.deptno && $ee.jobno == $jj.jobno && $ee.dept_name == 'Biology'"
  orderby $ee.empno
xx;

cursor < s.employee > orderby empno eee;
cursor < s.department > ddd;
cursor < s.job > jjj;

void
read_data (void)
{
  EMPLOYEE employee_data[] = {
   { 10000,60,1,100,"Biology","Akers, Mark" },
   { 10070,22,1,101,"Biology","Andrews, Kay" },
   { 10020,21,1,102,"Biology","Alexander, Joe" },
   { 10010,40,2,102,"History","Akin, Monica" },
   { 10050,42,1,101,"Biology","Akerson, Suzanne" },
   { 10040,53,3,100,"Physics","Akerson, Mary" },
   { 10060,61,1,102,"Biology","Andrews, John" },
   { 10030,23,1,100,"Biology","Akerson, Gwyn" },
   { -1 }
  };

  DEPARTMENT department_data[] = {
   { 1,"Biology" },
   { 2,"History" },
   { 3,"Physics" },
   { -1 }
  };

  JOB job_data[] = {
   { 100,"Faculty" },
   { 101,"Staff" },
   { 102,"Graduate" },
   { 103,"Undergraduate" },
   { -1 }
  };

  {
    EMPLOYEE *p;
    for (p = employee_data; p->empno != -1; p++) {
      insert(eee, *p);
    }
  }
  {
    DEPARTMENT *p;
    for (p = department_data; p->deptno != -1; p++) {
      insert(ddd, *p);
    }
  }
  {
    JOB *p;
    for (p = job_data; p->jobno != -1; p++) {
      insert(jjj, *p);
    }
  }
}

int
main ()
{
  begin_xact(s);

  open_cont(s.employee);
  open_cont(s.department);
  open_cont(s.job);

  init_curs(eee);
  init_curs(ddd);
  init_curs(jjj);

  read_data();

  printf("Join obtained by hand:\n");
  foreach(eee) {
    foreach(ddd) {
      foreach(jjj) {
        if ((eee.deptno == ddd.deptno)
	    && (eee.jobno == jjj.jobno)
	    && (strcmp(eee.dept_name, "Biology") == 0)
          )
	  printf("%d %20s %6s %-10s\n", eee.empno,
		 eee.name, ddd.name, jjj.name);
      }
    }
  }

  printf("Join obtained using a composite cursor:\n");
  initk(xx);
  foreachk(xx) {
    printf("%d %20s %6s %-10s\n", (xx.ee).empno,
	   (xx.ee).name, (xx.dd).name, (xx.jj).name);
  }

  close_cont(s.employee);
  close_cont(s.department);
  close_cont(s.job);

  commit_xact(s);

  return(0);
}
