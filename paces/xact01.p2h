/* $Id: xact01.p2h,v 45.0 1997/09/19 05:45:24 jthomas Exp $ */
/* Copyright (C) 1997, The University of Texas at Austin. */

/* Transaction with named schema, begin_xact(), commit_xact(),
   and abort_xact(). */

/*****************************************************************************/
/*                  Includes.                                                */
/*****************************************************************************/

#include <stdio.h>
#include "P2_paces.h"

/*****************************************************************************/
/*                  Defines.                                                 */
/*****************************************************************************/

/* Transactions. */
#if 1
#ifndef XACT
#define XACT
#endif
#endif

/* Trace and label processes. */
#if 0
#if !defined(TRACE)
#define TRACE
#endif /* TRACE */
#endif

/*****************************************************************************/
/*                  Declarations.                                            */
/*****************************************************************************/

typedef struct {
   int   empno;
   int   age;
   char  dept_name[20];
   char  name[22];
} EMP_TYPE;

EMP_TYPE rawdata[] = {
   { 10000,60,"Biology","Akers, Mark" },
   { 10070,22,"Biology","Andrews, Kay" },
   { 10020,21,"Biology","Alexander, Joe" },
   { 10010,40,"Biology","Akin, Monica" },
   { 10050,42,"Biology","Akerson, Suzanne" },
   { 10040,53,"Biology","Akerson, Mary" },
   { 10060,61,"Biology","Andrews, John" },
   { 10030,23,"Biology","Akerson, Gwyn" },
   { -1 }
};

typex {
  t = conceptual[P2_LOG_LAYER[xact[process[avail[array[transient]]]]]];
}

schema {
  container <EMP_TYPE> emp_cont;
} stored_as t with {
  array size of emp_cont is 10;
} emp_schema;

cursor <emp_schema.emp_cont>
  orderby P2_ASCENDING empno
all_emp;

cursor <emp_schema.emp_cont>
  where "$.name <= 'Al' "
  orderby P2_ASCENDING name
ak_emp;

cursor <emp_schema.emp_cont>
  where "$.empno > 10020"
  orderby P2_ASCENDING empno
recent_emp;

cursor <emp_schema.emp_cont>
  where "$.age > 40"
  orderby P2_ASCENDING age
old_emp;

/*****************************************************************************/
/*                  Main.                                                    */
/*****************************************************************************/

int main (void) 
{
#if defined(TRACE)
  /* Process label. */
  char label[P2_PROCESS_ID_LABEL_SIZE];
#endif /* TRACE */
  
  open_schema(emp_schema);
  open_cont(emp_schema.emp_cont);
  init_curs(old_emp);
  init_curs(all_emp);
  init_curs(recent_emp);
  init_curs(ak_emp);

#if defined(TRACE)
  /* Label the process. */
  P2_label_process_id("Parent");
#endif /* TRACE */

#if defined(XACT)
  begin_xact(emp_schema);
#endif

  {
    EMP_TYPE *p;
    for (p = rawdata; p->empno != -1; p++) {
      insert(all_emp, *p);
    }
  }

  printf("all emp are:\n");
  P2_ITERATOR(all_emp)
  {
    EMP_TYPE r;
    getrec(all_emp, r);
    printf("%d %d %s\n", r.empno, r.age, r.name);
  }

  printf("\nak emp are:\n");
  P2_ITERATOR(ak_emp)
  {
    printf("%d %d %s\n", ak_emp.empno, ak_emp.age, ak_emp.name);
  }

  printf("\nrecent (empno > 10020) emp are:\n");
  P2_ITERATOR(recent_emp)
  {
    printf("%d %d %s\n", recent_emp.empno, recent_emp.age, recent_emp.name);
  }
 
#if defined(XACT)
  commit_xact(emp_schema);
#endif

#if defined(XACT)
  begin_xact(emp_schema);
#endif

  printf("\nold emp are:\n");

    P2_ITERATOR(old_emp)
    {
      EMP_TYPE r;
      getrec(old_emp, r);
      printf("%d %d %s\n", r.empno, r.age, r.name);
#if defined(XACT)
      delete(old_emp);
#endif
    }

#if defined(XACT)
  abort_xact(emp_schema);
#endif

#if defined(XACT)
  begin_xact(emp_schema);
#endif

  printf("\nold emp are:\n");
  P2_ITERATOR(old_emp)
  {
    printf("%d %d %s\n", old_emp.empno, old_emp.age, old_emp.name);
  }

  printf("\nremaining emp are:\n");
  P2_ITERATOR(all_emp)
  {
    printf("%d %d %s\n", all_emp.empno, all_emp.age, all_emp.name);
  }

#if defined(XACT)
  commit_xact(emp_schema);
#endif

  close_cont(emp_schema.emp_cont);
  close_schema(emp_schema);

  /* Exit. */
  exit(0);
}
