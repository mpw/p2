/* $Id: avail01.p2,v 45.0 1997/09/19 05:42:47 jthomas Exp $ */
/* Copyright (C) 1997, The University of Texas at Austin. */

/* Test the layer x/avail.xp */

/*****************************************************************************/
/*                  Includes.                                                */
/*****************************************************************************/

#include <stdio.h>    /* printf() */
#include <assert.h>   /* assert() */
#include "P2_paces.h"

/*****************************************************************************/
/*                  Defines.                                                 */
/*****************************************************************************/

#define N 10
#define M 10000

/* Print debugging output. */
#if 0
#ifndef DEBUG
#define DEBUG
#endif /* DEBUG */
#endif

/* Use hash. */
#if 1
#if !defined(HASH)
#define HASH
#endif /* HASH */
#endif

/*****************************************************************************/
/*                  Declare typex and schema.                                */
/*****************************************************************************/

typex {
#if defined(HASH)
  t = top2ds[qualify[cardinality[hash[avail[array[transient]]]]]];
#else
  t = top2ds[qualify[cardinality[avail[array[transient]]]]];
#endif /* HASH */
}

typedef struct {
  int i; /* index: 0..N-1 */
  int s; /* serial number: 0..M-1 */
} E;

container <E> stored_as t with {
#if defined(HASH)
  hash key is i with size N;
#endif /* HASH */
  array size is N;
} k;

int i;

cursor <k> where "$.i == i" q; /* qualified. */
cursor <k> c; /* un-qualified. */

E e;
int s;

/*****************************************************************************/
/*                  Main.                                                    */
/*****************************************************************************/

int
main()
{
  init_cont(k);
  init_curs(q);
  init_curs(c);

  assert(cardinality(k) == 0);
  for (s = 0; s < M; s++)
  {
    if (s < N)
    {
      assert(cardinality(k) == s);
      i = s;
    }
    else
    {
      /* delete */
      assert(cardinality(k) == N);
      assert(overflow(k));
      i = (rand() % N);
      assert(i >= 0 && i < N);
      reset_start(q);
      assert(!end_adv(q));
      assert(q.i == i);
#if defined(DEBUG)
      printf("deleting i=%d s=%d\n", q.i, q.s);
#endif
      delete(q);
    }
    /* insert */
    e.i = i;
    e.s = s;
    insert(q, e);
  }
  /* print */
  assert(cardinality(k) == N);
  assert(overflow(k));
  foreach(c)
  {
    printf("%d\n", c.i);
  }

  close_cont(k);
  return 0;
}
