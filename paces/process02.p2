/* $Id: process02.p2,v 45.0 1997/09/19 05:44:03 jthomas Exp $ */
/* Copyright (C) 1997, The University of Texas at Austin. */

/* Test semaphores. */
/* total = 1+1+1+1+1+1+1+1+1+1 = 10 */
/* Analogous to:
   process03.p2 (total = 0+1+2+3+4+5+6+7+8+9+10 = 45),
   process07.p2 (total = 1+1+1+...+1 = 100), and
   lock06.p2 (uses the P2 lock manager, rather the IPC semaphores)
   (JAT) */

/*****************************************************************************/
/*                  Includes.                                                */
/*****************************************************************************/

#include "P2_paces.h"

#include <stdio.h>    /* printf() */
#include <unistd.h>   /* sleep() */

/*****************************************************************************/
/*                  Defines.                                                 */
/*****************************************************************************/

/* Print debugging output. */
#if 0
#ifndef DEBUG
#define DEBUG
#endif /* DEBUG */
#endif

/* Use a non-NULL container base struct type
   (rather than a container element) to store the shared data. */
#if 1
#define CONTAINER_STRUCTURE
#endif

/*****************************************************************************/
/*                  Globals.                                                 */
/*****************************************************************************/

typedef struct {
  int i;
} DATA;

typex {
#ifdef CONTAINER_STRUCTURE
  t = top2ds[container_structure[array[mmap_shared]]];
#else
  t = top2ds[array[mmap_shared]];
#endif /* CONTAINER_STRUCTURE */
}

container <DATA> stored_as t with {
  array size is 1;
#ifdef CONTAINER_STRUCTURE
  /* In general, the container base structure is NOT the same as the
     element data structure.  In this particular case, however, it is,
     because the data that would be stored in the single anchor
     element is instead stored in the container struct.
     This is elegant, but potentially confusing. (JAT) */
  container_structure "DATA";
#endif /* CONTAINER_STRUCTURE */
  mmap_shared file is "/tmp/P2_process02-data" with size 100;
} cont;

#ifndef CONTAINER_STRUCTURE
cursor <cont> curs;
#endif /* CONTAINER_STRUCTURE */

/*****************************************************************************/
/*                  Print error.                                             */
/*****************************************************************************/

void
print_error (const char *s)
{
  perror(s);
}

/*****************************************************************************/
/*                  Main.                                                    */
/*****************************************************************************/

int
main ()
{
  P2_PROCESS_ID child_pid;
  P2_SEMAPHORE_ID semaphore;
#ifndef CONTAINER_STRUCTURE
  DATA data;
#endif /* CONTAINER_STRUCTURE */
  int i;
  int total;

  /* Initialize process manager. */
  P2_init_process();

  open_cont(cont);
#ifdef CONTAINER_STRUCTURE
  cont.i = 0;
#else
  init_curs(curs);
  data.i = 0;
  insert(curs, data);
#endif /* CONTAINER_STRUCTURE */

  if (P2_init_semaphore(&semaphore, 1) < 0)
    print_error("Can't initialize semaphore");

  for (i = 0; i < 10; i++)
  {
    child_pid = P2_fork_process();
    if (child_pid == -1)
    {
      /*** This is an error. ***/

      fprintf(stderr, "i = %d: ", i);
      print_error("Can't fork child %d");
      exit(1);
    }
    else if (child_pid == 0)
    {
      /*** This is the child. ***/

      if (P2_lock_semaphore(&semaphore) < 0)
	print_error("Can't lock semaphore");

#ifdef CONTAINER_STRUCTURE

      /* cont.i = cont.i + 1 */
      total = cont.i + 1;
#ifndef DEBUG
      /* For paces: always produce the same output. */
      printf("Pause\n");
#else
      /* For debugging: print detailed info. */
      printf("Pause %d + 1 = %d\n", cont.i, total);
#endif /* DEBUG */
      cont.i = total;

#else /* CONTAINER_STRUCTURE */

      /* curs.i = curs.i + 1 */
      total = ref(curs, i) + 1;
#ifndef DEBUG
      /* For paces: always produce the same output. */
      printf("Pause\n");
#else
      /* For debugging: print detailed info. */
      printf("Pause %d + 1 = %d\n", ref(curs, i), total);
#endif
      upd(curs, i, total);

#endif /* CONTAINER_STRUCTURE */

      /* Flush stdout. */
      fflush(stdout);

      if (P2_unlock_semaphore(&semaphore) < 0)
	print_error("Can't unlock semaphore");

      exit(0);
    }
    else
    {
      /*** This is the parent. ***/
    }
  }

  /* Wait until all children are finished with the semaphore. */
#ifdef CONTAINER_STRUCTURE
  while(cont.i < 10)
#else
  while(ref(curs, i) < 10)
#endif /* CONTAINER_STRUCTURE */
    P2_sleep_process(1);

  /* Lock the semaphore. */
  if (P2_lock_semaphore(&semaphore) < 0)
    print_error("Can't lock semaphore");
  /* Delete the semaphore. */
  if (P2_delete_semaphore(&semaphore) < 0)
    print_error("Can't delete semaphore");

#ifdef CONTAINER_STRUCTURE
  total = cont.i;
#else
  total = ref(curs, i);
#endif /* CONTAINER_STRUCTURE */
  printf("total = %d\n", total);
  close_cont(cont);

  P2_delete_process();

  exit(0);
}
