/* $Id: process10.p2,v 45.0 1997/09/19 05:44:07 jthomas Exp $ */
/* Copyright (C) 1997, The University of Texas at Austin. */

/* Test P2_process_join() times N = 100 */
/* Serialize and limit live children to 1. */
/* Parent spawns all children. */

/*****************************************************************************/
/*                  Includes.                                                */
/*****************************************************************************/

#include "P2_paces.h"

#include <assert.h>   /* assert() */
#include <stdio.h>    /* printf() */
#include <unistd.h>   /* sleep() */

/*****************************************************************************/
/*                  Defines.                                                 */
/*****************************************************************************/

#define N 100 /* Total number of children to fork() */

/*****************************************************************************/
/*                  Main.                                                    */
/*****************************************************************************/

int
main ()
{
  P2_PROCESS_ID child_pid;
  int i;

  /* Initialize process manager. */
  P2_init_process();

  for (i = 0; i < N; i++)
  {
    child_pid = P2_fork_process();
    if (child_pid == -1)
    {
      /*** This is an error. ***/

      fprintf(stderr, "i = %d: ", i);
      perror("Can't fork child");
      exit(1);
    }
    else if (child_pid == 0)
    {
      /*** This is the child. ***/

      printf("%d\n", i);

      exit(0);
    }
    else
    {
      /*** This is the parent. ***/

      /* Wait for the previous child to finish before forking() the
         next child. */
      if (P2_join_process(child_pid) != 0)
	perror("P2_join_process() != 0");
    }
  }

  /* Delete process manager. */
  P2_delete_process();

  exit(0);
}
