/* $Id: xact03.p2h,v 45.0 1997/09/19 05:45:28 jthomas Exp $ */
/* Copyright (C) 1997, The University of Texas at Austin. */

/* Transaction with conceptual (and thus orderby) layer, named schema,
   begin_xact(), commit_xact(), and abort_xact(). */

/* delflag */

/* Analogous to paces/xact04.p2 (avail) */

#include <stdio.h>
#include "P2_paces.h"

typedef struct {
   int   empno;
   int   age;
   char  dept_name[20];
   char  name[22];
} EMP_TYPE;

EMP_TYPE rawdata[] = {
   { 10000,60,"Biology","Akers, Mark" },
   { 10070,22,"Biology","Andrews, Kay" },
   { 10020,21,"Biology","Alexander, Joe" },
   { 10010,40,"Biology","Akin, Monica" },
   { 10050,42,"Biology","Akerson, Suzanne" },
   { 10040,53,"Biology","Akerson, Mary" },
   { 10060,61,"Biology","Andrews, John" },
   { 10030,23,"Biology","Akerson, Gwyn" },
   { -1 }
};

/* If the type expression uses delflag (rather than avail) we must
   increase the array size to 100. */

typex {
#if 0
  /* Debugging. */
  t = conceptual[P2_LOG_LAYER[xact[lock[process[delflag[array[transient]]]]]]];
#else
  /* Normal. */
  t = P2_XACT_TYPEX(P2_PROTOCOL_LAYER, P2_BOTTOM_LAYER);
#endif
}

schema {
  container <EMP_TYPE> emp_cont;
} stored_as t with {
  P2_BOTTOM_SCHEMA_ANNOTE(emp_cont, empno, 100);
} emp_schema;

cursor <emp_schema.emp_cont>
  orderby P2_DESCENDING empno
all_emp;

cursor <emp_schema.emp_cont>
  where "$.age > 40"
  orderby P2_ASCENDING age
old_emp;

int main (void) 
{
  int new_empno = 100000;

#if 0
  /* Initialize xact manager. */
  P2_init_xact_manager();
#endif

  open_schema(emp_schema);
  open_cont(emp_schema.emp_cont);
  init_curs(all_emp);
  init_curs(old_emp);

  /*** Transaction 1 ***/

  /* insert */
  begin_xact(emp_schema);
  {
    EMP_TYPE *p;
    for (p = rawdata; p->empno != -1; p++) {
      insert(all_emp, *p);
    }
  }
  abort_xact(emp_schema);

  /*** Transaction 2 ***/

  begin_xact(emp_schema);
  printf("insert after abort:\n");
  P2_ITERATOR(all_emp)
  {
    printf("%d %d %s\n", all_emp.empno, all_emp.age, all_emp.name);
  }
  {
    EMP_TYPE *p;
    for (p = rawdata; p->empno != -1; p++) {
      insert(all_emp, *p);
    }
  }
  commit_xact(emp_schema);

  /*** Transaction 3 ***/

  begin_xact(emp_schema);
  printf("\ninsert after commit:\n");
  P2_ITERATOR(all_emp)
  {
    printf("%d %d %s\n", all_emp.empno, all_emp.age, all_emp.name);
  }
  /* update */
  P2_ITERATOR(old_emp)
  {
    new_empno--;
    upd(old_emp, empno, new_empno);
  }
  abort_xact(emp_schema);

  /*** Transaction 4 ***/

  begin_xact(emp_schema);
  printf("\nupdate after abort:\n");
  P2_ITERATOR(all_emp)
  {
    printf("%d %d %s\n", all_emp.empno, all_emp.age, all_emp.name);
  }
  P2_ITERATOR(old_emp)
  {
    new_empno--;
    upd(old_emp, empno, new_empno);
  }
  commit_xact(emp_schema);

  /*** Transaction 5 ***/

  begin_xact(emp_schema);
  printf("\nupdate after commit:\n");
  P2_ITERATOR(all_emp)
  {
    printf("%d %d %s\n", all_emp.empno, all_emp.age, all_emp.name);
  }
  /* delete */
  P2_ITERATOR(old_emp)
  {
    delete(old_emp);
  }
  abort_xact(emp_schema);

  /*** Transaction 6 ***/

  begin_xact(emp_schema);
  printf("\ndelete after abort:\n");
  P2_ITERATOR(all_emp)
  {
    printf("%d %d %s\n", all_emp.empno, all_emp.age, all_emp.name);
  }
  P2_ITERATOR(old_emp)
  {
    delete(old_emp);
  }
  commit_xact(emp_schema);

  /*** Transaction 7 ***/

  begin_xact(emp_schema);
  printf("\ndelete after commit:\n");
  P2_ITERATOR(all_emp)
  {
    printf("%d %d %s\n", all_emp.empno, all_emp.age, all_emp.name);
  }
  commit_xact(emp_schema);

  close_cont(emp_schema.emp_cont);
  close_schema(emp_schema);

#if 0
  /* Delete xact manager. */
  P2_delete_xact_manager();
#endif

  /* Exit. */
  exit(0);
}
