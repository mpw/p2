/* $Id: xact-lock11.p2,v 45.0 1997/09/19 05:45:20 jthomas Exp $ */
/* Copyright (C) 1997, The University of Texas at Austin. */

/* Demonstrate incorrect transaction identifier bug. */
/* Test P2_lock-manager mode P2_LOCK_X times N with transactions. */
/* N = 10, begin_xact INside mutex. */

/* Analogous to paces/xact-lock03.p2 */

/*****************************************************************************/
/*                  Includes.                                                */
/*****************************************************************************/

#include "P2_paces.h"

#include <stdio.h>    /* fprintf() */

/*****************************************************************************/
/*                  Defines.                                                 */
/*****************************************************************************/

/* Print debugging output. */
#if 0
#if !defined(DEBUG)
#define DEBUG
#endif /* DEBUG */
#endif

/* Trace and label processes. */
#if 0
#if !defined(TRACE)
#define TRACE
#endif /* TRACE */
#endif

/* Transactions. */
#if 1
#if !defined(XACT)
#define XACT
#endif /* XACT */
#endif

/* Total number of children to fork() */
#define N 1

/* Mutex lock name. */
#define LOCK_NAME 11

/* Mutex lock timeout. */
#define LOCK_TIMEOUT 5

/* Mutex lock class (aka duration). */
#define LOCK_CLASS P2_LOCK_MEDIUM

/*****************************************************************************/
/*                  Declare typex and schema.                                */
/*****************************************************************************/

typex {
#if defined(TRACE)
  t = top2ds[P2_LOG_LAYER[
	xact[P2_PROTOCOL_LAYER[lock[trace[process[
	  avail[array[transient]]]]]]]]];
#else
  t = P2_XACT_TYPEX(P2_PROTOCOL_LAYER, P2_BOTTOM_LAYER);
#endif /* TRACE */
}

typedef struct {
  int i;
} E;

schema {
  container <E> k;
} stored_as t with {
  P2_BOTTOM_SCHEMA_ANNOTE(k, i, 1);
} s;

/*****************************************************************************/
/*                  Print errors.                                            */
/*****************************************************************************/

static void
parent_error (const char *s, int i)
{
  fprintf(stderr, "Parent");
  if (i == -1)
    fprintf(stderr, ": ");
  else
    fprintf(stderr, " i = %d: ", i);
  perror(s);
  exit(1);
}

static void
child_error (const char *s, int i)
{
  fprintf(stderr, "Child i = %d: ", i);
  perror(s);
}

/*****************************************************************************/
/*                  Main.                                                    */
/*****************************************************************************/

int i;

int
main()
{
  P2_PROCESS_ID child_pid[N];

#if defined(TRACE)
  /* Process label. */
  char label[P2_PROCESS_ID_LABEL_SIZE];
#endif /* LABEL */

  /* Open schema. */
  open_schema(s);

#if defined(TRACE)
  /* Label the parent process. */
  P2_label_process_id("Parent");
#endif /* TRACE */

  for (i = 0; i < N; i++)
  {
    /* Fork child. */
    child_pid[i] = P2_fork_process();
    if (child_pid[i] == -1)
    {
      /*** This is an error. ***/

      parent_error("P2_fork_process() failed", i);
    }
    else if (child_pid[i] == 0)
    {
      /*** This is the child. ***/

#if defined(TRACE)
      /* Label the child process. */
      sprintf(label, "child %d", i);
      P2_label_process_id(label);
#endif /* TRACE */

#if defined(TRACE)
      P2_trace("after fork, before lock");
      P2_print_lock_manager_state();
#endif /* TRACE */

      /* Lock mutex lock. */
      if (P2_lock(LOCK_NAME, P2_LOCK_X, LOCK_CLASS, LOCK_TIMEOUT) != P2_LOCK_OK)
        child_error("P2_lock(mutex) failed", i);

#if defined(XACT)
      /* Begin transaction. */
      begin_xact(s);
#endif /* XACT */

#if defined(TRACE)
      P2_trace("after begin_xact, before print \"Hello World\"");
      P2_print_lock_manager_state();
#endif /* TRACE */

      /* Print "Hello World" */
#if defined(DEBUG) || defined(TRACE)
      printf("%d. Hello World!\n", i);
#else
      printf("Hello World!\n");
#endif /* DEBUG */

      /* Flush stdout. */
      fflush(stdout);

#if defined(XACT)
      /* Commit transaction--will release all locks held by the transaction,
	 but since lock is acquired outside of the transaction, it will
	 not be released. */
      commit_xact(s);
#endif /* XACT */

#if defined(TRACE)
      P2_trace("after commit_xact, before unlock");
      P2_print_lock_manager_state();
#endif /* TRACE */

      /* Unlock mutex lock. */
      
      if (P2_unlock(LOCK_NAME) != P2_LOCK_OK)
	child_error("P2_unlock(mutex) failed", i);

#if defined(TRACE)
      P2_trace("after unlock, before print \"Goodbye World\"");
      P2_print_lock_manager_state();
#endif /* TRACE */

      /* Print "Goodbye World" */
#if defined(DEBUG) || defined(TRACE)
      printf("%d. Goodbye World!\n", i);
#else
      printf("Goodbye World!\n");
#endif /* DEBUG */

      /* Exit success. */
      exit(0);
    }
    else
    {
      /*** This is the parent. ***/
    }
  }

  /* Barrier: wait for all N children to exit. */
  for (i = 0; i < N; i++)
    if (P2_join_process(child_pid[i]) != 0)
      parent_error("P2_join_process() != 0", i);

#if defined(TRACE)
  P2_trace("after barrier, before lock");
  P2_print_lock_manager_state();
#endif /* TRACE */

  /* Lock mutex lock. */
  if (P2_lock(LOCK_NAME, P2_LOCK_X, LOCK_CLASS, LOCK_TIMEOUT) != P2_LOCK_OK)
    parent_error("P2_lock(mutex) failed", -1);

  /* Close schema. */
  close_schema(s);

  printf("Parent Exits\n");

  /* Exit. */
  exit(0);
}
