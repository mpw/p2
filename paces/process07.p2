/* $Id: process07.p2,v 45.0 1997/09/19 05:44:06 jthomas Exp $ */
/* Copyright (C) 1997, The University of Texas at Austin. */

/* Test semaphores. */

/* total = 1+1+1+...+1 = N */
/* This program uses either:
   (1) a non-NULL container base element (#define CONTAINER_ELEMENT), or
   (2) a single element stored in mmap_shared (#undef CONTAINER_ELEMENT) */
/* Limit the number of live children to M. */
/* Analogous to paces/process06.p2 (total = 0+1+2+...+99 = N*(N-1)/2) */

/*****************************************************************************/
/*                  Includes.                                                */
/*****************************************************************************/

#include "P2_paces.h"

#include <assert.h>   /* assert() */
#include <stdio.h>    /* printf() */
#include <unistd.h>   /* sleep() */

/*****************************************************************************/
/*                  Defines.                                                 */
/*****************************************************************************/

#define N 100 /* Total number of children to fork() */
#define M 20  /* Maxium number of live children */

/* Print debugging output. */
#if 0
#ifndef DEBUG
#define DEBUG
#endif /* DEBUG */
#endif

/* Use a non-NULL container base struct type
   (rather than a container element) to store the shared data. */
#if 1
#define CONTAINER_STRUCTURE
#endif

/*****************************************************************************/
/*                  Global Variables.                                        */
/*****************************************************************************/

typedef struct {
  int total;
  int live;
} DATA;

typex {
#if defined(CONTAINER_STRUCTURE)
  t = top2ds[container_structure[array[mmap_shared]]];
#else /* CONTAINER_STRUCTURE */
  t = top2ds[array[mmap_shared]];
#endif /* CONTAINER_STRUCTURE */
}

container <DATA> stored_as t with {
  array size is 1;
#if defined(CONTAINER_STRUCTURE)
  /* In general, the container base structure is NOT the same as the
     element data structure.  In this particular case, however, it is,
     because the data that would be stored in the single anchor
     element is instead stored in the container struct.
     This is elegant, but potentially confusing. (JAT) */
  container_structure "DATA";
#endif /* CONTAINER_STRUCTURE */
  mmap_shared file is "/tmp/P2_process07-data" with size N;
} cont;

#ifndef CONTAINER_STRUCTURE
cursor <cont> curs;
#endif /* CONTAINER_STRUCTURE */

P2_SEMAPHORE_ID live_semaphore;
P2_SEMAPHORE_ID total_semaphore;

/*****************************************************************************/
/*                  Atomic increment.                                        */
/*****************************************************************************/

/* These procedures increment the shared variables live and total by
   the given delta.  They return the new value of the variable.  They
   are used to read the value of the variable (without incrementing it)
   by passing a delta of zero. */

int
increment_live(int delta)
{
  int live;

  if (P2_lock_semaphore(&live_semaphore) < 0)
    perror("Can't lock live_semaphore");

#if defined(CONTAINER_STRUCTURE)
  live = cont.live;
  cont.live = live;
#else /* CONTAINER_STRUCTURE */
  live = ref(curs, live);
  upd(curs, live, live + delta);
#endif /* CONTAINER_STRUCTURE */

  if (delta != 0)
  {
    live += delta;
#if defined(CONTAINER_STRUCTURE)
    cont.live = live;
#else /* CONTAINER_STRUCTURE */
    upd(curs, live, live);
#endif /* CONTAINER_STRUCTURE */
  }

  if (P2_unlock_semaphore(&live_semaphore) < 0)
    perror("Can't unlock live_semaphore");

  return(live);
}

int
increment_total(int delta)
{
  int total;

  if (P2_lock_semaphore(&total_semaphore) < 0)
    perror("Can't lock total_semaphore");

#if defined(CONTAINER_STRUCTURE)
  total = cont.total;
  cont.total = total;
#else /* CONTAINER_STRUCTURE */
  total = ref(curs, total);
  upd(curs, total, total + delta);
#endif /* CONTAINER_STRUCTURE */

  if (delta != 0)
  {
#if defined(DEBUG)
    printf("%d + %d = %d\n", total, delta, total + delta);
#endif /* DEBUG */
    total += delta;
#if defined(CONTAINER_STRUCTURE)
    cont.total = total;
#else /* CONTAINER_STRUCTURE */
    upd(curs, total, total);
#endif /* CONTAINER_STRUCTURE */
  }

  if (P2_unlock_semaphore(&total_semaphore) < 0)
    perror("Can't unlock total_semaphore");

  return(total);
}

/*****************************************************************************/
/*                  Main.                                                    */
/*****************************************************************************/

int
main ()
{
  P2_PROCESS_ID child_pid[N];
#ifndef CONTAINER_STRUCTURE
  DATA data;
#endif /* CONTAINER_STRUCTURE */
  int i;

  /* Initialize process manager. */
  P2_init_process();

  /* Open the container. */
  open_cont(cont);

  /* Initialize total and live. */
#if defined(CONTAINER_STRUCTURE)
  cont.total = 0;
  cont.live = 0;
#else /* CONTAINER_STRUCTURE */
  init_curs(curs);
  data.total = 0;
  data.live = 0;
  insert(curs, data);
#endif /* CONTAINER_STRUCTURE */

  /* Initalize semaphores. */
  if (P2_init_semaphore(&live_semaphore, 1) < 0)
    perror("Can't initialize live_semaphore");
  if (P2_init_semaphore(&total_semaphore, 1) < 0)
    perror("Can't initialize total_semaphore");

  for (i = 0; i < N; i++)
  {
    while(increment_live(0) >= M)
    {
      P2_sleep_process(1);
    }

    increment_live(1);

    child_pid[i] = P2_fork_process();
    if (child_pid[i] == -1)
    {
      /*** This is an error. ***/

      fprintf(stderr, "i = %d: ", i);
      perror("Can't fork child");
      exit(1);
    }
    else if (child_pid[i] == 0)
    {
      /*** This is the child. ***/

      increment_total(1);
      increment_live(-1);
      exit(0);
    }
    else
    {
      /*** This is the parent. ***/

      /* Wait for child i-(M-1) to finish before forking child i.
	 That is, limit the number of live children to M. */
      if (i >= (M-1))
	if (P2_join_process(child_pid[i-(M-1)]) != 0)
	  perror("P2_join_process() != 0");
    }
  }

  /* Wait until all children have incremented total. */
  while(increment_total(0) < N)
    P2_sleep_process(1);

  /* Print total. */
  printf("total = %d\n", increment_total(0));

  /* Barrier: Wait for the last M children to finish. */
  for (i = N-(M-1); i < N; i++)
    if (P2_join_process(child_pid[i]) != 0)
      perror("P2_join_process() != 0");

  /* Delete semaphores. */
  if (P2_delete_semaphore(&total_semaphore) < 0)
    perror("Can't delete total_semaphore");
  if (P2_delete_semaphore(&live_semaphore) < 0)
    perror("Can't delete live_semaphore");

  /* close the container. */
  close_cont(cont);

  /* Delete process manager. */
  P2_delete_process();

  /* Exit. */

  exit(0);
}
