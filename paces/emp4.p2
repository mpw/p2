/* $Id: emp4.p2,v 45.0 1997/09/19 05:43:18 jthomas Exp $ */
/* Copyright (C) 1997, The University of Texas at Austin. */

#include <stdio.h>
#include "P2_paces.h"

#define EMP_FILE_NAME   "emp.data"
#define EMP_FILE_SIZE   1000

typedef struct {
	int	empno;
	int	age;
	char	dept_name[20];
	char	name[22];
} EMP_TYPE;

typex {
  t = top2ds[named_funcall[inbetween[qualify[orderby_fast[
	  hash[P2_DELFLAG_LAYER[array1[transient]]],
          top2ds[P2_DELFLAG_LAYER[array2[transient]]]]]]]];
}

container <EMP_TYPE> stored_as t with {
  array1 size is EMP_FILE_SIZE;
  array2 size is EMP_FILE_SIZE;
  hash key is name with size EMP_FILE_SIZE;
} emp_container;

cursor <emp_container> all_emp;

#define CDEF3(N,P,O) cursor <emp_container> where P orderby ascending O N
#define CDEF2(N,P) cursor <emp_container> where P N

CDEF3(curs_0001,"$.age == 35",empno);
CDEF3(curs_0002,"$.empno < 1000",age);
CDEF2(curs_0003,"($.empno==100||$.empno==102)");
CDEF3(curs_0004,"$.age == 35",name);
CDEF3(curs_0005,"$.empno < 104",empno);
CDEF2(curs_0006,"$.empno < 104");
CDEF3(curs_0007,"$.age == 35",empno);

/************************************************************************/
/*		Read Data						*/
/************************************************************************/

void read_data ( void )
{
  FILE     *emp_file;
  int      emp_count = 0;
  EMP_TYPE e;
  char     s[1000];
  char	   *p;

  emp_file = fopen( EMP_FILE_NAME, "r" );
  if (emp_file == NULL)
  {
     fprintf( stderr, "Could not open employee file %s.\n", EMP_FILE_NAME );
     exit( 1 );
  }

  if (fscanf( emp_file, "%s %s %s %s %s", &s, &s, &s, &s, &s ) != 5) {
    if (!feof(emp_file)) {
      fprintf( stderr, "Illegal employee file header format.\n" );
      exit( 1 );
    }
  }
  while (!feof(emp_file)) {
    emp_count++;
    if (emp_count > EMP_FILE_SIZE) {
      fprintf( stderr, "Employee file too large.\n" );
      exit( 1 );
    }
    if ((fscanf( emp_file, "%d,%d", &e.empno, &e.age ) != 2)
	|| (fgetc( emp_file ) != ',')
	|| (fgetc( emp_file ) != '"')) {
      if (feof(emp_file))
	break;
      else {
	fprintf( stderr, "Illegal employee file record format.\n" );
	exit( 1 );
      }
    }
    p = e.dept_name;
    while (1) {
      *p = fgetc( emp_file );
      if (*p == '"') {
	*p = '\0';
	break;
      }
      *p++;
    }
    if ((fgetc( emp_file ) != ',')
	|| (fgetc( emp_file ) != '"')) {
      if (feof(emp_file))
	break;
      else {
	fprintf( stderr, "Illegal employee file record format.\n" );
	exit( 1 );
      }
    }
    p = e.name;
    while (1) {
      *p = fgetc(emp_file);
      if (*p == '"') {
	*p = '\0';
	break;
      }
      *p++;
    }
    insert( all_emp, e );
  }
  fclose( emp_file );
  printf( "Employee records in data file: %d\n", emp_count );
}

#define eqstr(A,B) (!(strcmp(A,B)))
/***#define upd1(gc,fld,val) upd(gc,fld,val) ****/

void init_all_curs( void )
{
  init_curs(curs_0001);
  init_curs(curs_0002);
  init_curs(curs_0003);
  init_curs(curs_0004);
  init_curs(curs_0005);
  init_curs(curs_0006);
  init_curs(curs_0007);
  init_curs(all_emp);
}

int main( void )
{
  open_cont(emp_container);
  init_all_curs();
  read_data();
  
  puts("SQL: #");
  puts("SQL: # utility paces script#1");
  puts("SQL: #");
  puts("SQL: # retrieval test");
  puts("SQL: select * from employees where age = 35 order by empno");
  foreach(curs_0001) {
    printf("%d, %d, \"%s\", \"%s\"\n", curs_0001.empno, curs_0001.age,
      curs_0001.dept_name, curs_0001.name);
  }

  puts("SQL: # insertion test");
  puts("SQL: insert into employees : 100, 8, \"Biology\", \"Surrogate, John\"");
  {
    EMP_TYPE e = { 100, 8, "Biology", "Surrogate, John" };
    insert(all_emp, e); 
  }

  puts("SQL: insert into employees : 102, 9, \"Biology\", \"Surrogate, Mary\"");
  {
    EMP_TYPE e = { 102, 9, "Biology", "Surrogate, Mary" };
    insert(all_emp, e); 
  }

  puts("SQL: select * from employees where empno < 1000 order by age");
  foreach(curs_0002)
  {
    printf("%d,%d, \"%s\", \"%s\"\n", curs_0002.empno, curs_0002.age,
      curs_0002.dept_name, curs_0002.name);
  }

  puts("SQL: # update test");
  puts("SQL: update employees set age = 35 where empno = 100 or empno = 102");
  foreach(curs_0003)
  {
    if (curs_0003.age != 35) {
      upd(curs_0003, age, 35);
    } 
  }

  puts("SQL: select name, age from employees where age = 35 order by name");
  foreach(curs_0004)
  {
    printf("\"%s\", %d\n", curs_0004.name, curs_0004.age);
  }

  puts("SQL: # deletion test");
  puts("SQL: select * from employees where empno < 104 order by empno");
  foreach(curs_0005)
  {
    printf( "%d, %d, \"%s\", \"%s\"\n", curs_0005.empno, curs_0005.age,
      curs_0005.dept_name, curs_0005.name );
  }

  puts("SQL: delete employees where empno < 104");
  foreach(curs_0006)
  {
    delete(curs_0006); 
  }

  puts("SQL: select * from employees where age = 35 order by empno");
  foreach(curs_0007)
  {
    printf( "%d, %d, \"%s\", \"%s\"\n", curs_0007.empno, curs_0007.age,
      curs_0007.dept_name, curs_0007.name );
  }

  puts("SQL: commit");
  puts("SQL: #");
  puts("SQL: exit");

  close_cont( emp_container );
  exit( 0 );
}

