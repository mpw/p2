/* $Id: waltz-bug4.p2,v 45.0 1997/09/19 05:44:48 jthomas Exp $ */

/************************************
           /v/ahhnold/v3/jthomas/p2/src/rl/waltz-rl.ops.p2
************************************/

/************************************
  options selected: active_rule malloc pred_indx string_optimization shadow_optimization 
************************************/

#define DEBUG                 0
#define STRING_OPTIMIZATION   1
#define SHADOW_OPTIMIZATION   1
#define NEGATION_OPTIMIZATION 0

int dom_timestamp;

/*****************  valid defines ****************/

#define ta " $a._ts <= dom_timestamp "
#define tb " $b._ts <= dom_timestamp "
#define tc " $c._ts <= dom_timestamp "
#define td " $d._ts <= dom_timestamp "
#define te " $e._ts <= dom_timestamp "
#define tf " $f._ts <= dom_timestamp "


#define va " (!is_deleted($a)) "
#define vb " (!is_deleted($b)) "
#define vc " (!is_deleted($c)) "
#define vd " (!is_deleted($d)) "
#define ve " (!is_deleted($e)) "
#define vf " (!is_deleted($f)) "


#define and " && "

#define t2_a and tb
#define t2_b and ta
#define t3_a and tb and tc
#define t3_b and ta and tc
#define t3_c and ta and tb
#define t4_a and tb and tc and td
#define t4_b and ta and tc and td
#define t4_c and ta and tb and td
#define t4_d and ta and tb and tc
#define t5_a and tb and tc and td and te
#define t5_b and ta and tc and td and te
#define t5_c and ta and tb and td and te
#define t5_d and ta and tb and tc and te
#define t5_e and ta and tb and tc and td
#define t6_a and tb and tc and td and te and tf
#define t6_b and ta and tc and td and te and tf
#define t6_c and ta and tb and td and te and tf
#define t6_d and ta and tb and tc and te and tf
#define t6_e and ta and tb and tc and td and tf
#define t6_f and ta and tb and tc and td and te


#define v2_a vb
#define v2_b va
#define v3_a vb and vc
#define v3_b va and vc
#define v3_c va and vb
#define v4_a vb and vc and vd
#define v4_b va and vc and vd
#define v4_c va and vb and vd
#define v4_d va and vb and vc
#define v5_a vb and vc and vd and ve
#define v5_b va and vc and vd and ve
#define v5_c va and vb and vd and ve
#define v5_d va and vb and vc and ve
#define v5_e va and vb and vc and vd
#define v6_a vb and vc and vd and ve and vf
#define v6_b va and vc and vd and ve and vf
#define v6_c va and vb and vd and ve and vf
#define v6_d va and vb and vc and ve and vf
#define v6_e va and vb and vc and vd and vf
#define v6_f va and vb and vc and vd and ve



/************ generated record types ***************/


typedef struct {
   int value;
   int     _ts;
} stage;

typedef struct {
   int     p1;
   int     p2;
   int     _ts;
} line;

typedef struct {
   int     p1;
   int     p2;
   int joined;
   int label;
   int plotted;
   int     _ts;
} edge;

typedef struct {
   int     p1;
   int     p2;
   int     p3;
   int     base_point;
   int type;
   int     _ts;
} junction;



/****************** symbol table ***********/


int _nil;
int _start;
int _duplicate;
int _false;
int _detect_junctions;
int _make_3_junction;
int _true;
int _L;
int _find_initial_boundary;
int _B;
int _find_second_boundary;
int _arrow;
int _PL;
int _labeling;
int _M;
int _t;
int _label;
int _tee;
int _fork;
int _plot_remaining_edges;
int _done;



/************ generated container declarations ***************/

typex { leaps_x = top2ds_qualify[
                  lpredindx[llist[
                  delflag[malloc[transient_fast]]]]]; }

container < stage > stored_as leaps_x with {
   lpredindx timestamp is _ts predicate " $.value == _start " with activate1 with deactivate1;
   lpredindx timestamp is _ts predicate " $.value == _duplicate " with activate2 with deactivate2;
   lpredindx timestamp is _ts predicate " $.value == _detect_junctions " with activate3 with deactivate3;
   lpredindx timestamp is _ts predicate " $.value == _find_initial_boundary " with activate4 with deactivate4;
   lpredindx timestamp is _ts predicate " $.value == _find_second_boundary " with activate5 with deactivate5;
   lpredindx timestamp is _ts predicate " $.value == _labeling " with activate6 with deactivate6;
   lpredindx timestamp is _ts predicate " $.value == _plot_remaining_edges " with activate7 with deactivate7;
   lpredindx timestamp is _ts predicate " $.value == _done " with activate8 with deactivate8;
   llist timestamp is _ts;
}  cont_stage;

container < line > stored_as leaps_x with {
   llist timestamp is _ts;
}  cont_line;

container < line > stored_as leaps_x with {
   llist timestamp is _ts;
}  shadow_line;

container < edge > stored_as leaps_x with {
   lpredindx timestamp is _ts predicate " $.joined == _false " with activate9 with deactivate9;
   lpredindx timestamp is _ts predicate " $.label == _nil " with activate10 with deactivate10;
   lpredindx timestamp is _ts predicate " $.label == _PL " with activate11 with deactivate11;
   lpredindx timestamp is _ts predicate " $.label == _B " with activate12 with deactivate12;
   lpredindx timestamp is _ts predicate " $.label == _M " with activate13 with deactivate13;
   lpredindx timestamp is _ts predicate " $.plotted == _nil && $.label != _nil " with activate14 with deactivate14;
   lpredindx timestamp is _ts predicate " $.plotted == _nil && $.label == _nil " with activate15 with deactivate15;
   llist timestamp is _ts;
}  cont_edge;

container < edge > stored_as leaps_x with {
   lpredindx timestamp is _ts predicate " $.joined == _false " with null with null;
   lpredindx timestamp is _ts predicate " $.plotted == _nil " with null with null;
   llist timestamp is _ts;
}  shadow_edge;

container < junction > stored_as leaps_x with {
   lpredindx timestamp is _ts predicate " $.type == _L " with activate16 with deactivate16;
   lpredindx timestamp is _ts predicate " $.type == _arrow " with activate17 with deactivate17;
   lpredindx timestamp is _ts predicate " $.type == _tee " with activate18 with deactivate18;
   lpredindx timestamp is _ts predicate " $.type == _fork " with activate19 with deactivate19;
   llist timestamp is _ts;
}  cont_junction;

container < junction > stored_as leaps_x with {
   llist timestamp is _ts;
}  shadow_junction;

/************** generated container numbers *******************/

#define stage_num  1
#define line_num  2
#define shadow_line_num  3
#define edge_num  4
#define shadow_edge_num  5
#define junction_num  6
#define shadow_junction_num  7



/************ utility cursor decls ***************/

typedef cursor <cont_stage> stage_cursor;
typedef cursor <cont_line> line_cursor;
typedef cursor <shadow_line> shadow_line_cursor;
typedef cursor <cont_edge> edge_cursor;
typedef cursor <shadow_edge> shadow_edge_cursor;
typedef cursor <cont_junction> junction_cursor;
typedef cursor <shadow_junction> shadow_junction_cursor;


stage_cursor   a_stage;

line_cursor   a_line;

shadow_line_cursor   a_shadow_line;

edge_cursor   a_edge;

shadow_edge_cursor   a_shadow_edge;

junction_cursor   a_junction;

shadow_junction_cursor   a_shadow_junction;



/**************************** rule #23: label_arrow-3A :
   (stage ^value  labeling  )
   (junction ^type  arrow ^base_point  <bp> ^p1  <p1> ^p2  <p2> ^p3  <p3>  )
   (edge ^p1  <bp> ^p2  <p1> ^label  PL  )
   (edge ^p1  <bp> ^p2  <p2> ^label  nil  )
   (edge ^p1  <bp> ^p2  <p3>  )
    -->  *******************************/

int p3_23;
int p2_23;
int p1_23;
int bp_23;

#define query_23 where " $a.value == _labeling && $b.type == _arrow \
        && $c.p1 == $b.base_point && $c.p2 == $b.p1 && $c.label == _PL \
        && $d.p1 == $b.base_point && $d.p2 == $b.p2 && $d.label == _nil \
        && $e.p1 == $b.base_point && $e.p2 == $b.p3 "

#define negated_23 ""

typedef compcurs < a cont_stage, b cont_junction, c cont_edge, d cont_edge, e cont_edge >
   given < e >
   query_23 t5_e
   valid v5_e 
   curs23_e;

curs23_e k;

int main()
{
  if (0) {
    foreachk(k) {
    }
  }
  return 0;
}

