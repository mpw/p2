/* $Id: apsteph1.p2,v 45.0 1997/09/19 05:42:46 jthomas Exp $ */ 

/* Regression test for unbound composite cursor references in BOUNDS */

/*

I'm working on my term project (reimplementing LEAPS, fun, fun!) and I've
run across a pretty serious bug in composite cursors in P2 (at least for
the type expression I've used).

P2 doesn't expand the cursor variable "$a" when joining containers.
For example, a where clause of:

   where "$a.attr_num == $b.attr_no"

leaves the string "$a.attr_num" in the ".c" file that gets produced.

Alan Stephens (apsteph@cs.utexas.edu)

*/

/*

The problem was that we weren't binding the composite cursor
references in upper and lower bounds strings.  I fixed this by adding
some calls to replace_cursor_refs() in define_bounds(). (JAT)

*/

#define SYM_LEN		40	/* Length of character fields */

/* container declaration "header" information */
typedef struct {
   int	number;			/* container number */
   char	name[SYM_LEN];		/* name of the container being declared */
   int	num_attrs;		/* number of fields in the container */
} CONT_HEADER;

/* container declaration attribute information */
typedef struct {
   int	number;			/* container number */
   int	attr_no;		/* ordering index */
   char	name[SYM_LEN];		/* attribute name */
   char	type[10];		/* field type (integer or string) */
   int	length;			/* field length (for strings) */
} CONT_BODY;

/* container variable symbol table */
typedef struct {
   int	var_id;			/* unique symbol identifier */
   char	name[SYM_LEN];		/* variable name */
   int	rule_num;		/* rule number */
   int	rel_num;		/* container number to which it's bound */
   int	attr_num;		/* attribute number of the container */
} S_TAB;

typex {
   cont = top2ds_qualify[inbetween[odlist[malloc[transient]]]];
}

container <CONT_HEADER> stored_as cont with {
   odlist key is number;
} relation_header;

container <CONT_BODY> stored_as cont with {
   odlist key is attr_no;
} relation_attrs;

container <S_TAB> stored_as cont with {
   odlist key is var_id;
} sym_tab;

/* lookup container & attribute, given a symbol table entry */
compcurs < a sym_tab, b relation_attrs, c relation_header >
  where "$a.var_id == var_id"
        " && $a.attr_num == $b.attr_no"
        " && $a.rel_num == $c.number"
cc_vars;

/* initialize containers & cursors */
void init_containers(void)
{
   open_cont(relation_header);
   open_cont(relation_attrs);
   open_cont(sym_tab);
   initk(cc_vars);
}

int
main(void)
{
   int var_id = 1;

   init_containers();
   foreachk(cc_vars) {
      printf("%s.%s\n", cc_vars.c.name, cc_vars.b.name);
   }
   return(0);
}
