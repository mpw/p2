/* $Id: waltzdb-hlist.p2,v 45.0 1997/09/19 05:45:00 jthomas Exp $ */

/************************************
           waltzdb.p2
************************************/

/************************************
  options selected: active_rule malloc pred_indx string_optimization shadow_optimization 
************************************/

#define DEBUG                 0
#define STRING_OPTIMIZATION   1
#define SHADOW_OPTIMIZATION   1
#define NEGATION_OPTIMIZATION 0

#include <stdlib.h>
#include "leaps.h"
#include "fastmalloc.h"

#define nbuckets              40
/* hlist timestamp is _ts key is xxx with size nbuckets; */
#define HLIST_OPTIMIZATION    1

/**************** generated #defines *******************/

#define bind( curstype, kdcurs, active_rule, skiprule, alist) \
   curstype *c; \
   if (active_rule) { \
      if (!fresh) { P2_PUTSPACE(alist,top.curs); } \
      fresh = TRUE; top.current_rule = skiprule; \
      skiprule(); return; \
      } \
   if (fresh) { \
      c = (curstype*) P2_GETSPACE(alist,curstype); \
      top.curs = (void*) c;\
      initk(*c); \
      pos(kdcurs,top.cursor_position); \
   } else {  \
      c = (curstype *) top.curs; \
      goto cnt; \
   } \
   foreachk(*c) {

#define next_rule( nextrule, alist ) \
      return; \
cnt: ; \
   } \
   P2_PUTSPACE(alist, c); \
   fresh = TRUE; top.current_rule = nextrule; \
   nextrule(); return;



/*****************  valid defines ****************/

#define ta " $a._ts <= dom_timestamp "
#define tb " $b._ts <= dom_timestamp "
#define tc " $c._ts <= dom_timestamp "
#define td " $d._ts <= dom_timestamp "
#define te " $e._ts <= dom_timestamp "
#define tf " $f._ts <= dom_timestamp "
#define tg " $g._ts <= dom_timestamp "


#define va " (!is_deleted($a)) "
#define vb " (!is_deleted($b)) "
#define vc " (!is_deleted($c)) "
#define vd " (!is_deleted($d)) "
#define ve " (!is_deleted($e)) "
#define vf " (!is_deleted($f)) "
#define vg " (!is_deleted($g)) "


#define and " && "

#define t2_a and tb
#define t2_b and ta
#define t3_a and tb and tc
#define t3_b and ta and tc
#define t3_c and ta and tb
#define t4_a and tb and tc and td
#define t4_b and ta and tc and td
#define t4_c and ta and tb and td
#define t4_d and ta and tb and tc
#define t5_a and tb and tc and td and te
#define t5_b and ta and tc and td and te
#define t5_c and ta and tb and td and te
#define t5_d and ta and tb and tc and te
#define t5_e and ta and tb and tc and td
#define t6_a and tb and tc and td and te and tf
#define t6_b and ta and tc and td and te and tf
#define t6_c and ta and tb and td and te and tf
#define t6_d and ta and tb and tc and te and tf
#define t6_e and ta and tb and tc and td and tf
#define t6_f and ta and tb and tc and td and te
#define t7_a and tb and tc and td and te and tf and tg
#define t7_b and ta and tc and td and te and tf and tg
#define t7_c and ta and tb and td and te and tf and tg
#define t7_d and ta and tb and tc and te and tf and tg
#define t7_e and ta and tb and tc and td and tf and tg
#define t7_f and ta and tb and tc and td and te and tg
#define t7_g and ta and tb and tc and td and te and tf


#define v2_a vb
#define v2_b va
#define v3_a vb and vc
#define v3_b va and vc
#define v3_c va and vb
#define v4_a vb and vc and vd
#define v4_b va and vc and vd
#define v4_c va and vb and vd
#define v4_d va and vb and vc
#define v5_a vb and vc and vd and ve
#define v5_b va and vc and vd and ve
#define v5_c va and vb and vd and ve
#define v5_d va and vb and vc and ve
#define v5_e va and vb and vc and vd
#define v6_a vb and vc and vd and ve and vf
#define v6_b va and vc and vd and ve and vf
#define v6_c va and vb and vd and ve and vf
#define v6_d va and vb and vc and ve and vf
#define v6_e va and vb and vc and vd and vf
#define v6_f va and vb and vc and vd and ve
#define v7_a vb and vc and vd and ve and vf and vg
#define v7_b va and vc and vd and ve and vf and vg
#define v7_c va and vb and vd and ve and vf and vg
#define v7_d va and vb and vc and ve and vf and vg
#define v7_e va and vb and vc and vd and vf and vg
#define v7_f va and vb and vc and vd and ve and vg
#define v7_g va and vb and vc and vd and ve and vf



/************* generated forward references ***************/

VOID_FUNC    i1_a, i1_b,
             i2_a, i2_b,
             i3_a, i3_b, i3_c, i3_d,
             i4_a, i4_b, i4_c, i4_d,
             i5_a, i5_b,
             i6_a, i6_b, i6_c, i6_d, i6_e,
             i7_a, i7_b, i7_c, i7_d, i7_e, i7_f,
             i8_a, i8_b, i8_c, i8_d, i8_e,
             i9_a, i9_b, i9_c, i9_d, i9_e, i9_f,
             i10_a, i10_b,
             i11_a, i11_b, i11_c, i11_d, i11_e, i11_f, i11_g,
             i12_a, i12_b, i12_c, i12_d, i12_e, i12_f, i12_g,
             i13_a, i13_b, i13_c, i13_d, i13_e, i13_f, i13_g,
             i14_a, i14_b, i14_c, i14_d, i14_e, i14_f, i14_g,
             i15_a, i15_b, i15_c, i15_d, i15_e, i15_f, i15_g,
             i16_a, i16_b, i16_c, i16_d, i16_e, i16_f, i16_g,
             i17_a, i17_b, i17_c, i17_d, i17_e, i17_f, i17_g,
             i18_a, i18_b, i18_c, i18_d, i18_e, i18_f, i18_g,
             i19_a, i19_b,
             i20_a, i20_b, i20_c, i20_d, i20_e, i20_f,
             i21_a, i21_b, i21_c, i21_d, i21_e, i21_f,
             i22_a, i22_b, i22_c, i22_d, i22_e, i22_f,
             i23_a, i23_b, i23_c, i23_d, i23_e, i23_f,
             i24_a, i24_b,
             i25_a, i25_b, i25_c, i25_d,
             i26_a, i26_b,
             i27_a,
             i28_a, i28_b, i28_c, i28_d, i28_e,
             i29_a, i29_b, i29_c, i29_d, i29_e, i29_f,
             i30_a, i30_b, i30_c, i30_d, i30_e,
             i31_a, i31_b,
             i32_a,
             i33_a,
             i34_a, i34_b,
             i35_a, i35_b,
             i36_a, i36_b,
             i37_a, i37_b,
             i38_a, i38_b;



/************ generated record types ***************/


typedef struct {
   int value;
   int     _ts;
} stage;

typedef struct {
   int     p1;
   int     p2;
   int     _ts;
} line;

typedef struct {
   int type;
   int     p1;
   int     p2;
   int joined;
   int     _ts;
} edge;

typedef struct {
   int     p1;
   int     p2;
   int l_name;
   int     l_id;
   int     _ts;
} edge_label;

typedef struct {
   int     p1;
   int     p2;
   int     p3;
   int     base_point;
   int type;
   int name;
   int visited;
   int     _ts;
} junction;

typedef struct {
   int     id;
   int type;
   int name;
   int n1;
   int n2;
   int n3;
   int     _ts;
} label;

typedef struct {
   int     bp;
   int     l_id;
   int     _ts;
} illegal;



/****************** symbol table ***********/


typedef char string[30];

typedef struct {
   string  name;
} SYMBOL;

string  *word;

container < SYMBOL > stored_as symbol_x with {
   bintree key is name;
} symbol_table;

cursor <symbol_table> where "$.name == *word" sym;

int _arrow;
int _tee;
int _fork;
int _nil;
int _duplicate;
int _false;
int _detect_junctions;
int _threej;
int _make_3_junction;
int _no;
int _true;
int _twoj;
int _L;
int _find_initial_boundary;
int _yes;
int _B;
int _find_second_boundary;
int _PL;
int _labeling;
int _visiting_threej;
int _now;
int _n1;
int _n2;
int _n3;
int _visiting_twoj;
int _marking;
int _check;
int _checking;
int _remove_label;
int _printing;


int add_symbol( char *n )
{
SYMBOL s;

   strcpy(s.name,n);
   insert(sym,s);
   return (int) sym.name;
}

int add_unique_symbol( char *n )
{
   word = (string *) n;
   foreach(sym) { return (int) sym.name; };
   return add_symbol( n );
}

void init_symbol_table ( void )
{
   open_cont( symbol_table );
   init_curs( sym );
   _arrow = add_symbol("arrow");
   _tee = add_symbol("tee");
   _fork = add_symbol("fork");
   _nil = add_symbol("nil");
   _duplicate = add_symbol("duplicate");
   _false = add_symbol("false");
   _detect_junctions = add_symbol("detect_junctions");
   _threej = add_symbol("threej");
   _make_3_junction = add_symbol("make_3_junction");
   _no = add_symbol("no");
   _true = add_symbol("true");
   _twoj = add_symbol("twoj");
   _L = add_symbol("L");
   _find_initial_boundary = add_symbol("find_initial_boundary");
   _yes = add_symbol("yes");
   _B = add_symbol("B");
   _find_second_boundary = add_symbol("find_second_boundary");
   _PL = add_symbol("PL");
   _labeling = add_symbol("labeling");
   _visiting_threej = add_symbol("visiting_threej");
   _now = add_symbol("now");
   _n1 = add_symbol("n1");
   _n2 = add_symbol("n2");
   _n3 = add_symbol("n3");
   _visiting_twoj = add_symbol("visiting_twoj");
   _marking = add_symbol("marking");
   _check = add_symbol("check");
   _checking = add_symbol("checking");
   _remove_label = add_symbol("remove_label");
   _printing = add_symbol("printing");
}



/************ generated container declarations ***************/

#if HLIST_OPTIMIZATION
typex { leaps_x = top2ds_qualify[
                  hlist[lpredindx[llist[
                  delflag[malloc[transient_fast]]]]]]; }
#else
typex { leaps_x = top2ds_qualify[
                  lpredindx[llist[
                  delflag[malloc[transient_fast]]]]]; }
#endif /* HLIST_OPTIMIZATION */

container < stage > stored_as leaps_x with {
   lpredindx timestamp is _ts predicate " $.value == _duplicate " with activate1 with deactivate1;
   lpredindx timestamp is _ts predicate " $.value == _detect_junctions " with activate2 with deactivate2;
   lpredindx timestamp is _ts predicate " $.value == _find_initial_boundary " with activate3 with deactivate3;
   lpredindx timestamp is _ts predicate " $.value == _find_second_boundary " with activate4 with deactivate4;
   lpredindx timestamp is _ts predicate " $.value == _labeling " with activate5 with deactivate5;
   lpredindx timestamp is _ts predicate " $.value == _visiting_threej " with activate6 with deactivate6;
   lpredindx timestamp is _ts predicate " $.value == _visiting_twoj " with activate7 with deactivate7;
   lpredindx timestamp is _ts predicate " $.value == _marking " with activate8 with deactivate8;
   lpredindx timestamp is _ts predicate " $.value == _checking " with activate9 with deactivate9;
   lpredindx timestamp is _ts predicate " $.value == _remove_label " with activate10 with deactivate10;
   lpredindx timestamp is _ts predicate " $.value == _printing " with activate11 with deactivate11;
   llist timestamp is _ts;
}  cont_stage;

container < line > stored_as leaps_x with {
   llist timestamp is _ts;
}  cont_line;

container < line > stored_as leaps_x with {
   llist timestamp is _ts;
}  shadow_line;

container < edge > stored_as leaps_x with {
   lpredindx timestamp is _ts predicate " $.joined == _false " with activate12 with deactivate12;
   llist timestamp is _ts;
#if HLIST_OPTIMIZATION
   hlist timestamp is _ts key is p1 with size nbuckets; /* initial_boundary_junction_L */
   hlist timestamp is _ts key is p2 with size nbuckets; /* initial_boundary_junction_L */
#endif /* HLIST_OPTIMIZATION */
}  cont_edge;

container < edge > stored_as leaps_x with {
   lpredindx timestamp is _ts predicate " $.joined == _false " with null with null;
   llist timestamp is _ts;
#if HLIST_OPTIMIZATION
   hlist timestamp is _ts key is p1 with size nbuckets; /* make_L */
#endif /* HLIST_OPTIMIZATION */
}  shadow_edge;

container < edge_label > stored_as leaps_x with {
   llist timestamp is _ts;
#if HLIST_OPTIMIZATION
   hlist timestamp is _ts key is p1 with size nbuckets; /* visit_threej_0 */
   hlist timestamp is _ts key is p2 with size nbuckets; /* visit_threej_0 */
   hlist timestamp is _ts key is l_name with size nbuckets; /* remove_label_threej */
   hlist timestamp is _ts key is l_id with size nbuckets; /* visit_threej_0 */
#endif /* HLIST_OPTIMIZATION */
}  cont_edge_label;

container < edge_label > stored_as leaps_x with {
   llist timestamp is _ts;
#if HLIST_OPTIMIZATION
   hlist timestamp is _ts key is p1 with size nbuckets; /* visit_threej_0 */
   hlist timestamp is _ts key is p2 with size nbuckets; /* visit_threej_1 */
   hlist timestamp is _ts key is l_name with size nbuckets; /* checking */
   hlist timestamp is _ts key is l_id with size nbuckets; /* visit_threej_0 */
#endif /* HLIST_OPTIMIZATION */
}  shadow_edge_label;

container < junction > stored_as leaps_x with {
   lpredindx timestamp is _ts predicate " $.type == _twoj " with activate13 with deactivate13;
   lpredindx timestamp is _ts predicate " $.type == _threej && $.name == _arrow " with activate14 with deactivate14;
   lpredindx timestamp is _ts predicate " $.type == _threej && $.visited == _no " with activate15 with deactivate15;
   lpredindx timestamp is _ts predicate " $.visited == _now " with activate16 with deactivate16;
   lpredindx timestamp is _ts predicate " $.type == _twoj && $.visited == _no " with activate17 with deactivate17;
   lpredindx timestamp is _ts predicate " $.visited == _yes " with activate18 with deactivate18;
   lpredindx timestamp is _ts predicate " $.visited == _check " with activate19 with deactivate19;
   lpredindx timestamp is _ts predicate " $.type == _threej " with activate20 with deactivate20;
   llist timestamp is _ts;
#if HLIST_OPTIMIZATION
   hlist timestamp is _ts key is base_point with size nbuckets; /* remove_label_threej */
#endif /* HLIST_OPTIMIZATION */
}  cont_junction;

container < junction > stored_as leaps_x with {
   llist timestamp is _ts;
}  shadow_junction;

container < label > stored_as leaps_x with {
   llist timestamp is _ts;
#if HLIST_OPTIMIZATION
   hlist timestamp is _ts key is name with size nbuckets; /* visit_threej_0 */
#endif /* HLIST_OPTIMIZATION */
}  cont_label;

container < illegal > stored_as leaps_x with {
   llist timestamp is _ts;
}  cont_illegal;

/************** generated container numbers *******************/

#define stage_num  1
#define line_num  2
#define shadow_line_num  3
#define edge_num  4
#define shadow_edge_num  5
#define edge_label_num  6
#define shadow_edge_label_num  7
#define junction_num  8
#define shadow_junction_num  9
#define label_num  10
#define illegal_num  11

/***************** external files *********************/

#include "make_3_j.c"
/************ active rule variables, procs **************/

int active_rule1 = 1;
int active_rule2 = 1;
int active_rule3 = 2;
int active_rule4 = 2;
int active_rule5 = 1;
int active_rule6 = 2;
int active_rule7 = 2;
int active_rule8 = 2;
int active_rule9 = 2;
int active_rule10 = 2;
int active_rule11 = 2;
int active_rule12 = 2;
int active_rule13 = 2;
int active_rule14 = 2;
int active_rule15 = 2;
int active_rule16 = 2;
int active_rule17 = 2;
int active_rule18 = 2;
int active_rule19 = 2;
int active_rule20 = 2;
int active_rule21 = 2;
int active_rule22 = 2;
int active_rule23 = 2;
int active_rule24 = 1;
int active_rule25 = 3;
int active_rule26 = 2;
int active_rule27 = 1;
int active_rule28 = 3;
int active_rule29 = 2;
int active_rule30 = 2;
int active_rule31 = 2;
int active_rule32 = 1;
int active_rule33 = 1;
int active_rule34 = 1;
int active_rule35 = 1;
int active_rule36 = 1;
int active_rule37 = 1;
int active_rule38 = 1;

/********* container stage: predicate:  $.value == _duplicate  **************/

void activate1( void )
{
   active_rule1++;
   active_rule2++;
}

void deactivate1( void )
{
   active_rule1--;
   active_rule2--;
}


/********* container stage: predicate:  $.value == _detect_junctions  **************/

void activate2( void )
{
   active_rule3++;
   active_rule4++;
   active_rule5++;
}

void deactivate2( void )
{
   active_rule3--;
   active_rule4--;
   active_rule5--;
}


/********* container stage: predicate:  $.value == _find_initial_boundary  **************/

void activate3( void )
{
   active_rule6++;
   active_rule7++;
}

void deactivate3( void )
{
   active_rule6--;
   active_rule7--;
}


/********* container stage: predicate:  $.value == _find_second_boundary  **************/

void activate4( void )
{
   active_rule8++;
   active_rule9++;
}

void deactivate4( void )
{
   active_rule8--;
   active_rule9--;
}


/********* container stage: predicate:  $.value == _labeling  **************/

void activate5( void )
{
   active_rule10++;
   active_rule19++;
   active_rule33++;
}

void deactivate5( void )
{
   active_rule10--;
   active_rule19--;
   active_rule33--;
}


/********* container stage: predicate:  $.value == _visiting_threej  **************/

void activate6( void )
{
   active_rule11++;
   active_rule12++;
   active_rule13++;
   active_rule14++;
   active_rule15++;
   active_rule16++;
   active_rule17++;
   active_rule18++;
}

void deactivate6( void )
{
   active_rule11--;
   active_rule12--;
   active_rule13--;
   active_rule14--;
   active_rule15--;
   active_rule16--;
   active_rule17--;
   active_rule18--;
}


/********* container stage: predicate:  $.value == _visiting_twoj  **************/

void activate7( void )
{
   active_rule20++;
   active_rule21++;
   active_rule22++;
   active_rule23++;
}

void deactivate7( void )
{
   active_rule20--;
   active_rule21--;
   active_rule22--;
   active_rule23--;
}


/********* container stage: predicate:  $.value == _marking  **************/

void activate8( void )
{
   active_rule25++;
   active_rule26++;
   active_rule27++;
}

void deactivate8( void )
{
   active_rule25--;
   active_rule26--;
   active_rule27--;
}


/********* container stage: predicate:  $.value == _checking  **************/

void activate9( void )
{
   active_rule28++;
   active_rule31++;
   active_rule32++;
}

void deactivate9( void )
{
   active_rule28--;
   active_rule31--;
   active_rule32--;
}


/********* container stage: predicate:  $.value == _remove_label  **************/

void activate10( void )
{
   active_rule29++;
   active_rule30++;
}

void deactivate10( void )
{
   active_rule29--;
   active_rule30--;
}


/********* container stage: predicate:  $.value == _printing  **************/

void activate11( void )
{
   active_rule34++;
   active_rule35++;
   active_rule36++;
   active_rule37++;
   active_rule38++;
}

void deactivate11( void )
{
   active_rule34--;
   active_rule35--;
   active_rule36--;
   active_rule37--;
   active_rule38--;
}


/********* container edge: predicate:  $.joined == _false  **************/

void activate12( void )
{
   active_rule3++;
   active_rule4++;
}

void deactivate12( void )
{
   active_rule3--;
   active_rule4--;
}


/********* container junction: predicate:  $.type == _twoj  **************/

void activate13( void )
{
   active_rule6++;
   active_rule8++;
   active_rule30++;
}

void deactivate13( void )
{
   active_rule6--;
   active_rule8--;
   active_rule30--;
}


/********* container junction: predicate:  $.type == _threej && $.name == _arrow  **************/

void activate14( void )
{
   active_rule7++;
   active_rule9++;
}

void deactivate14( void )
{
   active_rule7--;
   active_rule9--;
}


/********* container junction: predicate:  $.type == _threej && $.visited == _no  **************/

void activate15( void )
{
   active_rule10++;
}

void deactivate15( void )
{
   active_rule10--;
}


/********* container junction: predicate:  $.visited == _now  **************/

void activate16( void )
{
   active_rule11++;
   active_rule12++;
   active_rule13++;
   active_rule14++;
   active_rule15++;
   active_rule16++;
   active_rule17++;
   active_rule18++;
   active_rule20++;
   active_rule21++;
   active_rule22++;
   active_rule23++;
   active_rule24++;
   active_rule25++;
   active_rule26++;
}

void deactivate16( void )
{
   active_rule11--;
   active_rule12--;
   active_rule13--;
   active_rule14--;
   active_rule15--;
   active_rule16--;
   active_rule17--;
   active_rule18--;
   active_rule20--;
   active_rule21--;
   active_rule22--;
   active_rule23--;
   active_rule24--;
   active_rule25--;
   active_rule26--;
}


/********* container junction: predicate:  $.type == _twoj && $.visited == _no  **************/

void activate17( void )
{
   active_rule19++;
}

void deactivate17( void )
{
   active_rule19--;
}


/********* container junction: predicate:  $.visited == _yes  **************/

void activate18( void )
{
   active_rule25++;
   active_rule28++;
}

void deactivate18( void )
{
   active_rule25--;
   active_rule28--;
}


/********* container junction: predicate:  $.visited == _check  **************/

void activate19( void )
{
   active_rule28++;
   active_rule31++;
}

void deactivate19( void )
{
   active_rule28--;
   active_rule31--;
}


/********* container junction: predicate:  $.type == _threej  **************/

void activate20( void )
{
   active_rule29++;
}

void deactivate20( void )
{
   active_rule29--;
}



/************ utility cursor decls ***************/

typedef cursor <cont_stage> stage_cursor;
typedef cursor <cont_line> line_cursor;
typedef cursor <shadow_line> shadow_line_cursor;
typedef cursor <cont_edge> edge_cursor;
typedef cursor <shadow_edge> shadow_edge_cursor;
typedef cursor <cont_edge_label> edge_label_cursor;
typedef cursor <shadow_edge_label> shadow_edge_label_cursor;
typedef cursor <cont_junction> junction_cursor;
typedef cursor <shadow_junction> shadow_junction_cursor;
typedef cursor <cont_label> label_cursor;
typedef cursor <cont_illegal> illegal_cursor;


stage_cursor   a_stage;

line_cursor   a_line;

shadow_line_cursor   a_shadow_line;

edge_cursor   a_edge;

shadow_edge_cursor   a_shadow_edge;

edge_label_cursor   a_edge_label;

shadow_edge_label_cursor   a_shadow_edge_label;

junction_cursor   a_junction;

shadow_junction_cursor   a_shadow_junction;

label_cursor   a_label;

illegal_cursor   a_illegal;




/************ insertion and deletion operations ********/

void insert_stage (stage *r)
{
   insert(a_stage,*r);
   push_wl( a_stage.obj, a_stage._ts, stage_num );
}

void delete_stage (stage_cursor *c)
{
   delete(*c);
}

void insert_line (line *r)
{
   insert(a_line,*r);
   push_wl( a_line.obj, a_line._ts, line_num );
}

void delete_line (line_cursor *c)
{
   delete(*c);
}

void insert_shadow_line (line *r)
{
   insert(a_shadow_line,*r);
   push_wl_end( a_shadow_line.obj, a_shadow_line._ts, shadow_line_num );
}

void delete_shadow_line (shadow_line_cursor *c)
{
   delete(*c);
}

void insert_edge (edge *r)
{
   insert(a_edge,*r);
   push_wl( a_edge.obj, a_edge._ts, edge_num );
}

void delete_edge (edge_cursor *c)
{
   delete(*c);
}

void insert_shadow_edge (edge *r)
{
   insert(a_shadow_edge,*r);
   push_wl_end( a_shadow_edge.obj, a_shadow_edge._ts, shadow_edge_num );
}

void delete_shadow_edge (shadow_edge_cursor *c)
{
   delete(*c);
}

void insert_edge_label (edge_label *r)
{
   insert(a_edge_label,*r);
   push_wl( a_edge_label.obj, a_edge_label._ts, edge_label_num );
}

void delete_edge_label (edge_label_cursor *c)
{
   delete(*c);
}

void insert_shadow_edge_label (edge_label *r)
{
   insert(a_shadow_edge_label,*r);
   push_wl_end( a_shadow_edge_label.obj, a_shadow_edge_label._ts, shadow_edge_label_num );
}

void delete_shadow_edge_label (shadow_edge_label_cursor *c)
{
   delete(*c);
}

void insert_junction (junction *r)
{
   insert(a_junction,*r);
   push_wl( a_junction.obj, a_junction._ts, junction_num );
}

void delete_junction (junction_cursor *c)
{
   delete(*c);
}

void insert_shadow_junction (junction *r)
{
   insert(a_shadow_junction,*r);
   push_wl_end( a_shadow_junction.obj, a_shadow_junction._ts, shadow_junction_num );
}

void delete_shadow_junction (shadow_junction_cursor *c)
{
   delete(*c);
}

void insert_label (label *r)
{
   insert(a_label,*r);
   push_wl( a_label.obj, a_label._ts, label_num );
}

void delete_label (label_cursor *c)
{
   delete(*c);
}

void insert_illegal (illegal *r)
{
   insert(a_illegal,*r);
   push_wl( a_illegal.obj, a_illegal._ts, illegal_num );
}

void delete_illegal (illegal_cursor *c)
{
   delete(*c);
}


/**************************** rule #1: reverse_edges :
   (stage ^value  duplicate  )
   (line ^p1  <p1> ^p2  <p2>  )
    -->  *******************************/

int p2_1;
int p1_1;

#define query_1 where " $a.value == _duplicate "

#define negated_1 ""

typedef compcurs < a cont_stage, b cont_line >
   given < a >
   query_1 t2_a
   valid v2_a 
   curs1_a;

typedef compcurs < a cont_stage, b cont_line >
   given < b >
   query_1 t2_b
   valid v2_b 
   curs1_b;

/**************************** rule #2: done_reversing :
   (stage ^value  duplicate  )
   - (line  )
    -->  *******************************/


cursor <cont_line>
   C2_2;
cursor <shadow_line> where "$._ts > dom_timestamp"
   S2_2;

BOOLEAN N2_2( )
{
   foreach(C2_2) { return FALSE; }
   foreach(S2_2) { return FALSE; }
   return TRUE;
}

#define query_2 where " $a.value == _duplicate && (N2_2()) "

#define negated_2 " (N2_2()) "

typedef compcurs < a cont_stage >
   given < a >
   query_2
   valid negated_2
   curs2_a;

#define query_2_b where " $a.value == _duplicate && (N2_2()) "

typedef compcurs < a cont_stage, b shadow_line >
   given < b >
   query_2_b t2_b
   valid v2_b and negated_2
   curs2_b;

/**************************** rule #3: make_3_junction :
   (stage ^value  detect_junctions  )
   (edge ^p1  <base_point> ^p2  <p1> ^joined  false  )
   (edge ^p1  <base_point> ^p2  <p2> ^p2 <> <p1> ^joined  false  )
   (edge ^p1  <base_point> ^p2  <p3> ^p2 <> <p1> ^p2 <> <p2> ^joined  false  )
    -->  *******************************/

int p3_3;
int p2_3;
int p1_3;
int base_point_3;

#define query_3 where " $a.value == _detect_junctions && $b.joined == _false \
        && $c.p1 == $b.p1 && $c.p2 != $b.p2 && $c.joined == _false \
        && $d.p1 == $b.p1 && $d.p2 != $b.p2 && $d.p2 != $c.p2 && $d.joined == _false "

#define negated_3 ""

typedef compcurs < a cont_stage, b cont_edge, c cont_edge, d cont_edge >
   given < a >
   query_3 t4_a
   valid v4_a 
   curs3_a;

typedef compcurs < a cont_stage, b cont_edge, c cont_edge, d cont_edge >
   given < b >
   query_3 t4_b
   valid v4_b 
   curs3_b;

typedef compcurs < a cont_stage, b cont_edge, c cont_edge, d cont_edge >
   given < c >
   query_3 t4_c
   valid v4_c 
   curs3_c;

typedef compcurs < a cont_stage, b cont_edge, c cont_edge, d cont_edge >
   given < d >
   query_3 t4_d
   valid v4_d 
   curs3_d;

/**************************** rule #4: make_L :
   (stage ^value  detect_junctions  )
   (edge ^p1  <base_point> ^p2  <p2> ^joined  false  )
   (edge ^p1  <base_point> ^p2  <p3> ^p2 <> <p2> ^joined  false  )
   - (edge ^p1  <base_point> ^p2 <> <p2> ^p2 <> <p3>  )
    -->  *******************************/

int p3_4;
int p2_4;
int base_point_4;

cursor <cont_edge> where " $.p1 == base_point_4 && $.p2 != p2_4 && $.p2 != p3_4 "
   C4_4;
cursor <shadow_edge> where " $.p1 == base_point_4 && $.p2 != p2_4 && $.p2 != p3_4  && $._ts > dom_timestamp"
   S4_4;

BOOLEAN N4_4(  edge_cursor *b, edge_cursor *c )
{
   p3_4 = c->p2;
   p2_4 = b->p2;
   base_point_4 = b->p1;
   foreach(C4_4) { return FALSE; }
   foreach(S4_4) { return FALSE; }
   return TRUE;
}

#define query_4 where " $a.value == _detect_junctions && $b.joined == _false \
        && $c.p1 == $b.p1 && $c.p2 != $b.p2 && $c.joined == _false && (N4_4(&$b,&$c)) "

#define negated_4 " (N4_4(&$b,&$c)) "

typedef compcurs < a cont_stage, b cont_edge, c cont_edge >
   given < a >
   query_4 t3_a
   valid v3_a  and negated_4
   curs4_a;

typedef compcurs < a cont_stage, b cont_edge, c cont_edge >
   given < b >
   query_4 t3_b
   valid v3_b  and negated_4
   curs4_b;

typedef compcurs < a cont_stage, b cont_edge, c cont_edge >
   given < c >
   query_4 t3_c
   valid v3_c  and negated_4
   curs4_c;

#define query_4_d where " $a.value == _detect_junctions && $b.joined == _false \
        && $c.p1 == $b.p1 && $c.p2 != $b.p2 && $c.joined == _false \
        && $d.p1 == $b.p1 && $d.p2 != $b.p2 && $d.p2 != $c.p2 && (N4_4(&$b,&$c)) "

typedef compcurs < a cont_stage, b cont_edge, c cont_edge, d shadow_edge >
   given < d >
   query_4_d t4_d
   valid v4_d and negated_4
   curs4_d;

/**************************** rule #5: done_detecting :
   (stage ^value  detect_junctions  )
   - (edge ^joined  false  )
    -->  *******************************/


cursor <cont_edge> where " $.joined == _false "
   C5_2;
cursor <shadow_edge> where " $.joined == _false  && $._ts > dom_timestamp"
   S5_2;

BOOLEAN N5_2( )
{
   foreach(C5_2) { return FALSE; }
   foreach(S5_2) { return FALSE; }
   return TRUE;
}

#define query_5 where " $a.value == _detect_junctions && (N5_2()) "

#define negated_5 " (N5_2()) "

typedef compcurs < a cont_stage >
   given < a >
   query_5
   valid negated_5
   curs5_a;

#define query_5_b where " $a.value == _detect_junctions && $b.joined == _false && (N5_2()) "

typedef compcurs < a cont_stage, b shadow_edge >
   given < b >
   query_5_b t2_b
   valid v2_b and negated_5
   curs5_b;

/**************************** rule #6: initial_boundary_junction_L :
   (stage ^value  find_initial_boundary  )
   (junction ^type  twoj ^base_point  <bp> ^p1  <p1> ^p2  <p2>  )
   (edge ^p1  <bp> ^p2  <p1>  )
   (edge ^p1  <bp> ^p2  <p2>  )
   - (junction ^base_point > <bp>  )
    -->  *******************************/

int p2_6;
int p1_6;
int bp_6;

cursor <cont_junction> where " $.base_point > bp_6 "
   C6_5;
cursor <shadow_junction> where " $.base_point > bp_6  && $._ts > dom_timestamp"
   S6_5;

BOOLEAN N6_5(  junction_cursor *b )
{
   bp_6 = b->base_point;
   foreach(C6_5) { return FALSE; }
   foreach(S6_5) { return FALSE; }
   return TRUE;
}

#define query_6 where " $a.value == _find_initial_boundary && $b.type == _twoj \
        && $c.p1 == $b.base_point && $c.p2 == $b.p1 \
        && $d.p1 == $b.base_point && $d.p2 == $b.p2 && (N6_5(&$b)) "

#define negated_6 " (N6_5(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_edge, d cont_edge >
   given < a >
   query_6 t4_a
   valid v4_a  and negated_6
   curs6_a;

typedef compcurs < a cont_stage, b cont_junction, c cont_edge, d cont_edge >
   given < b >
   query_6 t4_b
   valid v4_b  and negated_6
   curs6_b;

typedef compcurs < a cont_stage, b cont_junction, c cont_edge, d cont_edge >
   given < c >
   query_6 t4_c
   valid v4_c  and negated_6
   curs6_c;

typedef compcurs < a cont_stage, b cont_junction, c cont_edge, d cont_edge >
   given < d >
   query_6 t4_d
   valid v4_d  and negated_6
   curs6_d;

#define query_6_e where " $a.value == _find_initial_boundary && $b.type == _twoj \
        && $c.p1 == $b.base_point && $c.p2 == $b.p1 \
        && $d.p1 == $b.base_point && $d.p2 == $b.p2 \
        && $e.base_point > $b.base_point && (N6_5(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_edge, d cont_edge, e shadow_junction >
   given < e >
   query_6_e t5_e
   valid v5_e and negated_6
   curs6_e;

/**************************** rule #7: initial_boundary_junction_arrow :
   (stage ^value  find_initial_boundary  )
   (junction ^type  threej ^name  arrow ^base_point  <bp> ^p1  <p1> ^p2  <p2> ^p3  <p3>  )
   (edge ^p1  <bp> ^p2  <p1>  )
   (edge ^p1  <bp> ^p2  <p2>  )
   (edge ^p1  <bp> ^p2  <p3>  )
   - (junction ^base_point > <bp>  )
    -->  *******************************/

int p3_7;
int p2_7;
int p1_7;
int bp_7;

cursor <cont_junction> where " $.base_point > bp_7 "
   C7_6;
cursor <shadow_junction> where " $.base_point > bp_7  && $._ts > dom_timestamp"
   S7_6;

BOOLEAN N7_6(  junction_cursor *b )
{
   bp_7 = b->base_point;
   foreach(C7_6) { return FALSE; }
   foreach(S7_6) { return FALSE; }
   return TRUE;
}

#define query_7 where " $a.value == _find_initial_boundary && $b.type == _threej && $b.name == _arrow \
        && $c.p1 == $b.base_point && $c.p2 == $b.p1 \
        && $d.p1 == $b.base_point && $d.p2 == $b.p2 \
        && $e.p1 == $b.base_point && $e.p2 == $b.p3 && (N7_6(&$b)) "

#define negated_7 " (N7_6(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_edge, d cont_edge, e cont_edge >
   given < a >
   query_7 t5_a
   valid v5_a  and negated_7
   curs7_a;

typedef compcurs < a cont_stage, b cont_junction, c cont_edge, d cont_edge, e cont_edge >
   given < b >
   query_7 t5_b
   valid v5_b  and negated_7
   curs7_b;

typedef compcurs < a cont_stage, b cont_junction, c cont_edge, d cont_edge, e cont_edge >
   given < c >
   query_7 t5_c
   valid v5_c  and negated_7
   curs7_c;

typedef compcurs < a cont_stage, b cont_junction, c cont_edge, d cont_edge, e cont_edge >
   given < d >
   query_7 t5_d
   valid v5_d  and negated_7
   curs7_d;

typedef compcurs < a cont_stage, b cont_junction, c cont_edge, d cont_edge, e cont_edge >
   given < e >
   query_7 t5_e
   valid v5_e  and negated_7
   curs7_e;

#define query_7_f where " $a.value == _find_initial_boundary && $b.type == _threej && $b.name == _arrow \
        && $c.p1 == $b.base_point && $c.p2 == $b.p1 \
        && $d.p1 == $b.base_point && $d.p2 == $b.p2 \
        && $e.p1 == $b.base_point && $e.p2 == $b.p3 \
        && $f.base_point > $b.base_point && (N7_6(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_edge, d cont_edge, e cont_edge, f shadow_junction >
   given < f >
   query_7_f t6_f
   valid v6_f and negated_7
   curs7_f;

/**************************** rule #8: second_boundary_junction_L :
   (stage ^value  find_second_boundary  )
   (junction ^type  twoj ^base_point  <bp> ^p1  <p1> ^p2  <p2>  )
   (edge ^p1  <bp> ^p2  <p1>  )
   (edge ^p1  <bp> ^p2  <p2>  )
   - (junction ^base_point < <bp>  )
    -->  *******************************/

int p2_8;
int p1_8;
int bp_8;

cursor <cont_junction> where " $.base_point < bp_8 "
   C8_5;
cursor <shadow_junction> where " $.base_point < bp_8  && $._ts > dom_timestamp"
   S8_5;

BOOLEAN N8_5(  junction_cursor *b )
{
   bp_8 = b->base_point;
   foreach(C8_5) { return FALSE; }
   foreach(S8_5) { return FALSE; }
   return TRUE;
}

#define query_8 where " $a.value == _find_second_boundary && $b.type == _twoj \
        && $c.p1 == $b.base_point && $c.p2 == $b.p1 \
        && $d.p1 == $b.base_point && $d.p2 == $b.p2 && (N8_5(&$b)) "

#define negated_8 " (N8_5(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_edge, d cont_edge >
   given < a >
   query_8 t4_a
   valid v4_a  and negated_8
   curs8_a;

typedef compcurs < a cont_stage, b cont_junction, c cont_edge, d cont_edge >
   given < b >
   query_8 t4_b
   valid v4_b  and negated_8
   curs8_b;

typedef compcurs < a cont_stage, b cont_junction, c cont_edge, d cont_edge >
   given < c >
   query_8 t4_c
   valid v4_c  and negated_8
   curs8_c;

typedef compcurs < a cont_stage, b cont_junction, c cont_edge, d cont_edge >
   given < d >
   query_8 t4_d
   valid v4_d  and negated_8
   curs8_d;

#define query_8_e where " $a.value == _find_second_boundary && $b.type == _twoj \
        && $c.p1 == $b.base_point && $c.p2 == $b.p1 \
        && $d.p1 == $b.base_point && $d.p2 == $b.p2 \
        && $e.base_point < $b.base_point && (N8_5(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_edge, d cont_edge, e shadow_junction >
   given < e >
   query_8_e t5_e
   valid v5_e and negated_8
   curs8_e;

/**************************** rule #9: second_boundary_junction_arrow :
   (stage ^value  find_second_boundary  )
   (junction ^type  threej ^name  arrow ^base_point  <bp> ^p1  <p1> ^p2  <p2> ^p3  <p3>  )
   (edge ^p1  <bp> ^p2  <p1>  )
   (edge ^p1  <bp> ^p2  <p2>  )
   (edge ^p1  <bp> ^p2  <p3>  )
   - (junction ^base_point < <bp>  )
    -->  *******************************/

int p3_9;
int p2_9;
int p1_9;
int bp_9;

cursor <cont_junction> where " $.base_point < bp_9 "
   C9_6;
cursor <shadow_junction> where " $.base_point < bp_9  && $._ts > dom_timestamp"
   S9_6;

BOOLEAN N9_6(  junction_cursor *b )
{
   bp_9 = b->base_point;
   foreach(C9_6) { return FALSE; }
   foreach(S9_6) { return FALSE; }
   return TRUE;
}

#define query_9 where " $a.value == _find_second_boundary && $b.type == _threej && $b.name == _arrow \
        && $c.p1 == $b.base_point && $c.p2 == $b.p1 \
        && $d.p1 == $b.base_point && $d.p2 == $b.p2 \
        && $e.p1 == $b.base_point && $e.p2 == $b.p3 && (N9_6(&$b)) "

#define negated_9 " (N9_6(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_edge, d cont_edge, e cont_edge >
   given < a >
   query_9 t5_a
   valid v5_a  and negated_9
   curs9_a;

typedef compcurs < a cont_stage, b cont_junction, c cont_edge, d cont_edge, e cont_edge >
   given < b >
   query_9 t5_b
   valid v5_b  and negated_9
   curs9_b;

typedef compcurs < a cont_stage, b cont_junction, c cont_edge, d cont_edge, e cont_edge >
   given < c >
   query_9 t5_c
   valid v5_c  and negated_9
   curs9_c;

typedef compcurs < a cont_stage, b cont_junction, c cont_edge, d cont_edge, e cont_edge >
   given < d >
   query_9 t5_d
   valid v5_d  and negated_9
   curs9_d;

typedef compcurs < a cont_stage, b cont_junction, c cont_edge, d cont_edge, e cont_edge >
   given < e >
   query_9 t5_e
   valid v5_e  and negated_9
   curs9_e;

#define query_9_f where " $a.value == _find_second_boundary && $b.type == _threej && $b.name == _arrow \
        && $c.p1 == $b.base_point && $c.p2 == $b.p1 \
        && $d.p1 == $b.base_point && $d.p2 == $b.p2 \
        && $e.p1 == $b.base_point && $e.p2 == $b.p3 \
        && $f.base_point < $b.base_point && (N9_6(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_edge, d cont_edge, e cont_edge, f shadow_junction >
   given < f >
   query_9_f t6_f
   valid v6_f and negated_9
   curs9_f;

/**************************** rule #10: start_visit_3_junction :
   (stage ^value  labeling  )
   (junction ^base_point  <bp> ^type  threej ^p1  <p1> ^p2  <p2> ^p3  <p3> ^visited  no  )
    -->  *******************************/

int p3_10;
int p2_10;
int p1_10;
int bp_10;

#define query_10 where " $a.value == _labeling && $b.type == _threej && $b.visited == _no "

#define negated_10 ""

typedef compcurs < a cont_stage, b cont_junction >
   given < a >
   query_10 t2_a
   valid v2_a 
   curs10_a;

typedef compcurs < a cont_stage, b cont_junction >
   given < b >
   query_10 t2_b
   valid v2_b 
   curs10_b;

/**************************** rule #11: visit_threej_0 :
   (stage ^value  visiting_threej  )
   (junction ^name  <n> ^base_point  <bp> ^p1  <p1> ^p2  <p2> ^p3  <p3> ^visited  now  )
   (label ^name  <n> ^id  <id> ^n1  <n1> ^n2  <n2> ^n3  <n3>  )
   (edge_label ^p1  <p1> ^p2  <bp> ^l_name  <n1>  )
   (edge_label ^p1  <p2> ^p2  <bp> ^l_name  <n2>  )
   (edge_label ^p1  <p3> ^p2  <bp> ^l_name  <n3>  )
   - (edge_label ^p1  <bp> ^l_id  <id>  )
    -->  *******************************/

int n3_11;
int n2_11;
int n1_11;
int id_11;
int p3_11;
int p2_11;
int p1_11;
int bp_11;
int n_11;

cursor <cont_edge_label> where " $.p1 == bp_11 && $.l_id == id_11 "
   C11_7;
cursor <shadow_edge_label> where " $.p1 == bp_11 && $.l_id == id_11  && $._ts > dom_timestamp"
   S11_7;

BOOLEAN N11_7(  junction_cursor *b, label_cursor *c )
{
   id_11 = c->id;
   bp_11 = b->base_point;
   foreach(C11_7) { return FALSE; }
   foreach(S11_7) { return FALSE; }
   return TRUE;
}

#define query_11 where " $a.value == _visiting_threej && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p1 && $d.p2 == $b.base_point && $d.l_name == $c.n1 \
        && $e.p1 == $b.p2 && $e.p2 == $b.base_point && $e.l_name == $c.n2 \
        && $f.p1 == $b.p3 && $f.p2 == $b.base_point && $f.l_name == $c.n3 && (N11_7(&$b,&$c)) "

#define negated_11 " (N11_7(&$b,&$c)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label, f cont_edge_label >
   given < a >
   query_11 t6_a
   valid v6_a  and negated_11
   curs11_a;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label, f cont_edge_label >
   given < b >
   query_11 t6_b
   valid v6_b  and negated_11
   curs11_b;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label, f cont_edge_label >
   given < c >
   query_11 t6_c
   valid v6_c  and negated_11
   curs11_c;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label, f cont_edge_label >
   given < d >
   query_11 t6_d
   valid v6_d  and negated_11
   curs11_d;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label, f cont_edge_label >
   given < e >
   query_11 t6_e
   valid v6_e  and negated_11
   curs11_e;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label, f cont_edge_label >
   given < f >
   query_11 t6_f
   valid v6_f  and negated_11
   curs11_f;

#define query_11_g where " $a.value == _visiting_threej && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p1 && $d.p2 == $b.base_point && $d.l_name == $c.n1 \
        && $e.p1 == $b.p2 && $e.p2 == $b.base_point && $e.l_name == $c.n2 \
        && $f.p1 == $b.p3 && $f.p2 == $b.base_point && $f.l_name == $c.n3 \
        && $g.p1 == $b.base_point && $g.l_id == $c.id && (N11_7(&$b,&$c)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label, f cont_edge_label, g shadow_edge_label >
   given < g >
   query_11_g t7_g
   valid v7_g and negated_11
   curs11_g;

/**************************** rule #12: visit_threej_1 :
   (stage ^value  visiting_threej  )
   (junction ^name  <n> ^base_point  <bp> ^p1  <p1> ^p2  <p2> ^p3  <p3> ^visited  now  )
   (label ^name  <n> ^id  <id> ^n1  <n1> ^n2  <n2> ^n3  <n3>  )
   (edge_label ^p1  <p2> ^p2  <bp> ^l_name  <n2>  )
   (edge_label ^p1  <p3> ^p2  <bp> ^l_name  <n3>  )
   - (edge_label ^p1  <bp> ^l_id  <id>  )
   - (edge_label ^p1  <p1> ^p2  <bp>  )
    -->  *******************************/

int n3_12;
int n2_12;
int n1_12;
int id_12;
int p3_12;
int p2_12;
int p1_12;
int bp_12;
int n_12;

cursor <cont_edge_label> where " $.p1 == bp_12 && $.l_id == id_12 "
   C12_6;
cursor <shadow_edge_label> where " $.p1 == bp_12 && $.l_id == id_12  && $._ts > dom_timestamp"
   S12_6;
cursor <cont_edge_label> where " $.p1 == p1_12 && $.p2 == bp_12 "
   C12_7;
cursor <shadow_edge_label> where " $.p1 == p1_12 && $.p2 == bp_12  && $._ts > dom_timestamp"
   S12_7;

BOOLEAN N12_6(  junction_cursor *b, label_cursor *c )
{
   id_12 = c->id;
   bp_12 = b->base_point;
   foreach(C12_6) { return FALSE; }
   foreach(S12_6) { return FALSE; }
   return TRUE;
}


BOOLEAN N12_7(  junction_cursor *b )
{
   p1_12 = b->p1;
   bp_12 = b->base_point;
   foreach(C12_7) { return FALSE; }
   foreach(S12_7) { return FALSE; }
   return TRUE;
}

#define query_12 where " $a.value == _visiting_threej && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p2 && $d.p2 == $b.base_point && $d.l_name == $c.n2 \
        && $e.p1 == $b.p3 && $e.p2 == $b.base_point && $e.l_name == $c.n3 && (N12_6(&$b,&$c)) && (N12_7(&$b)) "

#define negated_12 " (N12_6(&$b,&$c))  &&  (N12_7(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label >
   given < a >
   query_12 t5_a
   valid v5_a  and negated_12
   curs12_a;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label >
   given < b >
   query_12 t5_b
   valid v5_b  and negated_12
   curs12_b;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label >
   given < c >
   query_12 t5_c
   valid v5_c  and negated_12
   curs12_c;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label >
   given < d >
   query_12 t5_d
   valid v5_d  and negated_12
   curs12_d;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label >
   given < e >
   query_12 t5_e
   valid v5_e  and negated_12
   curs12_e;

#define query_12_f where " $a.value == _visiting_threej && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p2 && $d.p2 == $b.base_point && $d.l_name == $c.n2 \
        && $e.p1 == $b.p3 && $e.p2 == $b.base_point && $e.l_name == $c.n3 \
        && $f.p1 == $b.base_point && $f.l_id == $c.id && (N12_6(&$b,&$c)) && (N12_7(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label, f shadow_edge_label >
   given < f >
   query_12_f t6_f
   valid v6_f and negated_12
   curs12_f;

#define query_12_g where " $a.value == _visiting_threej && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p2 && $d.p2 == $b.base_point && $d.l_name == $c.n2 \
        && $e.p1 == $b.p3 && $e.p2 == $b.base_point && $e.l_name == $c.n3 \
        && $f.p1 == $b.p1 && $f.p2 == $b.base_point && (N12_6(&$b,&$c)) && (N12_7(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label, f shadow_edge_label >
   given < f >
   query_12_g t6_f
   valid v6_f and negated_12
   curs12_g;

/**************************** rule #13: visit_threej_2 :
   (stage ^value  visiting_threej  )
   (junction ^name  <n> ^base_point  <bp> ^p1  <p1> ^p2  <p2> ^p3  <p3> ^visited  now  )
   (label ^name  <n> ^id  <id> ^n1  <n1> ^n2  <n2> ^n3  <n3>  )
   (edge_label ^p1  <p1> ^p2  <bp> ^l_name  <n1>  )
   (edge_label ^p1  <p3> ^p2  <bp> ^l_name  <n3>  )
   - (edge_label ^p1  <bp> ^l_id  <id>  )
   - (edge_label ^p1  <p2> ^p2  <bp>  )
    -->  *******************************/

int n3_13;
int n2_13;
int n1_13;
int id_13;
int p3_13;
int p2_13;
int p1_13;
int bp_13;
int n_13;

cursor <cont_edge_label> where " $.p1 == bp_13 && $.l_id == id_13 "
   C13_6;
cursor <shadow_edge_label> where " $.p1 == bp_13 && $.l_id == id_13  && $._ts > dom_timestamp"
   S13_6;
cursor <cont_edge_label> where " $.p1 == p2_13 && $.p2 == bp_13 "
   C13_7;
cursor <shadow_edge_label> where " $.p1 == p2_13 && $.p2 == bp_13  && $._ts > dom_timestamp"
   S13_7;

BOOLEAN N13_6(  junction_cursor *b, label_cursor *c )
{
   id_13 = c->id;
   bp_13 = b->base_point;
   foreach(C13_6) { return FALSE; }
   foreach(S13_6) { return FALSE; }
   return TRUE;
}


BOOLEAN N13_7(  junction_cursor *b )
{
   p2_13 = b->p2;
   bp_13 = b->base_point;
   foreach(C13_7) { return FALSE; }
   foreach(S13_7) { return FALSE; }
   return TRUE;
}

#define query_13 where " $a.value == _visiting_threej && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p1 && $d.p2 == $b.base_point && $d.l_name == $c.n1 \
        && $e.p1 == $b.p3 && $e.p2 == $b.base_point && $e.l_name == $c.n3 && (N13_6(&$b,&$c)) && (N13_7(&$b)) "

#define negated_13 " (N13_6(&$b,&$c))  &&  (N13_7(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label >
   given < a >
   query_13 t5_a
   valid v5_a  and negated_13
   curs13_a;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label >
   given < b >
   query_13 t5_b
   valid v5_b  and negated_13
   curs13_b;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label >
   given < c >
   query_13 t5_c
   valid v5_c  and negated_13
   curs13_c;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label >
   given < d >
   query_13 t5_d
   valid v5_d  and negated_13
   curs13_d;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label >
   given < e >
   query_13 t5_e
   valid v5_e  and negated_13
   curs13_e;

#define query_13_f where " $a.value == _visiting_threej && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p1 && $d.p2 == $b.base_point && $d.l_name == $c.n1 \
        && $e.p1 == $b.p3 && $e.p2 == $b.base_point && $e.l_name == $c.n3 \
        && $f.p1 == $b.base_point && $f.l_id == $c.id && (N13_6(&$b,&$c)) && (N13_7(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label, f shadow_edge_label >
   given < f >
   query_13_f t6_f
   valid v6_f and negated_13
   curs13_f;

#define query_13_g where " $a.value == _visiting_threej && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p1 && $d.p2 == $b.base_point && $d.l_name == $c.n1 \
        && $e.p1 == $b.p3 && $e.p2 == $b.base_point && $e.l_name == $c.n3 \
        && $f.p1 == $b.p2 && $f.p2 == $b.base_point && (N13_6(&$b,&$c)) && (N13_7(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label, f shadow_edge_label >
   given < f >
   query_13_g t6_f
   valid v6_f and negated_13
   curs13_g;

/**************************** rule #14: visit_threej_3 :
   (stage ^value  visiting_threej  )
   (junction ^name  <n> ^base_point  <bp> ^p1  <p1> ^p2  <p2> ^p3  <p3> ^visited  now  )
   (label ^name  <n> ^id  <id> ^n1  <n1> ^n2  <n2> ^n3  <n3>  )
   (edge_label ^p1  <p3> ^p2  <bp> ^l_name  <n3>  )
   - (edge_label ^p1  <bp> ^l_id  <id>  )
   - (edge_label ^p1  <p2> ^p2  <bp>  )
   - (edge_label ^p1  <p1> ^p2  <bp>  )
    -->  *******************************/

int n3_14;
int n2_14;
int n1_14;
int id_14;
int p3_14;
int p2_14;
int p1_14;
int bp_14;
int n_14;

cursor <cont_edge_label> where " $.p1 == bp_14 && $.l_id == id_14 "
   C14_5;
cursor <shadow_edge_label> where " $.p1 == bp_14 && $.l_id == id_14  && $._ts > dom_timestamp"
   S14_5;
cursor <cont_edge_label> where " $.p1 == p2_14 && $.p2 == bp_14 "
   C14_6;
cursor <shadow_edge_label> where " $.p1 == p2_14 && $.p2 == bp_14  && $._ts > dom_timestamp"
   S14_6;
cursor <cont_edge_label> where " $.p1 == p1_14 && $.p2 == bp_14 "
   C14_7;
cursor <shadow_edge_label> where " $.p1 == p1_14 && $.p2 == bp_14  && $._ts > dom_timestamp"
   S14_7;

BOOLEAN N14_5(  junction_cursor *b, label_cursor *c )
{
   id_14 = c->id;
   bp_14 = b->base_point;
   foreach(C14_5) { return FALSE; }
   foreach(S14_5) { return FALSE; }
   return TRUE;
}


BOOLEAN N14_6(  junction_cursor *b )
{
   p2_14 = b->p2;
   bp_14 = b->base_point;
   foreach(C14_6) { return FALSE; }
   foreach(S14_6) { return FALSE; }
   return TRUE;
}


BOOLEAN N14_7(  junction_cursor *b )
{
   p1_14 = b->p1;
   bp_14 = b->base_point;
   foreach(C14_7) { return FALSE; }
   foreach(S14_7) { return FALSE; }
   return TRUE;
}

#define query_14 where " $a.value == _visiting_threej && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p3 && $d.p2 == $b.base_point && $d.l_name == $c.n3 && (N14_5(&$b,&$c)) && (N14_6(&$b)) && (N14_7(&$b)) "

#define negated_14 " (N14_5(&$b,&$c))  &&  (N14_6(&$b))  &&  (N14_7(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label >
   given < a >
   query_14 t4_a
   valid v4_a  and negated_14
   curs14_a;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label >
   given < b >
   query_14 t4_b
   valid v4_b  and negated_14
   curs14_b;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label >
   given < c >
   query_14 t4_c
   valid v4_c  and negated_14
   curs14_c;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label >
   given < d >
   query_14 t4_d
   valid v4_d  and negated_14
   curs14_d;

#define query_14_e where " $a.value == _visiting_threej && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p3 && $d.p2 == $b.base_point && $d.l_name == $c.n3 \
        && $e.p1 == $b.base_point && $e.l_id == $c.id && (N14_5(&$b,&$c)) && (N14_6(&$b)) && (N14_7(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e shadow_edge_label >
   given < e >
   query_14_e t5_e
   valid v5_e and negated_14
   curs14_e;

#define query_14_f where " $a.value == _visiting_threej && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p3 && $d.p2 == $b.base_point && $d.l_name == $c.n3 \
        && $e.p1 == $b.p2 && $e.p2 == $b.base_point && (N14_5(&$b,&$c)) && (N14_6(&$b)) && (N14_7(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e shadow_edge_label >
   given < e >
   query_14_f t5_e
   valid v5_e and negated_14
   curs14_f;

#define query_14_g where " $a.value == _visiting_threej && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p3 && $d.p2 == $b.base_point && $d.l_name == $c.n3 \
        && $e.p1 == $b.p1 && $e.p2 == $b.base_point && (N14_5(&$b,&$c)) && (N14_6(&$b)) && (N14_7(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e shadow_edge_label >
   given < e >
   query_14_g t5_e
   valid v5_e and negated_14
   curs14_g;

/**************************** rule #15: visit_threej_4 :
   (stage ^value  visiting_threej  )
   (junction ^name  <n> ^base_point  <bp> ^p1  <p1> ^p2  <p2> ^p3  <p3> ^visited  now  )
   (label ^name  <n> ^id  <id> ^n1  <n1> ^n2  <n2> ^n3  <n3>  )
   (edge_label ^p1  <p1> ^p2  <bp> ^l_name  <n1>  )
   (edge_label ^p1  <p2> ^p2  <bp> ^l_name  <n2>  )
   - (edge_label ^p1  <bp> ^l_id  <id>  )
   - (edge_label ^p1  <p3> ^p2  <bp>  )
    -->  *******************************/

int n3_15;
int n2_15;
int n1_15;
int id_15;
int p3_15;
int p2_15;
int p1_15;
int bp_15;
int n_15;

cursor <cont_edge_label> where " $.p1 == bp_15 && $.l_id == id_15 "
   C15_6;
cursor <shadow_edge_label> where " $.p1 == bp_15 && $.l_id == id_15  && $._ts > dom_timestamp"
   S15_6;
cursor <cont_edge_label> where " $.p1 == p3_15 && $.p2 == bp_15 "
   C15_7;
cursor <shadow_edge_label> where " $.p1 == p3_15 && $.p2 == bp_15  && $._ts > dom_timestamp"
   S15_7;

BOOLEAN N15_6(  junction_cursor *b, label_cursor *c )
{
   id_15 = c->id;
   bp_15 = b->base_point;
   foreach(C15_6) { return FALSE; }
   foreach(S15_6) { return FALSE; }
   return TRUE;
}


BOOLEAN N15_7(  junction_cursor *b )
{
   p3_15 = b->p3;
   bp_15 = b->base_point;
   foreach(C15_7) { return FALSE; }
   foreach(S15_7) { return FALSE; }
   return TRUE;
}

#define query_15 where " $a.value == _visiting_threej && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p1 && $d.p2 == $b.base_point && $d.l_name == $c.n1 \
        && $e.p1 == $b.p2 && $e.p2 == $b.base_point && $e.l_name == $c.n2 && (N15_6(&$b,&$c)) && (N15_7(&$b)) "

#define negated_15 " (N15_6(&$b,&$c))  &&  (N15_7(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label >
   given < a >
   query_15 t5_a
   valid v5_a  and negated_15
   curs15_a;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label >
   given < b >
   query_15 t5_b
   valid v5_b  and negated_15
   curs15_b;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label >
   given < c >
   query_15 t5_c
   valid v5_c  and negated_15
   curs15_c;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label >
   given < d >
   query_15 t5_d
   valid v5_d  and negated_15
   curs15_d;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label >
   given < e >
   query_15 t5_e
   valid v5_e  and negated_15
   curs15_e;

#define query_15_f where " $a.value == _visiting_threej && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p1 && $d.p2 == $b.base_point && $d.l_name == $c.n1 \
        && $e.p1 == $b.p2 && $e.p2 == $b.base_point && $e.l_name == $c.n2 \
        && $f.p1 == $b.base_point && $f.l_id == $c.id && (N15_6(&$b,&$c)) && (N15_7(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label, f shadow_edge_label >
   given < f >
   query_15_f t6_f
   valid v6_f and negated_15
   curs15_f;

#define query_15_g where " $a.value == _visiting_threej && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p1 && $d.p2 == $b.base_point && $d.l_name == $c.n1 \
        && $e.p1 == $b.p2 && $e.p2 == $b.base_point && $e.l_name == $c.n2 \
        && $f.p1 == $b.p3 && $f.p2 == $b.base_point && (N15_6(&$b,&$c)) && (N15_7(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label, f shadow_edge_label >
   given < f >
   query_15_g t6_f
   valid v6_f and negated_15
   curs15_g;

/**************************** rule #16: visit_threej_5 :
   (stage ^value  visiting_threej  )
   (junction ^name  <n> ^base_point  <bp> ^p1  <p1> ^p2  <p2> ^p3  <p3> ^visited  now  )
   (label ^name  <n> ^id  <id> ^n1  <n1> ^n2  <n2> ^n3  <n3>  )
   (edge_label ^p1  <p2> ^p2  <bp> ^l_name  <n2>  )
   - (edge_label ^p1  <bp> ^l_id  <id>  )
   - (edge_label ^p1  <p3> ^p2  <bp>  )
   - (edge_label ^p1  <p1> ^p2  <bp>  )
    -->  *******************************/

int n3_16;
int n2_16;
int n1_16;
int id_16;
int p3_16;
int p2_16;
int p1_16;
int bp_16;
int n_16;

cursor <cont_edge_label> where " $.p1 == bp_16 && $.l_id == id_16 "
   C16_5;
cursor <shadow_edge_label> where " $.p1 == bp_16 && $.l_id == id_16  && $._ts > dom_timestamp"
   S16_5;
cursor <cont_edge_label> where " $.p1 == p3_16 && $.p2 == bp_16 "
   C16_6;
cursor <shadow_edge_label> where " $.p1 == p3_16 && $.p2 == bp_16  && $._ts > dom_timestamp"
   S16_6;
cursor <cont_edge_label> where " $.p1 == p1_16 && $.p2 == bp_16 "
   C16_7;
cursor <shadow_edge_label> where " $.p1 == p1_16 && $.p2 == bp_16  && $._ts > dom_timestamp"
   S16_7;

BOOLEAN N16_5(  junction_cursor *b, label_cursor *c )
{
   id_16 = c->id;
   bp_16 = b->base_point;
   foreach(C16_5) { return FALSE; }
   foreach(S16_5) { return FALSE; }
   return TRUE;
}


BOOLEAN N16_6(  junction_cursor *b )
{
   p3_16 = b->p3;
   bp_16 = b->base_point;
   foreach(C16_6) { return FALSE; }
   foreach(S16_6) { return FALSE; }
   return TRUE;
}


BOOLEAN N16_7(  junction_cursor *b )
{
   p1_16 = b->p1;
   bp_16 = b->base_point;
   foreach(C16_7) { return FALSE; }
   foreach(S16_7) { return FALSE; }
   return TRUE;
}

#define query_16 where " $a.value == _visiting_threej && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p2 && $d.p2 == $b.base_point && $d.l_name == $c.n2 && (N16_5(&$b,&$c)) && (N16_6(&$b)) && (N16_7(&$b)) "

#define negated_16 " (N16_5(&$b,&$c))  &&  (N16_6(&$b))  &&  (N16_7(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label >
   given < a >
   query_16 t4_a
   valid v4_a  and negated_16
   curs16_a;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label >
   given < b >
   query_16 t4_b
   valid v4_b  and negated_16
   curs16_b;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label >
   given < c >
   query_16 t4_c
   valid v4_c  and negated_16
   curs16_c;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label >
   given < d >
   query_16 t4_d
   valid v4_d  and negated_16
   curs16_d;

#define query_16_e where " $a.value == _visiting_threej && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p2 && $d.p2 == $b.base_point && $d.l_name == $c.n2 \
        && $e.p1 == $b.base_point && $e.l_id == $c.id && (N16_5(&$b,&$c)) && (N16_6(&$b)) && (N16_7(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e shadow_edge_label >
   given < e >
   query_16_e t5_e
   valid v5_e and negated_16
   curs16_e;

#define query_16_f where " $a.value == _visiting_threej && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p2 && $d.p2 == $b.base_point && $d.l_name == $c.n2 \
        && $e.p1 == $b.p3 && $e.p2 == $b.base_point && (N16_5(&$b,&$c)) && (N16_6(&$b)) && (N16_7(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e shadow_edge_label >
   given < e >
   query_16_f t5_e
   valid v5_e and negated_16
   curs16_f;

#define query_16_g where " $a.value == _visiting_threej && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p2 && $d.p2 == $b.base_point && $d.l_name == $c.n2 \
        && $e.p1 == $b.p1 && $e.p2 == $b.base_point && (N16_5(&$b,&$c)) && (N16_6(&$b)) && (N16_7(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e shadow_edge_label >
   given < e >
   query_16_g t5_e
   valid v5_e and negated_16
   curs16_g;

/**************************** rule #17: visit_threej_6 :
   (stage ^value  visiting_threej  )
   (junction ^name  <n> ^base_point  <bp> ^p1  <p1> ^p2  <p2> ^p3  <p3> ^visited  now  )
   (label ^name  <n> ^id  <id> ^n1  <n1> ^n2  <n2> ^n3  <n3>  )
   (edge_label ^p1  <p1> ^p2  <bp> ^l_name  <n1>  )
   - (edge_label ^p1  <bp> ^l_id  <id>  )
   - (edge_label ^p1  <p3> ^p2  <bp>  )
   - (edge_label ^p1  <p2> ^p2  <bp>  )
    -->  *******************************/

int n3_17;
int n2_17;
int n1_17;
int id_17;
int p3_17;
int p2_17;
int p1_17;
int bp_17;
int n_17;

cursor <cont_edge_label> where " $.p1 == bp_17 && $.l_id == id_17 "
   C17_5;
cursor <shadow_edge_label> where " $.p1 == bp_17 && $.l_id == id_17  && $._ts > dom_timestamp"
   S17_5;
cursor <cont_edge_label> where " $.p1 == p3_17 && $.p2 == bp_17 "
   C17_6;
cursor <shadow_edge_label> where " $.p1 == p3_17 && $.p2 == bp_17  && $._ts > dom_timestamp"
   S17_6;
cursor <cont_edge_label> where " $.p1 == p2_17 && $.p2 == bp_17 "
   C17_7;
cursor <shadow_edge_label> where " $.p1 == p2_17 && $.p2 == bp_17  && $._ts > dom_timestamp"
   S17_7;

BOOLEAN N17_5(  junction_cursor *b, label_cursor *c )
{
   id_17 = c->id;
   bp_17 = b->base_point;
   foreach(C17_5) { return FALSE; }
   foreach(S17_5) { return FALSE; }
   return TRUE;
}


BOOLEAN N17_6(  junction_cursor *b )
{
   p3_17 = b->p3;
   bp_17 = b->base_point;
   foreach(C17_6) { return FALSE; }
   foreach(S17_6) { return FALSE; }
   return TRUE;
}


BOOLEAN N17_7(  junction_cursor *b )
{
   p2_17 = b->p2;
   bp_17 = b->base_point;
   foreach(C17_7) { return FALSE; }
   foreach(S17_7) { return FALSE; }
   return TRUE;
}

#define query_17 where " $a.value == _visiting_threej && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p1 && $d.p2 == $b.base_point && $d.l_name == $c.n1 && (N17_5(&$b,&$c)) && (N17_6(&$b)) && (N17_7(&$b)) "

#define negated_17 " (N17_5(&$b,&$c))  &&  (N17_6(&$b))  &&  (N17_7(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label >
   given < a >
   query_17 t4_a
   valid v4_a  and negated_17
   curs17_a;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label >
   given < b >
   query_17 t4_b
   valid v4_b  and negated_17
   curs17_b;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label >
   given < c >
   query_17 t4_c
   valid v4_c  and negated_17
   curs17_c;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label >
   given < d >
   query_17 t4_d
   valid v4_d  and negated_17
   curs17_d;

#define query_17_e where " $a.value == _visiting_threej && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p1 && $d.p2 == $b.base_point && $d.l_name == $c.n1 \
        && $e.p1 == $b.base_point && $e.l_id == $c.id && (N17_5(&$b,&$c)) && (N17_6(&$b)) && (N17_7(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e shadow_edge_label >
   given < e >
   query_17_e t5_e
   valid v5_e and negated_17
   curs17_e;

#define query_17_f where " $a.value == _visiting_threej && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p1 && $d.p2 == $b.base_point && $d.l_name == $c.n1 \
        && $e.p1 == $b.p3 && $e.p2 == $b.base_point && (N17_5(&$b,&$c)) && (N17_6(&$b)) && (N17_7(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e shadow_edge_label >
   given < e >
   query_17_f t5_e
   valid v5_e and negated_17
   curs17_f;

#define query_17_g where " $a.value == _visiting_threej && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p1 && $d.p2 == $b.base_point && $d.l_name == $c.n1 \
        && $e.p1 == $b.p2 && $e.p2 == $b.base_point && (N17_5(&$b,&$c)) && (N17_6(&$b)) && (N17_7(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e shadow_edge_label >
   given < e >
   query_17_g t5_e
   valid v5_e and negated_17
   curs17_g;

/**************************** rule #18: visit_threej_7 :
   (stage ^value  visiting_threej  )
   (junction ^name  <n> ^base_point  <bp> ^p1  <p1> ^p2  <p2> ^p3  <p3> ^visited  now  )
   (label ^name  <n> ^id  <id> ^n1  <n1> ^n2  <n2> ^n3  <n3>  )
   - (edge_label ^p1  <bp> ^l_id  <id>  )
   - (edge_label ^p1  <p3> ^p2  <bp>  )
   - (edge_label ^p1  <p2> ^p2  <bp>  )
   - (edge_label ^p1  <p1> ^p2  <bp>  )
    -->  *******************************/

int n3_18;
int n2_18;
int n1_18;
int id_18;
int p3_18;
int p2_18;
int p1_18;
int bp_18;
int n_18;

cursor <cont_edge_label> where " $.p1 == bp_18 && $.l_id == id_18 "
   C18_4;
cursor <shadow_edge_label> where " $.p1 == bp_18 && $.l_id == id_18  && $._ts > dom_timestamp"
   S18_4;
cursor <cont_edge_label> where " $.p1 == p3_18 && $.p2 == bp_18 "
   C18_5;
cursor <shadow_edge_label> where " $.p1 == p3_18 && $.p2 == bp_18  && $._ts > dom_timestamp"
   S18_5;
cursor <cont_edge_label> where " $.p1 == p2_18 && $.p2 == bp_18 "
   C18_6;
cursor <shadow_edge_label> where " $.p1 == p2_18 && $.p2 == bp_18  && $._ts > dom_timestamp"
   S18_6;
cursor <cont_edge_label> where " $.p1 == p1_18 && $.p2 == bp_18 "
   C18_7;
cursor <shadow_edge_label> where " $.p1 == p1_18 && $.p2 == bp_18  && $._ts > dom_timestamp"
   S18_7;

BOOLEAN N18_4(  junction_cursor *b, label_cursor *c )
{
   id_18 = c->id;
   bp_18 = b->base_point;
   foreach(C18_4) { return FALSE; }
   foreach(S18_4) { return FALSE; }
   return TRUE;
}


BOOLEAN N18_5(  junction_cursor *b )
{
   p3_18 = b->p3;
   bp_18 = b->base_point;
   foreach(C18_5) { return FALSE; }
   foreach(S18_5) { return FALSE; }
   return TRUE;
}


BOOLEAN N18_6(  junction_cursor *b )
{
   p2_18 = b->p2;
   bp_18 = b->base_point;
   foreach(C18_6) { return FALSE; }
   foreach(S18_6) { return FALSE; }
   return TRUE;
}


BOOLEAN N18_7(  junction_cursor *b )
{
   p1_18 = b->p1;
   bp_18 = b->base_point;
   foreach(C18_7) { return FALSE; }
   foreach(S18_7) { return FALSE; }
   return TRUE;
}

#define query_18 where " $a.value == _visiting_threej && $b.visited == _now \
        && $c.name == $b.name && (N18_4(&$b,&$c)) && (N18_5(&$b)) && (N18_6(&$b)) && (N18_7(&$b)) "

#define negated_18 " (N18_4(&$b,&$c))  &&  (N18_5(&$b))  &&  (N18_6(&$b))  &&  (N18_7(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label >
   given < a >
   query_18 t3_a
   valid v3_a  and negated_18
   curs18_a;

typedef compcurs < a cont_stage, b cont_junction, c cont_label >
   given < b >
   query_18 t3_b
   valid v3_b  and negated_18
   curs18_b;

typedef compcurs < a cont_stage, b cont_junction, c cont_label >
   given < c >
   query_18 t3_c
   valid v3_c  and negated_18
   curs18_c;

#define query_18_d where " $a.value == _visiting_threej && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.base_point && $d.l_id == $c.id && (N18_4(&$b,&$c)) && (N18_5(&$b)) && (N18_6(&$b)) && (N18_7(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d shadow_edge_label >
   given < d >
   query_18_d t4_d
   valid v4_d and negated_18
   curs18_d;

#define query_18_e where " $a.value == _visiting_threej && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p3 && $d.p2 == $b.base_point && (N18_4(&$b,&$c)) && (N18_5(&$b)) && (N18_6(&$b)) && (N18_7(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d shadow_edge_label >
   given < d >
   query_18_e t4_d
   valid v4_d and negated_18
   curs18_e;

#define query_18_f where " $a.value == _visiting_threej && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p2 && $d.p2 == $b.base_point && (N18_4(&$b,&$c)) && (N18_5(&$b)) && (N18_6(&$b)) && (N18_7(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d shadow_edge_label >
   given < d >
   query_18_f t4_d
   valid v4_d and negated_18
   curs18_f;

#define query_18_g where " $a.value == _visiting_threej && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p1 && $d.p2 == $b.base_point && (N18_4(&$b,&$c)) && (N18_5(&$b)) && (N18_6(&$b)) && (N18_7(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d shadow_edge_label >
   given < d >
   query_18_g t4_d
   valid v4_d and negated_18
   curs18_g;

/**************************** rule #19: start_visit_2_junction :
   (stage ^value  labeling  )
   (junction ^base_point  <bp> ^type  twoj ^p1  <p1> ^p2  <p2> ^visited  no  )
    -->  *******************************/

int p2_19;
int p1_19;
int bp_19;

#define query_19 where " $a.value == _labeling && $b.type == _twoj && $b.visited == _no "

#define negated_19 ""

typedef compcurs < a cont_stage, b cont_junction >
   given < a >
   query_19 t2_a
   valid v2_a 
   curs19_a;

typedef compcurs < a cont_stage, b cont_junction >
   given < b >
   query_19 t2_b
   valid v2_b 
   curs19_b;

/**************************** rule #20: visit_twoj_0 :
   (stage ^value  visiting_twoj  )
   (junction ^name  <n> ^base_point  <bp> ^p1  <p1> ^p2  <p2> ^visited  now  )
   (label ^name  <n> ^id  <id> ^n1  <n1> ^n2  <n2>  )
   (edge_label ^p1  <p1> ^p2  <bp> ^l_name  <n1>  )
   (edge_label ^p1  <p2> ^p2  <bp> ^l_name  <n2>  )
   - (edge_label ^p1  <bp> ^l_id  <id>  )
    -->  *******************************/

int n2_20;
int n1_20;
int id_20;
int p2_20;
int p1_20;
int bp_20;
int n_20;

cursor <cont_edge_label> where " $.p1 == bp_20 && $.l_id == id_20 "
   C20_6;
cursor <shadow_edge_label> where " $.p1 == bp_20 && $.l_id == id_20  && $._ts > dom_timestamp"
   S20_6;

BOOLEAN N20_6(  junction_cursor *b, label_cursor *c )
{
   id_20 = c->id;
   bp_20 = b->base_point;
   foreach(C20_6) { return FALSE; }
   foreach(S20_6) { return FALSE; }
   return TRUE;
}

#define query_20 where " $a.value == _visiting_twoj && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p1 && $d.p2 == $b.base_point && $d.l_name == $c.n1 \
        && $e.p1 == $b.p2 && $e.p2 == $b.base_point && $e.l_name == $c.n2 && (N20_6(&$b,&$c)) "

#define negated_20 " (N20_6(&$b,&$c)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label >
   given < a >
   query_20 t5_a
   valid v5_a  and negated_20
   curs20_a;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label >
   given < b >
   query_20 t5_b
   valid v5_b  and negated_20
   curs20_b;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label >
   given < c >
   query_20 t5_c
   valid v5_c  and negated_20
   curs20_c;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label >
   given < d >
   query_20 t5_d
   valid v5_d  and negated_20
   curs20_d;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label >
   given < e >
   query_20 t5_e
   valid v5_e  and negated_20
   curs20_e;

#define query_20_f where " $a.value == _visiting_twoj && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p1 && $d.p2 == $b.base_point && $d.l_name == $c.n1 \
        && $e.p1 == $b.p2 && $e.p2 == $b.base_point && $e.l_name == $c.n2 \
        && $f.p1 == $b.base_point && $f.l_id == $c.id && (N20_6(&$b,&$c)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e cont_edge_label, f shadow_edge_label >
   given < f >
   query_20_f t6_f
   valid v6_f and negated_20
   curs20_f;

/**************************** rule #21: visit_twoj_1 :
   (stage ^value  visiting_twoj  )
   (junction ^name  <n> ^base_point  <bp> ^p1  <p1> ^p2  <p2> ^visited  now  )
   (label ^name  <n> ^id  <id> ^n1  <n1> ^n2  <n2>  )
   (edge_label ^p1  <p2> ^p2  <bp> ^l_name  <n2>  )
   - (edge_label ^p1  <bp> ^l_id  <id>  )
   - (edge_label ^p1  <p1> ^p2  <bp>  )
    -->  *******************************/

int n2_21;
int n1_21;
int id_21;
int p2_21;
int p1_21;
int bp_21;
int n_21;

cursor <cont_edge_label> where " $.p1 == bp_21 && $.l_id == id_21 "
   C21_5;
cursor <shadow_edge_label> where " $.p1 == bp_21 && $.l_id == id_21  && $._ts > dom_timestamp"
   S21_5;
cursor <cont_edge_label> where " $.p1 == p1_21 && $.p2 == bp_21 "
   C21_6;
cursor <shadow_edge_label> where " $.p1 == p1_21 && $.p2 == bp_21  && $._ts > dom_timestamp"
   S21_6;

BOOLEAN N21_5(  junction_cursor *b, label_cursor *c )
{
   id_21 = c->id;
   bp_21 = b->base_point;
   foreach(C21_5) { return FALSE; }
   foreach(S21_5) { return FALSE; }
   return TRUE;
}


BOOLEAN N21_6(  junction_cursor *b )
{
   p1_21 = b->p1;
   bp_21 = b->base_point;
   foreach(C21_6) { return FALSE; }
   foreach(S21_6) { return FALSE; }
   return TRUE;
}

#define query_21 where " $a.value == _visiting_twoj && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p2 && $d.p2 == $b.base_point && $d.l_name == $c.n2 && (N21_5(&$b,&$c)) && (N21_6(&$b)) "

#define negated_21 " (N21_5(&$b,&$c))  &&  (N21_6(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label >
   given < a >
   query_21 t4_a
   valid v4_a  and negated_21
   curs21_a;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label >
   given < b >
   query_21 t4_b
   valid v4_b  and negated_21
   curs21_b;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label >
   given < c >
   query_21 t4_c
   valid v4_c  and negated_21
   curs21_c;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label >
   given < d >
   query_21 t4_d
   valid v4_d  and negated_21
   curs21_d;

#define query_21_e where " $a.value == _visiting_twoj && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p2 && $d.p2 == $b.base_point && $d.l_name == $c.n2 \
        && $e.p1 == $b.base_point && $e.l_id == $c.id && (N21_5(&$b,&$c)) && (N21_6(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e shadow_edge_label >
   given < e >
   query_21_e t5_e
   valid v5_e and negated_21
   curs21_e;

#define query_21_f where " $a.value == _visiting_twoj && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p2 && $d.p2 == $b.base_point && $d.l_name == $c.n2 \
        && $e.p1 == $b.p1 && $e.p2 == $b.base_point && (N21_5(&$b,&$c)) && (N21_6(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e shadow_edge_label >
   given < e >
   query_21_f t5_e
   valid v5_e and negated_21
   curs21_f;

/**************************** rule #22: visit_twoj_2 :
   (stage ^value  visiting_twoj  )
   (junction ^name  <n> ^base_point  <bp> ^p1  <p1> ^p2  <p2> ^visited  now  )
   (label ^name  <n> ^id  <id> ^n1  <n1> ^n2  <n2>  )
   (edge_label ^p1  <p1> ^p2  <bp> ^l_name  <n1>  )
   - (edge_label ^p1  <bp> ^l_id  <id>  )
   - (edge_label ^p1  <p2> ^p2  <bp>  )
    -->  *******************************/

int n2_22;
int n1_22;
int id_22;
int p2_22;
int p1_22;
int bp_22;
int n_22;

cursor <cont_edge_label> where " $.p1 == bp_22 && $.l_id == id_22 "
   C22_5;
cursor <shadow_edge_label> where " $.p1 == bp_22 && $.l_id == id_22  && $._ts > dom_timestamp"
   S22_5;
cursor <cont_edge_label> where " $.p1 == p2_22 && $.p2 == bp_22 "
   C22_6;
cursor <shadow_edge_label> where " $.p1 == p2_22 && $.p2 == bp_22  && $._ts > dom_timestamp"
   S22_6;

BOOLEAN N22_5(  junction_cursor *b, label_cursor *c )
{
   id_22 = c->id;
   bp_22 = b->base_point;
   foreach(C22_5) { return FALSE; }
   foreach(S22_5) { return FALSE; }
   return TRUE;
}


BOOLEAN N22_6(  junction_cursor *b )
{
   p2_22 = b->p2;
   bp_22 = b->base_point;
   foreach(C22_6) { return FALSE; }
   foreach(S22_6) { return FALSE; }
   return TRUE;
}

#define query_22 where " $a.value == _visiting_twoj && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p1 && $d.p2 == $b.base_point && $d.l_name == $c.n1 && (N22_5(&$b,&$c)) && (N22_6(&$b)) "

#define negated_22 " (N22_5(&$b,&$c))  &&  (N22_6(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label >
   given < a >
   query_22 t4_a
   valid v4_a  and negated_22
   curs22_a;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label >
   given < b >
   query_22 t4_b
   valid v4_b  and negated_22
   curs22_b;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label >
   given < c >
   query_22 t4_c
   valid v4_c  and negated_22
   curs22_c;

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label >
   given < d >
   query_22 t4_d
   valid v4_d  and negated_22
   curs22_d;

#define query_22_e where " $a.value == _visiting_twoj && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p1 && $d.p2 == $b.base_point && $d.l_name == $c.n1 \
        && $e.p1 == $b.base_point && $e.l_id == $c.id && (N22_5(&$b,&$c)) && (N22_6(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e shadow_edge_label >
   given < e >
   query_22_e t5_e
   valid v5_e and negated_22
   curs22_e;

#define query_22_f where " $a.value == _visiting_twoj && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p1 && $d.p2 == $b.base_point && $d.l_name == $c.n1 \
        && $e.p1 == $b.p2 && $e.p2 == $b.base_point && (N22_5(&$b,&$c)) && (N22_6(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d cont_edge_label, e shadow_edge_label >
   given < e >
   query_22_f t5_e
   valid v5_e and negated_22
   curs22_f;

/**************************** rule #23: visit_twoj_3 :
   (stage ^value  visiting_twoj  )
   (junction ^name  <n> ^base_point  <bp> ^p1  <p1> ^p2  <p2> ^visited  now  )
   (label ^name  <n> ^id  <id> ^n1  <n1> ^n2  <n2>  )
   - (edge_label ^p1  <bp> ^l_id  <id>  )
   - (edge_label ^p1  <p2> ^p2  <bp>  )
   - (edge_label ^p1  <p1> ^p2  <bp>  )
    -->  *******************************/

int n2_23;
int n1_23;
int id_23;
int p2_23;
int p1_23;
int bp_23;
int n_23;

cursor <cont_edge_label> where " $.p1 == bp_23 && $.l_id == id_23 "
   C23_4;
cursor <shadow_edge_label> where " $.p1 == bp_23 && $.l_id == id_23  && $._ts > dom_timestamp"
   S23_4;
cursor <cont_edge_label> where " $.p1 == p2_23 && $.p2 == bp_23 "
   C23_5;
cursor <shadow_edge_label> where " $.p1 == p2_23 && $.p2 == bp_23  && $._ts > dom_timestamp"
   S23_5;
cursor <cont_edge_label> where " $.p1 == p1_23 && $.p2 == bp_23 "
   C23_6;
cursor <shadow_edge_label> where " $.p1 == p1_23 && $.p2 == bp_23  && $._ts > dom_timestamp"
   S23_6;

BOOLEAN N23_4(  junction_cursor *b, label_cursor *c )
{
   id_23 = c->id;
   bp_23 = b->base_point;
   foreach(C23_4) { return FALSE; }
   foreach(S23_4) { return FALSE; }
   return TRUE;
}


BOOLEAN N23_5(  junction_cursor *b )
{
   p2_23 = b->p2;
   bp_23 = b->base_point;
   foreach(C23_5) { return FALSE; }
   foreach(S23_5) { return FALSE; }
   return TRUE;
}


BOOLEAN N23_6(  junction_cursor *b )
{
   p1_23 = b->p1;
   bp_23 = b->base_point;
   foreach(C23_6) { return FALSE; }
   foreach(S23_6) { return FALSE; }
   return TRUE;
}

#define query_23 where " $a.value == _visiting_twoj && $b.visited == _now \
        && $c.name == $b.name && (N23_4(&$b,&$c)) && (N23_5(&$b)) && (N23_6(&$b)) "

#define negated_23 " (N23_4(&$b,&$c))  &&  (N23_5(&$b))  &&  (N23_6(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label >
   given < a >
   query_23 t3_a
   valid v3_a  and negated_23
   curs23_a;

typedef compcurs < a cont_stage, b cont_junction, c cont_label >
   given < b >
   query_23 t3_b
   valid v3_b  and negated_23
   curs23_b;

typedef compcurs < a cont_stage, b cont_junction, c cont_label >
   given < c >
   query_23 t3_c
   valid v3_c  and negated_23
   curs23_c;

#define query_23_d where " $a.value == _visiting_twoj && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.base_point && $d.l_id == $c.id && (N23_4(&$b,&$c)) && (N23_5(&$b)) && (N23_6(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d shadow_edge_label >
   given < d >
   query_23_d t4_d
   valid v4_d and negated_23
   curs23_d;

#define query_23_e where " $a.value == _visiting_twoj && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p2 && $d.p2 == $b.base_point && (N23_4(&$b,&$c)) && (N23_5(&$b)) && (N23_6(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d shadow_edge_label >
   given < d >
   query_23_e t4_d
   valid v4_d and negated_23
   curs23_e;

#define query_23_f where " $a.value == _visiting_twoj && $b.visited == _now \
        && $c.name == $b.name \
        && $d.p1 == $b.p1 && $d.p2 == $b.base_point && (N23_4(&$b,&$c)) && (N23_5(&$b)) && (N23_6(&$b)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_label, d shadow_edge_label >
   given < d >
   query_23_f t4_d
   valid v4_d and negated_23
   curs23_f;

/**************************** rule #24: end_visit :
   (stage ^value << visiting_threej  visiting_twoj >>  )
   (junction ^visited  now  )
    -->  *******************************/


#define query_24 where " (($a.value==_visiting_threej)||($a.value==_visiting_twoj)) && $b.visited == _now "

#define negated_24 ""

typedef compcurs < a cont_stage, b cont_junction >
   given < a >
   query_24 t2_a
   valid v2_a 
   curs24_a;

typedef compcurs < a cont_stage, b cont_junction >
   given < b >
   query_24 t2_b
   valid v2_b 
   curs24_b;

/**************************** rule #25: marking :
   (stage ^value  marking  )
   (junction ^base_point  <bp> ^visited  now  )
   (edge ^p1  <p> ^p2  <bp>  )
   (junction ^base_point  <p> ^visited  yes  )
    -->  *******************************/

int p_25;
int bp_25;

#define query_25 where " $a.value == _marking && $b.visited == _now \
        && $c.p2 == $b.base_point \
        && $d.base_point == $c.p1 && $d.visited == _yes "

#define negated_25 ""

typedef compcurs < a cont_stage, b cont_junction, c cont_edge, d cont_junction >
   given < a >
   query_25 t4_a
   valid v4_a 
   curs25_a;

typedef compcurs < a cont_stage, b cont_junction, c cont_edge, d cont_junction >
   given < b >
   query_25 t4_b
   valid v4_b 
   curs25_b;

typedef compcurs < a cont_stage, b cont_junction, c cont_edge, d cont_junction >
   given < c >
   query_25 t4_c
   valid v4_c 
   curs25_c;

typedef compcurs < a cont_stage, b cont_junction, c cont_edge, d cont_junction >
   given < d >
   query_25 t4_d
   valid v4_d 
   curs25_d;

/**************************** rule #26: stop_marking :
   (stage ^value  marking  )
   (junction ^base_point  <bp> ^visited  now  )
    -->  *******************************/

int bp_26;

#define query_26 where " $a.value == _marking && $b.visited == _now "

#define negated_26 ""

typedef compcurs < a cont_stage, b cont_junction >
   given < a >
   query_26 t2_a
   valid v2_a 
   curs26_a;

typedef compcurs < a cont_stage, b cont_junction >
   given < b >
   query_26 t2_b
   valid v2_b 
   curs26_b;

/**************************** rule #27: start_checking :
   (stage ^value  marking  )
    -->  *******************************/


#define query_27 where " $a.value == _marking "

#define negated_27 ""

typedef compcurs < a cont_stage >
   given < a >
   query_27
   curs27_a;

/**************************** rule #28: checking :
   (stage ^value  checking  )
   (junction ^base_point  <bp> ^visited  check  )
   (edge_label ^p1  <bp> ^p2  <p> ^l_name  <n> ^l_id  <id>  )
   (junction ^base_point  <p> ^visited  yes  )
   - (edge_label ^p1  <p> ^p2  <bp> ^l_name  <n>  )
    -->  *******************************/

int id_28;
int n_28;
int p_28;
int bp_28;

cursor <cont_edge_label> where " $.p1 == p_28 && $.p2 == bp_28 && $.l_name == n_28 "
   C28_5;
cursor <shadow_edge_label> where " $.p1 == p_28 && $.p2 == bp_28 && $.l_name == n_28  && $._ts > dom_timestamp"
   S28_5;

BOOLEAN N28_5(  junction_cursor *b, edge_label_cursor *c )
{
   n_28 = c->l_name;
   p_28 = c->p2;
   bp_28 = b->base_point;
   foreach(C28_5) { return FALSE; }
   foreach(S28_5) { return FALSE; }
   return TRUE;
}

#define query_28 where " $a.value == _checking && $b.visited == _check \
        && $c.p1 == $b.base_point \
        && $d.base_point == $c.p2 && $d.visited == _yes && (N28_5(&$b,&$c)) "

#define negated_28 " (N28_5(&$b,&$c)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_edge_label, d cont_junction >
   given < a >
   query_28 t4_a
   valid v4_a  and negated_28
   curs28_a;

typedef compcurs < a cont_stage, b cont_junction, c cont_edge_label, d cont_junction >
   given < b >
   query_28 t4_b
   valid v4_b  and negated_28
   curs28_b;

typedef compcurs < a cont_stage, b cont_junction, c cont_edge_label, d cont_junction >
   given < c >
   query_28 t4_c
   valid v4_c  and negated_28
   curs28_c;

typedef compcurs < a cont_stage, b cont_junction, c cont_edge_label, d cont_junction >
   given < d >
   query_28 t4_d
   valid v4_d  and negated_28
   curs28_d;

#define query_28_e where " $a.value == _checking && $b.visited == _check \
        && $c.p1 == $b.base_point \
        && $d.base_point == $c.p2 && $d.visited == _yes \
        && $e.p1 == $c.p2 && $e.p2 == $b.base_point && $e.l_name == $c.l_name && (N28_5(&$b,&$c)) "

typedef compcurs < a cont_stage, b cont_junction, c cont_edge_label, d cont_junction, e shadow_edge_label >
   given < e >
   query_28_e t5_e
   valid v5_e and negated_28
   curs28_e;

/**************************** rule #29: remove_label_threej :
   (stage ^value  remove_label  )
   (illegal ^bp  <bp> ^l_id  <id>  )
   (junction ^type  threej ^base_point  <bp> ^p1  <p1> ^p2  <p2> ^p3  <p3>  )
   (edge_label ^p1  <bp> ^p2  <p1> ^l_id  <id>  )
   (edge_label ^p1  <bp> ^p2  <p2> ^l_id  <id>  )
   (edge_label ^p1  <bp> ^p2  <p3> ^l_id  <id>  )
    -->  *******************************/

int p3_29;
int p2_29;
int p1_29;
int id_29;
int bp_29;

#define query_29 where " $a.value == _remove_label && $c.type == _threej && $c.base_point == $b.bp \
        && $d.p1 == $b.bp && $d.p2 == $c.p1 && $d.l_id == $b.l_id \
        && $e.p1 == $b.bp && $e.p2 == $c.p2 && $e.l_id == $b.l_id \
        && $f.p1 == $b.bp && $f.p2 == $c.p3 && $f.l_id == $b.l_id "

#define negated_29 ""

typedef compcurs < a cont_stage, b cont_illegal, c cont_junction, d cont_edge_label, e cont_edge_label, f cont_edge_label >
   given < a >
   query_29 t6_a
   valid v6_a 
   curs29_a;

typedef compcurs < a cont_stage, b cont_illegal, c cont_junction, d cont_edge_label, e cont_edge_label, f cont_edge_label >
   given < b >
   query_29 t6_b
   valid v6_b 
   curs29_b;

typedef compcurs < a cont_stage, b cont_illegal, c cont_junction, d cont_edge_label, e cont_edge_label, f cont_edge_label >
   given < c >
   query_29 t6_c
   valid v6_c 
   curs29_c;

typedef compcurs < a cont_stage, b cont_illegal, c cont_junction, d cont_edge_label, e cont_edge_label, f cont_edge_label >
   given < d >
   query_29 t6_d
   valid v6_d 
   curs29_d;

typedef compcurs < a cont_stage, b cont_illegal, c cont_junction, d cont_edge_label, e cont_edge_label, f cont_edge_label >
   given < e >
   query_29 t6_e
   valid v6_e 
   curs29_e;

typedef compcurs < a cont_stage, b cont_illegal, c cont_junction, d cont_edge_label, e cont_edge_label, f cont_edge_label >
   given < f >
   query_29 t6_f
   valid v6_f 
   curs29_f;

/**************************** rule #30: remove_edge_twoj :
   (stage ^value  remove_label  )
   (illegal ^bp  <bp> ^l_id  <id>  )
   (junction ^type  twoj ^base_point  <bp> ^p1  <p1> ^p2  <p2>  )
   (edge_label ^p1  <bp> ^p2  <p1> ^l_id  <id>  )
   (edge_label ^p1  <bp> ^p2  <p2> ^l_id  <id>  )
    -->  *******************************/

int p2_30;
int p1_30;
int id_30;
int bp_30;

#define query_30 where " $a.value == _remove_label && $c.type == _twoj && $c.base_point == $b.bp \
        && $d.p1 == $b.bp && $d.p2 == $c.p1 && $d.l_id == $b.l_id \
        && $e.p1 == $b.bp && $e.p2 == $c.p2 && $e.l_id == $b.l_id "

#define negated_30 ""

typedef compcurs < a cont_stage, b cont_illegal, c cont_junction, d cont_edge_label, e cont_edge_label >
   given < a >
   query_30 t5_a
   valid v5_a 
   curs30_a;

typedef compcurs < a cont_stage, b cont_illegal, c cont_junction, d cont_edge_label, e cont_edge_label >
   given < b >
   query_30 t5_b
   valid v5_b 
   curs30_b;

typedef compcurs < a cont_stage, b cont_illegal, c cont_junction, d cont_edge_label, e cont_edge_label >
   given < c >
   query_30 t5_c
   valid v5_c 
   curs30_c;

typedef compcurs < a cont_stage, b cont_illegal, c cont_junction, d cont_edge_label, e cont_edge_label >
   given < d >
   query_30 t5_d
   valid v5_d 
   curs30_d;

typedef compcurs < a cont_stage, b cont_illegal, c cont_junction, d cont_edge_label, e cont_edge_label >
   given < e >
   query_30 t5_e
   valid v5_e 
   curs30_e;

/**************************** rule #31: checking :
   (stage ^value  checking  )
   (junction ^base_point  <bp> ^visited  check  )
    -->  *******************************/

int bp_31;

#define query_31 where " $a.value == _checking && $b.visited == _check "

#define negated_31 ""

typedef compcurs < a cont_stage, b cont_junction >
   given < a >
   query_31 t2_a
   valid v2_a 
   curs31_a;

typedef compcurs < a cont_stage, b cont_junction >
   given < b >
   query_31 t2_b
   valid v2_b 
   curs31_b;

/**************************** rule #32: stop_checking :
   (stage ^value  checking  )
    -->  *******************************/


#define query_32 where " $a.value == _checking "

#define negated_32 ""

typedef compcurs < a cont_stage >
   given < a >
   query_32
   curs32_a;

/**************************** rule #33: done_labeling :
   (stage ^value  labeling  )
    -->  *******************************/


#define query_33 where " $a.value == _labeling "

#define negated_33 ""

typedef compcurs < a cont_stage >
   given < a >
   query_33
   curs33_a;

/**************************** rule #34: printing_edge_label :
   (stage ^value  printing  )
   (edge_label ^p1  <p1> ^p2  <p2> ^l_name  <n> ^l_id  <id>  )
    -->  *******************************/

int id_34;
int n_34;
int p2_34;
int p1_34;

#define query_34 where " $a.value == _printing "

#define negated_34 ""

typedef compcurs < a cont_stage, b cont_edge_label >
   given < a >
   query_34 t2_a
   valid v2_a 
   curs34_a;

typedef compcurs < a cont_stage, b cont_edge_label >
   given < b >
   query_34 t2_b
   valid v2_b 
   curs34_b;

/**************************** rule #35: printing_edge :
   (stage ^value  printing  )
   (edge ^type  <t> ^p1  <p1> ^p2  <p2> ^joined  <j>  )
    -->  *******************************/

int j_35;
int p2_35;
int p1_35;
int t_35;

#define query_35 where " $a.value == _printing "

#define negated_35 ""

typedef compcurs < a cont_stage, b cont_edge >
   given < a >
   query_35 t2_a
   valid v2_a 
   curs35_a;

typedef compcurs < a cont_stage, b cont_edge >
   given < b >
   query_35 t2_b
   valid v2_b 
   curs35_b;

/**************************** rule #36: printing_junction :
   (stage ^value  printing  )
   (junction ^p1  <p1> ^p2  <p2> ^p3  <p3> ^base_point  <bp> ^type  <t> ^name  <n> ^visited  <v>  )
    -->  *******************************/

int v_36;
int n_36;
int t_36;
int bp_36;
int p3_36;
int p2_36;
int p1_36;

#define query_36 where " $a.value == _printing "

#define negated_36 ""

typedef compcurs < a cont_stage, b cont_junction >
   given < a >
   query_36 t2_a
   valid v2_a 
   curs36_a;

typedef compcurs < a cont_stage, b cont_junction >
   given < b >
   query_36 t2_b
   valid v2_b 
   curs36_b;

/**************************** rule #37: printing_label :
   (stage ^value  printing  )
   (label ^id  <id> ^type  <t> ^name  <n> ^n1  <n1> ^n2  <n2> ^n3  <n3>  )
    -->  *******************************/

int n3_37;
int n2_37;
int n1_37;
int n_37;
int t_37;
int id_37;

#define query_37 where " $a.value == _printing "

#define negated_37 ""

typedef compcurs < a cont_stage, b cont_label >
   given < a >
   query_37 t2_a
   valid v2_a 
   curs37_a;

typedef compcurs < a cont_stage, b cont_label >
   given < b >
   query_37 t2_b
   valid v2_b 
   curs37_b;

/**************************** rule #38: printing_illegal :
   (stage ^value  printing  )
   (illegal ^bp  <bp> ^l_id  <id>  )
    -->  *******************************/

int id_38;
int bp_38;

#define query_38 where " $a.value == _printing "

#define negated_38 ""

typedef compcurs < a cont_stage, b cont_illegal >
   given < a >
   query_38 t2_a
   valid v2_a 
   curs38_a;

typedef compcurs < a cont_stage, b cont_illegal >
   given < b >
   query_38 t2_b
   valid v2_b 
   curs38_b;


/********* avail list declarations ****************/

curs1_a **curs1_a_list = 0;
curs1_b **curs1_b_list = 0;
curs2_a **curs2_a_list = 0;
curs2_b **curs2_b_list = 0;
curs3_a **curs3_a_list = 0;
curs3_b **curs3_b_list = 0;
curs3_c **curs3_c_list = 0;
curs3_d **curs3_d_list = 0;
curs4_a **curs4_a_list = 0;
curs4_b **curs4_b_list = 0;
curs4_c **curs4_c_list = 0;
curs4_d **curs4_d_list = 0;
curs5_a **curs5_a_list = 0;
curs5_b **curs5_b_list = 0;
curs6_a **curs6_a_list = 0;
curs6_b **curs6_b_list = 0;
curs6_c **curs6_c_list = 0;
curs6_d **curs6_d_list = 0;
curs6_e **curs6_e_list = 0;
curs7_a **curs7_a_list = 0;
curs7_b **curs7_b_list = 0;
curs7_c **curs7_c_list = 0;
curs7_d **curs7_d_list = 0;
curs7_e **curs7_e_list = 0;
curs7_f **curs7_f_list = 0;
curs8_a **curs8_a_list = 0;
curs8_b **curs8_b_list = 0;
curs8_c **curs8_c_list = 0;
curs8_d **curs8_d_list = 0;
curs8_e **curs8_e_list = 0;
curs9_a **curs9_a_list = 0;
curs9_b **curs9_b_list = 0;
curs9_c **curs9_c_list = 0;
curs9_d **curs9_d_list = 0;
curs9_e **curs9_e_list = 0;
curs9_f **curs9_f_list = 0;
curs10_a **curs10_a_list = 0;
curs10_b **curs10_b_list = 0;
curs11_a **curs11_a_list = 0;
curs11_b **curs11_b_list = 0;
curs11_c **curs11_c_list = 0;
curs11_d **curs11_d_list = 0;
curs11_e **curs11_e_list = 0;
curs11_f **curs11_f_list = 0;
curs11_g **curs11_g_list = 0;
curs12_a **curs12_a_list = 0;
curs12_b **curs12_b_list = 0;
curs12_c **curs12_c_list = 0;
curs12_d **curs12_d_list = 0;
curs12_e **curs12_e_list = 0;
curs12_f **curs12_f_list = 0;
curs12_g **curs12_g_list = 0;
curs13_a **curs13_a_list = 0;
curs13_b **curs13_b_list = 0;
curs13_c **curs13_c_list = 0;
curs13_d **curs13_d_list = 0;
curs13_e **curs13_e_list = 0;
curs13_f **curs13_f_list = 0;
curs13_g **curs13_g_list = 0;
curs14_a **curs14_a_list = 0;
curs14_b **curs14_b_list = 0;
curs14_c **curs14_c_list = 0;
curs14_d **curs14_d_list = 0;
curs14_e **curs14_e_list = 0;
curs14_f **curs14_f_list = 0;
curs14_g **curs14_g_list = 0;
curs15_a **curs15_a_list = 0;
curs15_b **curs15_b_list = 0;
curs15_c **curs15_c_list = 0;
curs15_d **curs15_d_list = 0;
curs15_e **curs15_e_list = 0;
curs15_f **curs15_f_list = 0;
curs15_g **curs15_g_list = 0;
curs16_a **curs16_a_list = 0;
curs16_b **curs16_b_list = 0;
curs16_c **curs16_c_list = 0;
curs16_d **curs16_d_list = 0;
curs16_e **curs16_e_list = 0;
curs16_f **curs16_f_list = 0;
curs16_g **curs16_g_list = 0;
curs17_a **curs17_a_list = 0;
curs17_b **curs17_b_list = 0;
curs17_c **curs17_c_list = 0;
curs17_d **curs17_d_list = 0;
curs17_e **curs17_e_list = 0;
curs17_f **curs17_f_list = 0;
curs17_g **curs17_g_list = 0;
curs18_a **curs18_a_list = 0;
curs18_b **curs18_b_list = 0;
curs18_c **curs18_c_list = 0;
curs18_d **curs18_d_list = 0;
curs18_e **curs18_e_list = 0;
curs18_f **curs18_f_list = 0;
curs18_g **curs18_g_list = 0;
curs19_a **curs19_a_list = 0;
curs19_b **curs19_b_list = 0;
curs20_a **curs20_a_list = 0;
curs20_b **curs20_b_list = 0;
curs20_c **curs20_c_list = 0;
curs20_d **curs20_d_list = 0;
curs20_e **curs20_e_list = 0;
curs20_f **curs20_f_list = 0;
curs21_a **curs21_a_list = 0;
curs21_b **curs21_b_list = 0;
curs21_c **curs21_c_list = 0;
curs21_d **curs21_d_list = 0;
curs21_e **curs21_e_list = 0;
curs21_f **curs21_f_list = 0;
curs22_a **curs22_a_list = 0;
curs22_b **curs22_b_list = 0;
curs22_c **curs22_c_list = 0;
curs22_d **curs22_d_list = 0;
curs22_e **curs22_e_list = 0;
curs22_f **curs22_f_list = 0;
curs23_a **curs23_a_list = 0;
curs23_b **curs23_b_list = 0;
curs23_c **curs23_c_list = 0;
curs23_d **curs23_d_list = 0;
curs23_e **curs23_e_list = 0;
curs23_f **curs23_f_list = 0;
curs24_a **curs24_a_list = 0;
curs24_b **curs24_b_list = 0;
curs25_a **curs25_a_list = 0;
curs25_b **curs25_b_list = 0;
curs25_c **curs25_c_list = 0;
curs25_d **curs25_d_list = 0;
curs26_a **curs26_a_list = 0;
curs26_b **curs26_b_list = 0;
curs27_a **curs27_a_list = 0;
curs28_a **curs28_a_list = 0;
curs28_b **curs28_b_list = 0;
curs28_c **curs28_c_list = 0;
curs28_d **curs28_d_list = 0;
curs28_e **curs28_e_list = 0;
curs29_a **curs29_a_list = 0;
curs29_b **curs29_b_list = 0;
curs29_c **curs29_c_list = 0;
curs29_d **curs29_d_list = 0;
curs29_e **curs29_e_list = 0;
curs29_f **curs29_f_list = 0;
curs30_a **curs30_a_list = 0;
curs30_b **curs30_b_list = 0;
curs30_c **curs30_c_list = 0;
curs30_d **curs30_d_list = 0;
curs30_e **curs30_e_list = 0;
curs31_a **curs31_a_list = 0;
curs31_b **curs31_b_list = 0;
curs32_a **curs32_a_list = 0;
curs33_a **curs33_a_list = 0;
curs34_a **curs34_a_list = 0;
curs34_b **curs34_b_list = 0;
curs35_a **curs35_a_list = 0;
curs35_b **curs35_b_list = 0;
curs36_a **curs36_a_list = 0;
curs36_b **curs36_b_list = 0;
curs37_a **curs37_a_list = 0;
curs37_b **curs37_b_list = 0;
curs38_a **curs38_a_list = 0;
curs38_b **curs38_b_list = 0;




/************* generated valid functions **********************/

BOOLEAN valid_stage( void *o ) {
   pos(a_stage, o);
   return( !is_deleted(a_stage) );
}

BOOLEAN valid_line( void *o ) {
   pos(a_line, o);
   return( !is_deleted(a_line) );
}

BOOLEAN valid_shadow_line( void *o ) {
   pos(a_shadow_line, o);
   return( !is_deleted(a_shadow_line) );
}

BOOLEAN valid_edge( void *o ) {
   pos(a_edge, o);
   return( !is_deleted(a_edge) );
}

BOOLEAN valid_shadow_edge( void *o ) {
   pos(a_shadow_edge, o);
   return( !is_deleted(a_shadow_edge) );
}

BOOLEAN valid_edge_label( void *o ) {
   pos(a_edge_label, o);
   return( !is_deleted(a_edge_label) );
}

BOOLEAN valid_shadow_edge_label( void *o ) {
   pos(a_shadow_edge_label, o);
   return( !is_deleted(a_shadow_edge_label) );
}

BOOLEAN valid_junction( void *o ) {
   pos(a_junction, o);
   return( !is_deleted(a_junction) );
}

BOOLEAN valid_shadow_junction( void *o ) {
   pos(a_shadow_junction, o);
   return( !is_deleted(a_shadow_junction) );
}

BOOLEAN valid_label( void *o ) {
   pos(a_label, o);
   return( !is_deleted(a_label) );
}

BOOLEAN valid_illegal( void *o ) {
   pos(a_illegal, o);
   return( !is_deleted(a_illegal) );
}



BOOL_FUNC_PTR valid_vect[ ] = { 0, valid_stage, valid_line, valid_shadow_line, valid_edge, valid_shadow_edge, valid_edge_label, valid_shadow_edge_label, valid_junction, valid_shadow_junction, valid_label, valid_illegal, 0 };


/*************** fire rule procs *****************/

/**************************** rule reverse_edges :
   (stage ^value  duplicate  )
   (line ^p1  <p1> ^p2  <p2>  )
    -->  *******************************/

void fire_rule1( stage_cursor *a, line_cursor *b )
{
   /** (make edge ^p1  <p1> ^p2  <p2> ^joined  false ) **/
   { edge r;
     r.type = _nil;
     r.p1 =  b->p1;
     r.p2 =  b->p2;
     r.joined = _false;
     r._ts =  global_counter++;
     insert_edge(&r);
   }

   /** (make edge ^p1  <p2> ^p2  <p1> ^joined  false ) **/
   { edge r;
     r.type = _nil;
     r.p1 =  b->p2;
     r.p2 =  b->p1;
     r.joined = _false;
     r._ts =  global_counter++;
     insert_edge(&r);
   }

   /** (remove 2 -- line -- ) **/
   {  line r;
      getrec(*b,r);
      r._ts =  global_counter++;
      insert_shadow_line(&r);
   }
   b->_ts = global_counter;
   delete_line(b);

}

/**************************** rule done_reversing :
   (stage ^value  duplicate  )
   - (line  )
    -->  *******************************/

void fire_rule2( stage_cursor *a )
{
   /** (modify 1 -- stage -- ^value  detect_junctions) **/
   {  stage r;
      global_counter++;
      getrec(*a,r);
      r.value = _detect_junctions;
      r._ts =  global_counter++;
      insert_stage(&r);
      a->_ts = global_counter;
      delete_stage(a);
   }

}

/**************************** rule make_3_junction :
   (stage ^value  detect_junctions  )
   (edge ^p1  <base_point> ^p2  <p1> ^joined  false  )
   (edge ^p1  <base_point> ^p2  <p2> ^p2 <> <p1> ^joined  false  )
   (edge ^p1  <base_point> ^p2  <p3> ^p2 <> <p1> ^p2 <> <p2> ^joined  false  )
    -->  *******************************/

void fire_rule3( stage_cursor *a, edge_cursor *b, edge_cursor *c, edge_cursor *d )
{
   /** (make junction ^type  threej ^name  make_3_junction( b->p1, b->p2, c->p2, d->p2, &r ) ^base_point  <base_point> ^visited  no ) **/
   { junction r;
     r.p1 = NILVAL;
     r.p2 = NILVAL;
     r.p3 = NILVAL;
     r.base_point =  b->p1;
     r.type = _threej;
     r.name =  make_3_junction( b->p1, b->p2, c->p2, d->p2, &r );
     r.visited = _no;
     r._ts =  global_counter++;
     insert_junction(&r);
   }

   /** (modify 2 -- edge -- ^type  threej ^joined  true) **/
   {  edge r;
      getrec(*b,r);
      r._ts =  global_counter++;
      insert_shadow_edge(&r);
      r.type = _threej;
      r.joined = _true;
      r._ts =  global_counter++;
      insert_edge(&r);
      b->_ts = global_counter;
      delete_edge(b);
   }

   /** (modify 3 -- edge -- ^type  threej ^joined  true) **/
   {  edge r;
      getrec(*c,r);
      r._ts =  global_counter++;
      insert_shadow_edge(&r);
      r.type = _threej;
      r.joined = _true;
      r._ts =  global_counter++;
      insert_edge(&r);
      c->_ts = global_counter;
      delete_edge(c);
   }

   /** (modify 4 -- edge -- ^type  threej ^joined  true) **/
   {  edge r;
      getrec(*d,r);
      r._ts =  global_counter++;
      insert_shadow_edge(&r);
      r.type = _threej;
      r.joined = _true;
      r._ts =  global_counter++;
      insert_edge(&r);
      d->_ts = global_counter;
      delete_edge(d);
   }

}

/**************************** rule make_L :
   (stage ^value  detect_junctions  )
   (edge ^p1  <base_point> ^p2  <p2> ^joined  false  )
   (edge ^p1  <base_point> ^p2  <p3> ^p2 <> <p2> ^joined  false  )
   - (edge ^p1  <base_point> ^p2 <> <p2> ^p2 <> <p3>  )
    -->  *******************************/

void fire_rule4( stage_cursor *a, edge_cursor *b, edge_cursor *c )
{
   /** (make junction ^type  twoj ^name  L ^base_point  <base_point> ^p1  <p2> ^p2  <p3> ^visited  no ) **/
   { junction r;
     r.p1 =  b->p2;
     r.p2 =  c->p2;
     r.p3 = NILVAL;
     r.base_point =  b->p1;
     r.type = _twoj;
     r.name = _L;
     r.visited = _no;
     r._ts =  global_counter++;
     insert_junction(&r);
   }

   /** (modify 2 -- edge -- ^type  twoj ^joined  true) **/
   {  edge r;
      getrec(*b,r);
      r._ts =  global_counter++;
      insert_shadow_edge(&r);
      r.type = _twoj;
      r.joined = _true;
      r._ts =  global_counter++;
      insert_edge(&r);
      b->_ts = global_counter;
      delete_edge(b);
   }

   /** (modify 3 -- edge -- ^type  twoj ^joined  true) **/
   {  edge r;
      getrec(*c,r);
      r._ts =  global_counter++;
      insert_shadow_edge(&r);
      r.type = _twoj;
      r.joined = _true;
      r._ts =  global_counter++;
      insert_edge(&r);
      c->_ts = global_counter;
      delete_edge(c);
   }

}

/**************************** rule done_detecting :
   (stage ^value  detect_junctions  )
   - (edge ^joined  false  )
    -->  *******************************/

void fire_rule5( stage_cursor *a )
{
   /** (modify 1 -- stage -- ^value  find_initial_boundary) **/
   {  stage r;
      global_counter++;
      getrec(*a,r);
      r.value = _find_initial_boundary;
      r._ts =  global_counter++;
      insert_stage(&r);
      a->_ts = global_counter;
      delete_stage(a);
   }

}

/**************************** rule initial_boundary_junction_L :
   (stage ^value  find_initial_boundary  )
   (junction ^type  twoj ^base_point  <bp> ^p1  <p1> ^p2  <p2>  )
   (edge ^p1  <bp> ^p2  <p1>  )
   (edge ^p1  <bp> ^p2  <p2>  )
   - (junction ^base_point > <bp>  )
    -->  *******************************/

void fire_rule6( stage_cursor *a, junction_cursor *b, edge_cursor *c, edge_cursor *d )
{
   /** (modify 2 -- junction -- ^visited  yes) **/
   {  junction r;
      getrec(*b,r);
      r._ts =  global_counter++;
      insert_shadow_junction(&r);
      r.visited = _yes;
      r._ts =  global_counter++;
      insert_junction(&r);
      b->_ts = global_counter;
      delete_junction(b);
   }

   /** (make edge_label ^p1  <bp> ^p2  <p1> ^l_name  B ^l_id  1 ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p1;
     r.l_name = _B;
     r.l_id =  1;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

   /** (make edge_label ^p1  <bp> ^p2  <p2> ^l_name  B ^l_id  1 ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p2;
     r.l_name = _B;
     r.l_id =  1;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

   /** (modify 1 -- stage -- ^value  find_second_boundary) **/
   {  stage r;
      global_counter++;
      getrec(*a,r);
      r.value = _find_second_boundary;
      r._ts =  global_counter++;
      insert_stage(&r);
      a->_ts = global_counter;
      delete_stage(a);
   }

}

/**************************** rule initial_boundary_junction_arrow :
   (stage ^value  find_initial_boundary  )
   (junction ^type  threej ^name  arrow ^base_point  <bp> ^p1  <p1> ^p2  <p2> ^p3  <p3>  )
   (edge ^p1  <bp> ^p2  <p1>  )
   (edge ^p1  <bp> ^p2  <p2>  )
   (edge ^p1  <bp> ^p2  <p3>  )
   - (junction ^base_point > <bp>  )
    -->  *******************************/

void fire_rule7( stage_cursor *a, junction_cursor *b, edge_cursor *c, edge_cursor *d, edge_cursor *e )
{
   /** (modify 2 -- junction -- ^visited  yes) **/
   {  junction r;
      getrec(*b,r);
      r._ts =  global_counter++;
      insert_shadow_junction(&r);
      r.visited = _yes;
      r._ts =  global_counter++;
      insert_junction(&r);
      b->_ts = global_counter;
      delete_junction(b);
   }

   /** (make edge_label ^p1  <bp> ^p2  <p1> ^l_name  B ^l_id  14 ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p1;
     r.l_name = _B;
     r.l_id =  14;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

   /** (make edge_label ^p1  <bp> ^p2  <p2> ^l_name  PL ^l_id  14 ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p2;
     r.l_name = _PL;
     r.l_id =  14;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

   /** (make edge_label ^p1  <bp> ^p2  <p3> ^l_name  B ^l_id  14 ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p3;
     r.l_name = _B;
     r.l_id =  14;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

   /** (modify 1 -- stage -- ^value  find_second_boundary) **/
   {  stage r;
      global_counter++;
      getrec(*a,r);
      r.value = _find_second_boundary;
      r._ts =  global_counter++;
      insert_stage(&r);
      a->_ts = global_counter;
      delete_stage(a);
   }

}

/**************************** rule second_boundary_junction_L :
   (stage ^value  find_second_boundary  )
   (junction ^type  twoj ^base_point  <bp> ^p1  <p1> ^p2  <p2>  )
   (edge ^p1  <bp> ^p2  <p1>  )
   (edge ^p1  <bp> ^p2  <p2>  )
   - (junction ^base_point < <bp>  )
    -->  *******************************/

void fire_rule8( stage_cursor *a, junction_cursor *b, edge_cursor *c, edge_cursor *d )
{
   /** (modify 2 -- junction -- ^visited  yes) **/
   {  junction r;
      getrec(*b,r);
      r._ts =  global_counter++;
      insert_shadow_junction(&r);
      r.visited = _yes;
      r._ts =  global_counter++;
      insert_junction(&r);
      b->_ts = global_counter;
      delete_junction(b);
   }

   /** (make edge_label ^p1  <bp> ^p2  <p1> ^l_name  B ^l_id  1 ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p1;
     r.l_name = _B;
     r.l_id =  1;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

   /** (make edge_label ^p1  <bp> ^p2  <p2> ^l_name  B ^l_id  1 ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p2;
     r.l_name = _B;
     r.l_id =  1;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

   /** (modify 1 -- stage -- ^value  labeling) **/
   {  stage r;
      global_counter++;
      getrec(*a,r);
      r.value = _labeling;
      r._ts =  global_counter++;
      insert_stage(&r);
      a->_ts = global_counter;
      delete_stage(a);
   }

}

/**************************** rule second_boundary_junction_arrow :
   (stage ^value  find_second_boundary  )
   (junction ^type  threej ^name  arrow ^base_point  <bp> ^p1  <p1> ^p2  <p2> ^p3  <p3>  )
   (edge ^p1  <bp> ^p2  <p1>  )
   (edge ^p1  <bp> ^p2  <p2>  )
   (edge ^p1  <bp> ^p2  <p3>  )
   - (junction ^base_point < <bp>  )
    -->  *******************************/

void fire_rule9( stage_cursor *a, junction_cursor *b, edge_cursor *c, edge_cursor *d, edge_cursor *e )
{
   /** (modify 2 -- junction -- ^visited  yes) **/
   {  junction r;
      getrec(*b,r);
      r._ts =  global_counter++;
      insert_shadow_junction(&r);
      r.visited = _yes;
      r._ts =  global_counter++;
      insert_junction(&r);
      b->_ts = global_counter;
      delete_junction(b);
   }

   /** (make edge_label ^p1  <bp> ^p2  <p1> ^l_name  B ^l_id  14 ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p1;
     r.l_name = _B;
     r.l_id =  14;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

   /** (make edge_label ^p1  <bp> ^p2  <p2> ^l_name  PL ^l_id  14 ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p2;
     r.l_name = _PL;
     r.l_id =  14;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

   /** (make edge_label ^p1  <bp> ^p2  <p3> ^l_name  B ^l_id  14 ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p3;
     r.l_name = _B;
     r.l_id =  14;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

   /** (modify 1 -- stage -- ^value  labeling) **/
   {  stage r;
      global_counter++;
      getrec(*a,r);
      r.value = _labeling;
      r._ts =  global_counter++;
      insert_stage(&r);
      a->_ts = global_counter;
      delete_stage(a);
   }

}

/**************************** rule start_visit_3_junction :
   (stage ^value  labeling  )
   (junction ^base_point  <bp> ^type  threej ^p1  <p1> ^p2  <p2> ^p3  <p3> ^visited  no  )
    -->  *******************************/

void fire_rule10( stage_cursor *a, junction_cursor *b )
{
   /** (modify 1 -- stage -- ^value  visiting_threej) **/
   {  stage r;
      global_counter++;
      getrec(*a,r);
      r.value = _visiting_threej;
      r._ts =  global_counter++;
      insert_stage(&r);
      a->_ts = global_counter;
      delete_stage(a);
   }

   /** (modify 2 -- junction -- ^visited  now) **/
   {  junction r;
      getrec(*b,r);
      r._ts =  global_counter++;
      insert_shadow_junction(&r);
      r.visited = _now;
      r._ts =  global_counter++;
      insert_junction(&r);
      b->_ts = global_counter;
      delete_junction(b);
   }

}

/**************************** rule visit_threej_0 :
   (stage ^value  visiting_threej  )
   (junction ^name  <n> ^base_point  <bp> ^p1  <p1> ^p2  <p2> ^p3  <p3> ^visited  now  )
   (label ^name  <n> ^id  <id> ^n1  <n1> ^n2  <n2> ^n3  <n3>  )
   (edge_label ^p1  <p1> ^p2  <bp> ^l_name  <n1>  )
   (edge_label ^p1  <p2> ^p2  <bp> ^l_name  <n2>  )
   (edge_label ^p1  <p3> ^p2  <bp> ^l_name  <n3>  )
   - (edge_label ^p1  <bp> ^l_id  <id>  )
    -->  *******************************/

void fire_rule11( stage_cursor *a, junction_cursor *b, label_cursor *c, edge_label_cursor *d, edge_label_cursor *e, edge_label_cursor *f )
{
   /** (make edge_label ^p1  <bp> ^p2  <p1> ^l_name  <n1> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p1;
     r.l_name =  c->n1;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

   /** (make edge_label ^p1  <bp> ^p2  <p2> ^l_name  <n2> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p2;
     r.l_name =  c->n2;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

   /** (make edge_label ^p1  <bp> ^p2  <p3> ^l_name  <n3> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p3;
     r.l_name =  c->n3;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

}

/**************************** rule visit_threej_1 :
   (stage ^value  visiting_threej  )
   (junction ^name  <n> ^base_point  <bp> ^p1  <p1> ^p2  <p2> ^p3  <p3> ^visited  now  )
   (label ^name  <n> ^id  <id> ^n1  <n1> ^n2  <n2> ^n3  <n3>  )
   (edge_label ^p1  <p2> ^p2  <bp> ^l_name  <n2>  )
   (edge_label ^p1  <p3> ^p2  <bp> ^l_name  <n3>  )
   - (edge_label ^p1  <bp> ^l_id  <id>  )
   - (edge_label ^p1  <p1> ^p2  <bp>  )
    -->  *******************************/

void fire_rule12( stage_cursor *a, junction_cursor *b, label_cursor *c, edge_label_cursor *d, edge_label_cursor *e )
{
   /** (make edge_label ^p1  <bp> ^p2  <p1> ^l_name  <n1> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p1;
     r.l_name =  c->n1;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

   /** (make edge_label ^p1  <bp> ^p2  <p2> ^l_name  <n2> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p2;
     r.l_name =  c->n2;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

   /** (make edge_label ^p1  <bp> ^p2  <p3> ^l_name  <n3> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p3;
     r.l_name =  c->n3;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

}

/**************************** rule visit_threej_2 :
   (stage ^value  visiting_threej  )
   (junction ^name  <n> ^base_point  <bp> ^p1  <p1> ^p2  <p2> ^p3  <p3> ^visited  now  )
   (label ^name  <n> ^id  <id> ^n1  <n1> ^n2  <n2> ^n3  <n3>  )
   (edge_label ^p1  <p1> ^p2  <bp> ^l_name  <n1>  )
   (edge_label ^p1  <p3> ^p2  <bp> ^l_name  <n3>  )
   - (edge_label ^p1  <bp> ^l_id  <id>  )
   - (edge_label ^p1  <p2> ^p2  <bp>  )
    -->  *******************************/

void fire_rule13( stage_cursor *a, junction_cursor *b, label_cursor *c, edge_label_cursor *d, edge_label_cursor *e )
{
   /** (make edge_label ^p1  <bp> ^p2  <p1> ^l_name  <n1> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p1;
     r.l_name =  c->n1;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

   /** (make edge_label ^p1  <bp> ^p2  <p2> ^l_name  <n2> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p2;
     r.l_name =  c->n2;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

   /** (make edge_label ^p1  <bp> ^p2  <p3> ^l_name  <n3> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p3;
     r.l_name =  c->n3;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

}

/**************************** rule visit_threej_3 :
   (stage ^value  visiting_threej  )
   (junction ^name  <n> ^base_point  <bp> ^p1  <p1> ^p2  <p2> ^p3  <p3> ^visited  now  )
   (label ^name  <n> ^id  <id> ^n1  <n1> ^n2  <n2> ^n3  <n3>  )
   (edge_label ^p1  <p3> ^p2  <bp> ^l_name  <n3>  )
   - (edge_label ^p1  <bp> ^l_id  <id>  )
   - (edge_label ^p1  <p2> ^p2  <bp>  )
   - (edge_label ^p1  <p1> ^p2  <bp>  )
    -->  *******************************/

void fire_rule14( stage_cursor *a, junction_cursor *b, label_cursor *c, edge_label_cursor *d )
{
   /** (make edge_label ^p1  <bp> ^p2  <p1> ^l_name  <n1> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p1;
     r.l_name =  c->n1;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

   /** (make edge_label ^p1  <bp> ^p2  <p2> ^l_name  <n2> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p2;
     r.l_name =  c->n2;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

   /** (make edge_label ^p1  <bp> ^p2  <p3> ^l_name  <n3> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p3;
     r.l_name =  c->n3;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

}

/**************************** rule visit_threej_4 :
   (stage ^value  visiting_threej  )
   (junction ^name  <n> ^base_point  <bp> ^p1  <p1> ^p2  <p2> ^p3  <p3> ^visited  now  )
   (label ^name  <n> ^id  <id> ^n1  <n1> ^n2  <n2> ^n3  <n3>  )
   (edge_label ^p1  <p1> ^p2  <bp> ^l_name  <n1>  )
   (edge_label ^p1  <p2> ^p2  <bp> ^l_name  <n2>  )
   - (edge_label ^p1  <bp> ^l_id  <id>  )
   - (edge_label ^p1  <p3> ^p2  <bp>  )
    -->  *******************************/

void fire_rule15( stage_cursor *a, junction_cursor *b, label_cursor *c, edge_label_cursor *d, edge_label_cursor *e )
{
   /** (make edge_label ^p1  <bp> ^p2  <p1> ^l_name  <n1> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p1;
     r.l_name =  c->n1;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

   /** (make edge_label ^p1  <bp> ^p2  <p2> ^l_name  <n2> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p2;
     r.l_name =  c->n2;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

   /** (make edge_label ^p1  <bp> ^p2  <p3> ^l_name  <n3> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p3;
     r.l_name =  c->n3;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

}

/**************************** rule visit_threej_5 :
   (stage ^value  visiting_threej  )
   (junction ^name  <n> ^base_point  <bp> ^p1  <p1> ^p2  <p2> ^p3  <p3> ^visited  now  )
   (label ^name  <n> ^id  <id> ^n1  <n1> ^n2  <n2> ^n3  <n3>  )
   (edge_label ^p1  <p2> ^p2  <bp> ^l_name  <n2>  )
   - (edge_label ^p1  <bp> ^l_id  <id>  )
   - (edge_label ^p1  <p3> ^p2  <bp>  )
   - (edge_label ^p1  <p1> ^p2  <bp>  )
    -->  *******************************/

void fire_rule16( stage_cursor *a, junction_cursor *b, label_cursor *c, edge_label_cursor *d )
{
   /** (make edge_label ^p1  <bp> ^p2  <p1> ^l_name  <n1> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p1;
     r.l_name =  c->n1;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

   /** (make edge_label ^p1  <bp> ^p2  <p2> ^l_name  <n2> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p2;
     r.l_name =  c->n2;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

   /** (make edge_label ^p1  <bp> ^p2  <p3> ^l_name  <n3> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p3;
     r.l_name =  c->n3;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

}

/**************************** rule visit_threej_6 :
   (stage ^value  visiting_threej  )
   (junction ^name  <n> ^base_point  <bp> ^p1  <p1> ^p2  <p2> ^p3  <p3> ^visited  now  )
   (label ^name  <n> ^id  <id> ^n1  <n1> ^n2  <n2> ^n3  <n3>  )
   (edge_label ^p1  <p1> ^p2  <bp> ^l_name  <n1>  )
   - (edge_label ^p1  <bp> ^l_id  <id>  )
   - (edge_label ^p1  <p3> ^p2  <bp>  )
   - (edge_label ^p1  <p2> ^p2  <bp>  )
    -->  *******************************/

void fire_rule17( stage_cursor *a, junction_cursor *b, label_cursor *c, edge_label_cursor *d )
{
   /** (make edge_label ^p1  <bp> ^p2  <p1> ^l_name  <n1> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p1;
     r.l_name =  c->n1;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

   /** (make edge_label ^p1  <bp> ^p2  <p2> ^l_name  <n2> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p2;
     r.l_name =  c->n2;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

   /** (make edge_label ^p1  <bp> ^p2  <p3> ^l_name  <n3> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p3;
     r.l_name =  c->n3;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

}

/**************************** rule visit_threej_7 :
   (stage ^value  visiting_threej  )
   (junction ^name  <n> ^base_point  <bp> ^p1  <p1> ^p2  <p2> ^p3  <p3> ^visited  now  )
   (label ^name  <n> ^id  <id> ^n1  <n1> ^n2  <n2> ^n3  <n3>  )
   - (edge_label ^p1  <bp> ^l_id  <id>  )
   - (edge_label ^p1  <p3> ^p2  <bp>  )
   - (edge_label ^p1  <p2> ^p2  <bp>  )
   - (edge_label ^p1  <p1> ^p2  <bp>  )
    -->  *******************************/

void fire_rule18( stage_cursor *a, junction_cursor *b, label_cursor *c )
{
   /** (make edge_label ^p1  <bp> ^p2  <p1> ^l_name  <n1> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p1;
     r.l_name =  c->n1;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

   /** (make edge_label ^p1  <bp> ^p2  <p2> ^l_name  <n2> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p2;
     r.l_name =  c->n2;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

   /** (make edge_label ^p1  <bp> ^p2  <p3> ^l_name  <n3> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p3;
     r.l_name =  c->n3;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

}

/**************************** rule start_visit_2_junction :
   (stage ^value  labeling  )
   (junction ^base_point  <bp> ^type  twoj ^p1  <p1> ^p2  <p2> ^visited  no  )
    -->  *******************************/

void fire_rule19( stage_cursor *a, junction_cursor *b )
{
   /** (modify 1 -- stage -- ^value  visiting_twoj) **/
   {  stage r;
      global_counter++;
      getrec(*a,r);
      r.value = _visiting_twoj;
      r._ts =  global_counter++;
      insert_stage(&r);
      a->_ts = global_counter;
      delete_stage(a);
   }

   /** (modify 2 -- junction -- ^visited  now) **/
   {  junction r;
      getrec(*b,r);
      r._ts =  global_counter++;
      insert_shadow_junction(&r);
      r.visited = _now;
      r._ts =  global_counter++;
      insert_junction(&r);
      b->_ts = global_counter;
      delete_junction(b);
   }

}

/**************************** rule visit_twoj_0 :
   (stage ^value  visiting_twoj  )
   (junction ^name  <n> ^base_point  <bp> ^p1  <p1> ^p2  <p2> ^visited  now  )
   (label ^name  <n> ^id  <id> ^n1  <n1> ^n2  <n2>  )
   (edge_label ^p1  <p1> ^p2  <bp> ^l_name  <n1>  )
   (edge_label ^p1  <p2> ^p2  <bp> ^l_name  <n2>  )
   - (edge_label ^p1  <bp> ^l_id  <id>  )
    -->  *******************************/

void fire_rule20( stage_cursor *a, junction_cursor *b, label_cursor *c, edge_label_cursor *d, edge_label_cursor *e )
{
   /** (make edge_label ^p1  <bp> ^p2  <p1> ^l_name  <n1> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p1;
     r.l_name =  c->n1;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

   /** (make edge_label ^p1  <bp> ^p2  <p2> ^l_name  <n2> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p2;
     r.l_name =  c->n2;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

}

/**************************** rule visit_twoj_1 :
   (stage ^value  visiting_twoj  )
   (junction ^name  <n> ^base_point  <bp> ^p1  <p1> ^p2  <p2> ^visited  now  )
   (label ^name  <n> ^id  <id> ^n1  <n1> ^n2  <n2>  )
   (edge_label ^p1  <p2> ^p2  <bp> ^l_name  <n2>  )
   - (edge_label ^p1  <bp> ^l_id  <id>  )
   - (edge_label ^p1  <p1> ^p2  <bp>  )
    -->  *******************************/

void fire_rule21( stage_cursor *a, junction_cursor *b, label_cursor *c, edge_label_cursor *d )
{
   /** (make edge_label ^p1  <bp> ^p2  <p1> ^l_name  <n1> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p1;
     r.l_name =  c->n1;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

   /** (make edge_label ^p1  <bp> ^p2  <p2> ^l_name  <n2> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p2;
     r.l_name =  c->n2;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

}

/**************************** rule visit_twoj_2 :
   (stage ^value  visiting_twoj  )
   (junction ^name  <n> ^base_point  <bp> ^p1  <p1> ^p2  <p2> ^visited  now  )
   (label ^name  <n> ^id  <id> ^n1  <n1> ^n2  <n2>  )
   (edge_label ^p1  <p1> ^p2  <bp> ^l_name  <n1>  )
   - (edge_label ^p1  <bp> ^l_id  <id>  )
   - (edge_label ^p1  <p2> ^p2  <bp>  )
    -->  *******************************/

void fire_rule22( stage_cursor *a, junction_cursor *b, label_cursor *c, edge_label_cursor *d )
{
   /** (make edge_label ^p1  <bp> ^p2  <p1> ^l_name  <n1> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p1;
     r.l_name =  c->n1;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

   /** (make edge_label ^p1  <bp> ^p2  <p2> ^l_name  <n2> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p2;
     r.l_name =  c->n2;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

}

/**************************** rule visit_twoj_3 :
   (stage ^value  visiting_twoj  )
   (junction ^name  <n> ^base_point  <bp> ^p1  <p1> ^p2  <p2> ^visited  now  )
   (label ^name  <n> ^id  <id> ^n1  <n1> ^n2  <n2>  )
   - (edge_label ^p1  <bp> ^l_id  <id>  )
   - (edge_label ^p1  <p2> ^p2  <bp>  )
   - (edge_label ^p1  <p1> ^p2  <bp>  )
    -->  *******************************/

void fire_rule23( stage_cursor *a, junction_cursor *b, label_cursor *c )
{
   /** (make edge_label ^p1  <bp> ^p2  <p1> ^l_name  <n1> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p1;
     r.l_name =  c->n1;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

   /** (make edge_label ^p1  <bp> ^p2  <p2> ^l_name  <n2> ^l_id  <id> ) **/
   { edge_label r;
     r.p1 =  b->base_point;
     r.p2 =  b->p2;
     r.l_name =  c->n2;
     r.l_id =  c->id;
     r._ts =  global_counter++;
     insert_edge_label(&r);
   }

}

/**************************** rule end_visit :
   (stage ^value << visiting_threej  visiting_twoj >>  )
   (junction ^visited  now  )
    -->  *******************************/

void fire_rule24( stage_cursor *a, junction_cursor *b )
{
   /** (modify 1 -- stage -- ^value  marking) **/
   {  stage r;
      global_counter++;
      getrec(*a,r);
      r.value = _marking;
      r._ts =  global_counter++;
      insert_stage(&r);
      a->_ts = global_counter;
      delete_stage(a);
   }

}

/**************************** rule marking :
   (stage ^value  marking  )
   (junction ^base_point  <bp> ^visited  now  )
   (edge ^p1  <p> ^p2  <bp>  )
   (junction ^base_point  <p> ^visited  yes  )
    -->  *******************************/

void fire_rule25( stage_cursor *a, junction_cursor *b, edge_cursor *c, junction_cursor *d )
{
   /** (modify 4 -- junction -- ^visited  check) **/
   {  junction r;
      getrec(*d,r);
      r._ts =  global_counter++;
      insert_shadow_junction(&r);
      r.visited = _check;
      r._ts =  global_counter++;
      insert_junction(&r);
      d->_ts = global_counter;
      delete_junction(d);
   }

}

/**************************** rule stop_marking :
   (stage ^value  marking  )
   (junction ^base_point  <bp> ^visited  now  )
    -->  *******************************/

void fire_rule26( stage_cursor *a, junction_cursor *b )
{
   /** (modify 2 -- junction -- ^visited  yes) **/
   {  junction r;
      getrec(*b,r);
      r._ts =  global_counter++;
      insert_shadow_junction(&r);
      r.visited = _yes;
      r._ts =  global_counter++;
      insert_junction(&r);
      b->_ts = global_counter;
      delete_junction(b);
   }

}

/**************************** rule start_checking :
   (stage ^value  marking  )
    -->  *******************************/

void fire_rule27( stage_cursor *a )
{
   /** (modify 1 -- stage -- ^value  checking) **/
   {  stage r;
      global_counter++;
      getrec(*a,r);
      r.value = _checking;
      r._ts =  global_counter++;
      insert_stage(&r);
      a->_ts = global_counter;
      delete_stage(a);
   }

}

/**************************** rule checking :
   (stage ^value  checking  )
   (junction ^base_point  <bp> ^visited  check  )
   (edge_label ^p1  <bp> ^p2  <p> ^l_name  <n> ^l_id  <id>  )
   (junction ^base_point  <p> ^visited  yes  )
   - (edge_label ^p1  <p> ^p2  <bp> ^l_name  <n>  )
    -->  *******************************/

void fire_rule28( stage_cursor *a, junction_cursor *b, edge_label_cursor *c, junction_cursor *d )
{
   /** (modify 1 -- stage -- ^value  remove_label) **/
   {  stage r;
      global_counter++;
      getrec(*a,r);
      r.value = _remove_label;
      r._ts =  global_counter++;
      insert_stage(&r);
      a->_ts = global_counter;
      delete_stage(a);
   }

   /** (make illegal ^bp  <bp> ^l_id  <id> ) **/
   { illegal r;
     r.bp =  b->base_point;
     r.l_id =  c->l_id;
     r._ts =  global_counter++;
     insert_illegal(&r);
   }

}

/**************************** rule remove_label_threej :
   (stage ^value  remove_label  )
   (illegal ^bp  <bp> ^l_id  <id>  )
   (junction ^type  threej ^base_point  <bp> ^p1  <p1> ^p2  <p2> ^p3  <p3>  )
   (edge_label ^p1  <bp> ^p2  <p1> ^l_id  <id>  )
   (edge_label ^p1  <bp> ^p2  <p2> ^l_id  <id>  )
   (edge_label ^p1  <bp> ^p2  <p3> ^l_id  <id>  )
    -->  *******************************/

void fire_rule29( stage_cursor *a, illegal_cursor *b, junction_cursor *c, edge_label_cursor *d, edge_label_cursor *e, edge_label_cursor *f )
{
   /** (modify 1 -- stage -- ^value  checking) **/
   {  stage r;
      global_counter++;
      getrec(*a,r);
      r.value = _checking;
      r._ts =  global_counter++;
      insert_stage(&r);
      a->_ts = global_counter;
      delete_stage(a);
   }

   /** (remove 2 -- illegal -- ) **/
   b->_ts = global_counter++;
   delete_illegal(b);

   /** (remove 4 -- edge_label -- ) **/
   {  edge_label r;
      getrec(*d,r);
      r._ts =  global_counter++;
      insert_shadow_edge_label(&r);
   }
   d->_ts = global_counter;
   delete_edge_label(d);

   /** (remove 5 -- edge_label -- ) **/
   {  edge_label r;
      getrec(*e,r);
      r._ts =  global_counter++;
      insert_shadow_edge_label(&r);
   }
   e->_ts = global_counter;
   delete_edge_label(e);

   /** (remove 6 -- edge_label -- ) **/
   {  edge_label r;
      getrec(*f,r);
      r._ts =  global_counter++;
      insert_shadow_edge_label(&r);
   }
   f->_ts = global_counter;
   delete_edge_label(f);

}

/**************************** rule remove_edge_twoj :
   (stage ^value  remove_label  )
   (illegal ^bp  <bp> ^l_id  <id>  )
   (junction ^type  twoj ^base_point  <bp> ^p1  <p1> ^p2  <p2>  )
   (edge_label ^p1  <bp> ^p2  <p1> ^l_id  <id>  )
   (edge_label ^p1  <bp> ^p2  <p2> ^l_id  <id>  )
    -->  *******************************/

void fire_rule30( stage_cursor *a, illegal_cursor *b, junction_cursor *c, edge_label_cursor *d, edge_label_cursor *e )
{
   /** (modify 1 -- stage -- ^value  checking) **/
   {  stage r;
      global_counter++;
      getrec(*a,r);
      r.value = _checking;
      r._ts =  global_counter++;
      insert_stage(&r);
      a->_ts = global_counter;
      delete_stage(a);
   }

   /** (remove 2 -- illegal -- ) **/
   b->_ts = global_counter++;
   delete_illegal(b);

   /** (remove 4 -- edge_label -- ) **/
   {  edge_label r;
      getrec(*d,r);
      r._ts =  global_counter++;
      insert_shadow_edge_label(&r);
   }
   d->_ts = global_counter;
   delete_edge_label(d);

   /** (remove 5 -- edge_label -- ) **/
   {  edge_label r;
      getrec(*e,r);
      r._ts =  global_counter++;
      insert_shadow_edge_label(&r);
   }
   e->_ts = global_counter;
   delete_edge_label(e);

}

/**************************** rule checking :
   (stage ^value  checking  )
   (junction ^base_point  <bp> ^visited  check  )
    -->  *******************************/

void fire_rule31( stage_cursor *a, junction_cursor *b )
{
   /** (modify 2 -- junction -- ^visited  yes) **/
   {  junction r;
      getrec(*b,r);
      r._ts =  global_counter++;
      insert_shadow_junction(&r);
      r.visited = _yes;
      r._ts =  global_counter++;
      insert_junction(&r);
      b->_ts = global_counter;
      delete_junction(b);
   }

}

/**************************** rule stop_checking :
   (stage ^value  checking  )
    -->  *******************************/

void fire_rule32( stage_cursor *a )
{
   /** (modify 1 -- stage -- ^value  labeling) **/
   {  stage r;
      global_counter++;
      getrec(*a,r);
      r.value = _labeling;
      r._ts =  global_counter++;
      insert_stage(&r);
      a->_ts = global_counter;
      delete_stage(a);
   }

}

/**************************** rule done_labeling :
   (stage ^value  labeling  )
    -->  *******************************/

void fire_rule33( stage_cursor *a )
{
   /** (modify 1 -- stage -- ^value  printing) **/
   {  stage r;
      global_counter++;
      getrec(*a,r);
      r.value = _printing;
      r._ts =  global_counter++;
      insert_stage(&r);
      a->_ts = global_counter;
      delete_stage(a);
   }

}

/**************************** rule printing_edge_label :
   (stage ^value  printing  )
   (edge_label ^p1  <p1> ^p2  <p2> ^l_name  <n> ^l_id  <id>  )
    -->  *******************************/

void fire_rule34( stage_cursor *a, edge_label_cursor *b )
{
   /** (write  edge_label <p1> <p2> <n> <id> (CRLF)) **/
   printf(" edge_label %d %d %s %d\n", b->p1, b->p2, b->l_name, b->l_id);

}

/**************************** rule printing_edge :
   (stage ^value  printing  )
   (edge ^type  <t> ^p1  <p1> ^p2  <p2> ^joined  <j>  )
    -->  *******************************/

void fire_rule35( stage_cursor *a, edge_cursor *b )
{
   /** (write  edge <t> <p1> <p2> <j> (CRLF)) **/
   printf(" edge %s %d %d %s\n", b->type, b->p1, b->p2, b->joined);

}

/**************************** rule printing_junction :
   (stage ^value  printing  )
   (junction ^p1  <p1> ^p2  <p2> ^p3  <p3> ^base_point  <bp> ^type  <t> ^name  <n> ^visited  <v>  )
    -->  *******************************/

void fire_rule36( stage_cursor *a, junction_cursor *b )
{
   /** (write  junction <p1> <p2> <p3> <bp> <t> <n> <v> (CRLF)) **/
   printf(" junction %d %d %d %d %s %s %s\n", b->p1, b->p2, b->p3, b->base_point, b->type, b->name, b->visited);

}

/**************************** rule printing_label :
   (stage ^value  printing  )
   (label ^id  <id> ^type  <t> ^name  <n> ^n1  <n1> ^n2  <n2> ^n3  <n3>  )
    -->  *******************************/

void fire_rule37( stage_cursor *a, label_cursor *b )
{
   /** (write  label <id> <t> <n> <n1> <n2> <n3> (CRLF)) **/
   printf(" label %d %s %s %s %s %s\n", b->id, b->type, b->name, b->n1, b->n2, b->n3);

}

/**************************** rule printing_illegal :
   (stage ^value  printing  )
   (illegal ^bp  <bp> ^l_id  <id>  )
    -->  *******************************/

void fire_rule38( stage_cursor *a, illegal_cursor *b )
{
   /** (write  illegal <bp> <id> (CRLF)) **/
   printf(" illegal %d %d\n", b->bp, b->l_id);

}


VOID_FUNC_PTR first_rule[] =
   { 0, i11_a, i1_b, i2_b, i7_c, i4_d, i11_d, i11_g, i11_b, i7_f, i11_c, i29_b, 0};

int rfc = 1;

void i1_a(void)
{
   bind(curs1_a, c->a, active_rule1, i2_a, curs1_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 1 (reverse_edges)  %d %d\n",rfc++,c->a._ts,c->b._ts);
   fire_rule1( &c->a, &c->b );
   next_rule( i2_a, curs1_a_list );
}

void i1_b(void)
{
   bind(curs1_b, c->b, active_rule1, pop, curs1_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 1 (reverse_edges)  %d %d\n",rfc++,c->a._ts,c->b._ts);
   fire_rule1( &c->a, &c->b );
   next_rule( pop, curs1_b_list );
}

void i2_a(void)
{
   bind(curs2_a, c->a, active_rule2, i5_a, curs2_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 2 (done_reversing)  %d\n",rfc++,c->a._ts);
   fire_rule2( &c->a );
   next_rule( i5_a, curs2_a_list );
}

void i2_b(void)
{
   bind(curs2_b, c->b, active_rule2, pop, curs2_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 2 (done_reversing)  %d\n",rfc++,c->a._ts,c->b._ts);
   fire_rule2( &c->a );
   next_rule( pop, curs2_b_list );
}

void i3_a(void)
{
   bind(curs3_a, c->a, active_rule3, i4_a, curs3_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 3 (make_3_junction)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule3( &c->a, &c->b, &c->c, &c->d );
   next_rule( i4_a, curs3_a_list );
}

void i3_b(void)
{
   bind(curs3_b, c->b, active_rule3, i4_b, curs3_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 3 (make_3_junction)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule3( &c->a, &c->b, &c->c, &c->d );
   next_rule( i3_c, curs3_b_list );
}

void i3_c(void)
{
   bind(curs3_c, c->c, active_rule3, i4_b, curs3_c_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 3 (make_3_junction)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule3( &c->a, &c->b, &c->c, &c->d );
   next_rule( i3_d, curs3_c_list );
}

void i3_d(void)
{
   bind(curs3_d, c->d, active_rule3, i4_b, curs3_d_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 3 (make_3_junction)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule3( &c->a, &c->b, &c->c, &c->d );
   next_rule( i4_b, curs3_d_list );
}

void i4_a(void)
{
   bind(curs4_a, c->a, active_rule4, i25_a, curs4_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 4 (make_L)  %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts);
   fire_rule4( &c->a, &c->b, &c->c );
   next_rule( i25_a, curs4_a_list );
}

void i4_b(void)
{
   bind(curs4_b, c->b, active_rule4, i25_c, curs4_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 4 (make_L)  %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts);
   fire_rule4( &c->a, &c->b, &c->c );
   next_rule( i4_c, curs4_b_list );
}

void i4_c(void)
{
   bind(curs4_c, c->c, active_rule4, i25_c, curs4_c_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 4 (make_L)  %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts);
   fire_rule4( &c->a, &c->b, &c->c );
   next_rule( i25_c, curs4_c_list );
}

void i4_d(void)
{
   bind(curs4_d, c->d, active_rule4, i5_b, curs4_d_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 4 (make_L)  %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule4( &c->a, &c->b, &c->c );
   next_rule( i5_b, curs4_d_list );
}

void i5_a(void)
{
   bind(curs5_a, c->a, active_rule5, i10_a, curs5_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 5 (done_detecting)  %d\n",rfc++,c->a._ts);
   fire_rule5( &c->a );
   next_rule( i10_a, curs5_a_list );
}

void i5_b(void)
{
   bind(curs5_b, c->b, active_rule5, pop, curs5_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 5 (done_detecting)  %d\n",rfc++,c->a._ts,c->b._ts);
   fire_rule5( &c->a );
   next_rule( pop, curs5_b_list );
}

void i6_a(void)
{
   bind(curs6_a, c->a, active_rule6, i8_a, curs6_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 6 (initial_boundary_junction_L)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule6( &c->a, &c->b, &c->c, &c->d );
   next_rule( i8_a, curs6_a_list );
}

void i6_b(void)
{
   bind(curs6_b, c->b, active_rule6, i8_b, curs6_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 6 (initial_boundary_junction_L)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule6( &c->a, &c->b, &c->c, &c->d );
   next_rule( i8_b, curs6_b_list );
}

void i6_c(void)
{
   bind(curs6_c, c->c, active_rule6, i8_c, curs6_c_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 6 (initial_boundary_junction_L)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule6( &c->a, &c->b, &c->c, &c->d );
   next_rule( i6_d, curs6_c_list );
}

void i6_d(void)
{
   bind(curs6_d, c->d, active_rule6, i8_c, curs6_d_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 6 (initial_boundary_junction_L)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule6( &c->a, &c->b, &c->c, &c->d );
   next_rule( i8_c, curs6_d_list );
}

void i6_e(void)
{
   bind(curs6_e, c->e, active_rule6, i8_e, curs6_e_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 6 (initial_boundary_junction_L)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule6( &c->a, &c->b, &c->c, &c->d );
   next_rule( i8_e, curs6_e_list );
}

void i7_a(void)
{
   bind(curs7_a, c->a, active_rule7, i9_a, curs7_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 7 (initial_boundary_junction_arrow)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule7( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i9_a, curs7_a_list );
}

void i7_b(void)
{
   bind(curs7_b, c->b, active_rule7, i9_b, curs7_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 7 (initial_boundary_junction_arrow)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule7( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i9_b, curs7_b_list );
}

void i7_c(void)
{
   bind(curs7_c, c->c, active_rule7, i9_c, curs7_c_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 7 (initial_boundary_junction_arrow)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule7( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i7_d, curs7_c_list );
}

void i7_d(void)
{
   bind(curs7_d, c->d, active_rule7, i9_c, curs7_d_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 7 (initial_boundary_junction_arrow)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule7( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i7_e, curs7_d_list );
}

void i7_e(void)
{
   bind(curs7_e, c->e, active_rule7, i9_c, curs7_e_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 7 (initial_boundary_junction_arrow)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule7( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i9_c, curs7_e_list );
}

void i7_f(void)
{
   bind(curs7_f, c->f, active_rule7, i9_f, curs7_f_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 7 (initial_boundary_junction_arrow)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts,c->f._ts);
   fire_rule7( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i9_f, curs7_f_list );
}

void i8_a(void)
{
   bind(curs8_a, c->a, active_rule8, i28_a, curs8_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 8 (second_boundary_junction_L)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule8( &c->a, &c->b, &c->c, &c->d );
   next_rule( i28_a, curs8_a_list );
}

void i8_b(void)
{
   bind(curs8_b, c->b, active_rule8, i28_b, curs8_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 8 (second_boundary_junction_L)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule8( &c->a, &c->b, &c->c, &c->d );
   next_rule( i28_b, curs8_b_list );
}

void i8_c(void)
{
   bind(curs8_c, c->c, active_rule8, i3_b, curs8_c_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 8 (second_boundary_junction_L)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule8( &c->a, &c->b, &c->c, &c->d );
   next_rule( i8_d, curs8_c_list );
}

void i8_d(void)
{
   bind(curs8_d, c->d, active_rule8, i3_b, curs8_d_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 8 (second_boundary_junction_L)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule8( &c->a, &c->b, &c->c, &c->d );
   next_rule( i3_b, curs8_d_list );
}

void i8_e(void)
{
   bind(curs8_e, c->e, active_rule8, pop, curs8_e_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 8 (second_boundary_junction_L)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule8( &c->a, &c->b, &c->c, &c->d );
   next_rule( pop, curs8_e_list );
}

void i9_a(void)
{
   bind(curs9_a, c->a, active_rule9, i20_a, curs9_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 9 (second_boundary_junction_arrow)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule9( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i20_a, curs9_a_list );
}

void i9_b(void)
{
   bind(curs9_b, c->b, active_rule9, i20_b, curs9_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 9 (second_boundary_junction_arrow)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule9( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i20_b, curs9_b_list );
}

void i9_c(void)
{
   bind(curs9_c, c->c, active_rule9, i6_c, curs9_c_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 9 (second_boundary_junction_arrow)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule9( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i9_d, curs9_c_list );
}

void i9_d(void)
{
   bind(curs9_d, c->d, active_rule9, i6_c, curs9_d_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 9 (second_boundary_junction_arrow)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule9( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i9_e, curs9_d_list );
}

void i9_e(void)
{
   bind(curs9_e, c->e, active_rule9, i6_c, curs9_e_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 9 (second_boundary_junction_arrow)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule9( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i6_c, curs9_e_list );
}

void i9_f(void)
{
   bind(curs9_f, c->f, active_rule9, i6_e, curs9_f_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 9 (second_boundary_junction_arrow)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts,c->f._ts);
   fire_rule9( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i6_e, curs9_f_list );
}

void i10_a(void)
{
   bind(curs10_a, c->a, active_rule10, i19_a, curs10_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 10 (start_visit_3_junction)  %d %d\n",rfc++,c->a._ts,c->b._ts);
   fire_rule10( &c->a, &c->b );
   next_rule( i19_a, curs10_a_list );
}

void i10_b(void)
{
   bind(curs10_b, c->b, active_rule10, i19_b, curs10_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 10 (start_visit_3_junction)  %d %d\n",rfc++,c->a._ts,c->b._ts);
   fire_rule10( &c->a, &c->b );
   next_rule( i19_b, curs10_b_list );
}

void i11_a(void)
{
   bind(curs11_a, c->a, active_rule11, i12_a, curs11_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 11 (visit_threej_0)  %d %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts,c->f._ts);
   fire_rule11( &c->a, &c->b, &c->c, &c->d, &c->e, &c->f );
   next_rule( i12_a, curs11_a_list );
}

void i11_b(void)
{
   bind(curs11_b, c->b, active_rule11, i12_b, curs11_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 11 (visit_threej_0)  %d %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts,c->f._ts);
   fire_rule11( &c->a, &c->b, &c->c, &c->d, &c->e, &c->f );
   next_rule( i12_b, curs11_b_list );
}

void i11_c(void)
{
   bind(curs11_c, c->c, active_rule11, i12_c, curs11_c_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 11 (visit_threej_0)  %d %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts,c->f._ts);
   fire_rule11( &c->a, &c->b, &c->c, &c->d, &c->e, &c->f );
   next_rule( i12_c, curs11_c_list );
}

void i11_d(void)
{
   bind(curs11_d, c->d, active_rule11, i12_d, curs11_d_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 11 (visit_threej_0)  %d %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts,c->f._ts);
   fire_rule11( &c->a, &c->b, &c->c, &c->d, &c->e, &c->f );
   next_rule( i11_e, curs11_d_list );
}

void i11_e(void)
{
   bind(curs11_e, c->e, active_rule11, i12_d, curs11_e_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 11 (visit_threej_0)  %d %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts,c->f._ts);
   fire_rule11( &c->a, &c->b, &c->c, &c->d, &c->e, &c->f );
   next_rule( i11_f, curs11_e_list );
}

void i11_f(void)
{
   bind(curs11_f, c->f, active_rule11, i12_d, curs11_f_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 11 (visit_threej_0)  %d %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts,c->f._ts);
   fire_rule11( &c->a, &c->b, &c->c, &c->d, &c->e, &c->f );
   next_rule( i12_d, curs11_f_list );
}

void i11_g(void)
{
   bind(curs11_g, c->g, active_rule11, i12_f, curs11_g_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 11 (visit_threej_0)  %d %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts,c->f._ts,c->g._ts);
   fire_rule11( &c->a, &c->b, &c->c, &c->d, &c->e, &c->f );
   next_rule( i12_f, curs11_g_list );
}

void i12_a(void)
{
   bind(curs12_a, c->a, active_rule12, i13_a, curs12_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 12 (visit_threej_1)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule12( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i13_a, curs12_a_list );
}

void i12_b(void)
{
   bind(curs12_b, c->b, active_rule12, i13_b, curs12_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 12 (visit_threej_1)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule12( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i13_b, curs12_b_list );
}

void i12_c(void)
{
   bind(curs12_c, c->c, active_rule12, i13_c, curs12_c_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 12 (visit_threej_1)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule12( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i13_c, curs12_c_list );
}

void i12_d(void)
{
   bind(curs12_d, c->d, active_rule12, i13_d, curs12_d_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 12 (visit_threej_1)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule12( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i12_e, curs12_d_list );
}

void i12_e(void)
{
   bind(curs12_e, c->e, active_rule12, i13_d, curs12_e_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 12 (visit_threej_1)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule12( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i13_d, curs12_e_list );
}

void i12_f(void)
{
   bind(curs12_f, c->f, active_rule12, i13_f, curs12_f_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 12 (visit_threej_1)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts,c->f._ts);
   fire_rule12( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i12_g, curs12_f_list );
}

void i12_g(void)
{
   bind(curs12_g, c->f, active_rule12, i13_f, curs12_g_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 12 (visit_threej_1)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts,c->f._ts);
   fire_rule12( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i13_f, curs12_g_list );
}

void i13_a(void)
{
   bind(curs13_a, c->a, active_rule13, i14_a, curs13_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 13 (visit_threej_2)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule13( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i14_a, curs13_a_list );
}

void i13_b(void)
{
   bind(curs13_b, c->b, active_rule13, i14_b, curs13_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 13 (visit_threej_2)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule13( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i14_b, curs13_b_list );
}

void i13_c(void)
{
   bind(curs13_c, c->c, active_rule13, i14_c, curs13_c_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 13 (visit_threej_2)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule13( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i14_c, curs13_c_list );
}

void i13_d(void)
{
   bind(curs13_d, c->d, active_rule13, i14_d, curs13_d_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 13 (visit_threej_2)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule13( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i13_e, curs13_d_list );
}

void i13_e(void)
{
   bind(curs13_e, c->e, active_rule13, i14_d, curs13_e_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 13 (visit_threej_2)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule13( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i14_d, curs13_e_list );
}

void i13_f(void)
{
   bind(curs13_f, c->f, active_rule13, i14_e, curs13_f_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 13 (visit_threej_2)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts,c->f._ts);
   fire_rule13( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i13_g, curs13_f_list );
}

void i13_g(void)
{
   bind(curs13_g, c->f, active_rule13, i14_e, curs13_g_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 13 (visit_threej_2)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts,c->f._ts);
   fire_rule13( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i14_e, curs13_g_list );
}

void i14_a(void)
{
   bind(curs14_a, c->a, active_rule14, i15_a, curs14_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 14 (visit_threej_3)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule14( &c->a, &c->b, &c->c, &c->d );
   next_rule( i15_a, curs14_a_list );
}

void i14_b(void)
{
   bind(curs14_b, c->b, active_rule14, i15_b, curs14_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 14 (visit_threej_3)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule14( &c->a, &c->b, &c->c, &c->d );
   next_rule( i15_b, curs14_b_list );
}

void i14_c(void)
{
   bind(curs14_c, c->c, active_rule14, i15_c, curs14_c_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 14 (visit_threej_3)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule14( &c->a, &c->b, &c->c, &c->d );
   next_rule( i15_c, curs14_c_list );
}

void i14_d(void)
{
   bind(curs14_d, c->d, active_rule14, i15_d, curs14_d_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 14 (visit_threej_3)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule14( &c->a, &c->b, &c->c, &c->d );
   next_rule( i15_d, curs14_d_list );
}

void i14_e(void)
{
   bind(curs14_e, c->e, active_rule14, i15_f, curs14_e_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 14 (visit_threej_3)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule14( &c->a, &c->b, &c->c, &c->d );
   next_rule( i14_f, curs14_e_list );
}

void i14_f(void)
{
   bind(curs14_f, c->e, active_rule14, i15_f, curs14_f_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 14 (visit_threej_3)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule14( &c->a, &c->b, &c->c, &c->d );
   next_rule( i14_g, curs14_f_list );
}

void i14_g(void)
{
   bind(curs14_g, c->e, active_rule14, i15_f, curs14_g_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 14 (visit_threej_3)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule14( &c->a, &c->b, &c->c, &c->d );
   next_rule( i15_f, curs14_g_list );
}

void i15_a(void)
{
   bind(curs15_a, c->a, active_rule15, i16_a, curs15_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 15 (visit_threej_4)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule15( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i16_a, curs15_a_list );
}

void i15_b(void)
{
   bind(curs15_b, c->b, active_rule15, i16_b, curs15_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 15 (visit_threej_4)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule15( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i16_b, curs15_b_list );
}

void i15_c(void)
{
   bind(curs15_c, c->c, active_rule15, i16_c, curs15_c_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 15 (visit_threej_4)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule15( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i16_c, curs15_c_list );
}

void i15_d(void)
{
   bind(curs15_d, c->d, active_rule15, i16_d, curs15_d_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 15 (visit_threej_4)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule15( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i15_e, curs15_d_list );
}

void i15_e(void)
{
   bind(curs15_e, c->e, active_rule15, i16_d, curs15_e_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 15 (visit_threej_4)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule15( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i16_d, curs15_e_list );
}

void i15_f(void)
{
   bind(curs15_f, c->f, active_rule15, i16_e, curs15_f_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 15 (visit_threej_4)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts,c->f._ts);
   fire_rule15( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i15_g, curs15_f_list );
}

void i15_g(void)
{
   bind(curs15_g, c->f, active_rule15, i16_e, curs15_g_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 15 (visit_threej_4)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts,c->f._ts);
   fire_rule15( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i16_e, curs15_g_list );
}

void i16_a(void)
{
   bind(curs16_a, c->a, active_rule16, i17_a, curs16_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 16 (visit_threej_5)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule16( &c->a, &c->b, &c->c, &c->d );
   next_rule( i17_a, curs16_a_list );
}

void i16_b(void)
{
   bind(curs16_b, c->b, active_rule16, i17_b, curs16_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 16 (visit_threej_5)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule16( &c->a, &c->b, &c->c, &c->d );
   next_rule( i17_b, curs16_b_list );
}

void i16_c(void)
{
   bind(curs16_c, c->c, active_rule16, i17_c, curs16_c_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 16 (visit_threej_5)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule16( &c->a, &c->b, &c->c, &c->d );
   next_rule( i17_c, curs16_c_list );
}

void i16_d(void)
{
   bind(curs16_d, c->d, active_rule16, i17_d, curs16_d_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 16 (visit_threej_5)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule16( &c->a, &c->b, &c->c, &c->d );
   next_rule( i17_d, curs16_d_list );
}

void i16_e(void)
{
   bind(curs16_e, c->e, active_rule16, i17_e, curs16_e_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 16 (visit_threej_5)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule16( &c->a, &c->b, &c->c, &c->d );
   next_rule( i16_f, curs16_e_list );
}

void i16_f(void)
{
   bind(curs16_f, c->e, active_rule16, i17_e, curs16_f_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 16 (visit_threej_5)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule16( &c->a, &c->b, &c->c, &c->d );
   next_rule( i16_g, curs16_f_list );
}

void i16_g(void)
{
   bind(curs16_g, c->e, active_rule16, i17_e, curs16_g_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 16 (visit_threej_5)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule16( &c->a, &c->b, &c->c, &c->d );
   next_rule( i17_e, curs16_g_list );
}

void i17_a(void)
{
   bind(curs17_a, c->a, active_rule17, i18_a, curs17_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 17 (visit_threej_6)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule17( &c->a, &c->b, &c->c, &c->d );
   next_rule( i18_a, curs17_a_list );
}

void i17_b(void)
{
   bind(curs17_b, c->b, active_rule17, i18_b, curs17_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 17 (visit_threej_6)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule17( &c->a, &c->b, &c->c, &c->d );
   next_rule( i18_b, curs17_b_list );
}

void i17_c(void)
{
   bind(curs17_c, c->c, active_rule17, i18_c, curs17_c_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 17 (visit_threej_6)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule17( &c->a, &c->b, &c->c, &c->d );
   next_rule( i18_c, curs17_c_list );
}

void i17_d(void)
{
   bind(curs17_d, c->d, active_rule17, i20_d, curs17_d_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 17 (visit_threej_6)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule17( &c->a, &c->b, &c->c, &c->d );
   next_rule( i20_d, curs17_d_list );
}

void i17_e(void)
{
   bind(curs17_e, c->e, active_rule17, i18_d, curs17_e_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 17 (visit_threej_6)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule17( &c->a, &c->b, &c->c, &c->d );
   next_rule( i17_f, curs17_e_list );
}

void i17_f(void)
{
   bind(curs17_f, c->e, active_rule17, i18_d, curs17_f_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 17 (visit_threej_6)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule17( &c->a, &c->b, &c->c, &c->d );
   next_rule( i17_g, curs17_f_list );
}

void i17_g(void)
{
   bind(curs17_g, c->e, active_rule17, i18_d, curs17_g_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 17 (visit_threej_6)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule17( &c->a, &c->b, &c->c, &c->d );
   next_rule( i18_d, curs17_g_list );
}

void i18_a(void)
{
   bind(curs18_a, c->a, active_rule18, i7_a, curs18_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 18 (visit_threej_7)  %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts);
   fire_rule18( &c->a, &c->b, &c->c );
   next_rule( i7_a, curs18_a_list );
}

void i18_b(void)
{
   bind(curs18_b, c->b, active_rule18, i7_b, curs18_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 18 (visit_threej_7)  %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts);
   fire_rule18( &c->a, &c->b, &c->c );
   next_rule( i7_b, curs18_b_list );
}

void i18_c(void)
{
   bind(curs18_c, c->c, active_rule18, i20_c, curs18_c_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 18 (visit_threej_7)  %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts);
   fire_rule18( &c->a, &c->b, &c->c );
   next_rule( i20_c, curs18_c_list );
}

void i18_d(void)
{
   bind(curs18_d, c->d, active_rule18, i20_f, curs18_d_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 18 (visit_threej_7)  %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule18( &c->a, &c->b, &c->c );
   next_rule( i18_e, curs18_d_list );
}

void i18_e(void)
{
   bind(curs18_e, c->d, active_rule18, i20_f, curs18_e_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 18 (visit_threej_7)  %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule18( &c->a, &c->b, &c->c );
   next_rule( i18_f, curs18_e_list );
}

void i18_f(void)
{
   bind(curs18_f, c->d, active_rule18, i20_f, curs18_f_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 18 (visit_threej_7)  %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule18( &c->a, &c->b, &c->c );
   next_rule( i18_g, curs18_f_list );
}

void i18_g(void)
{
   bind(curs18_g, c->d, active_rule18, i20_f, curs18_g_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 18 (visit_threej_7)  %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule18( &c->a, &c->b, &c->c );
   next_rule( i20_f, curs18_g_list );
}

void i19_a(void)
{
   bind(curs19_a, c->a, active_rule19, i24_a, curs19_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 19 (start_visit_2_junction)  %d %d\n",rfc++,c->a._ts,c->b._ts);
   fire_rule19( &c->a, &c->b );
   next_rule( i24_a, curs19_a_list );
}

void i19_b(void)
{
   bind(curs19_b, c->b, active_rule19, i24_b, curs19_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 19 (start_visit_2_junction)  %d %d\n",rfc++,c->a._ts,c->b._ts);
   fire_rule19( &c->a, &c->b );
   next_rule( i24_b, curs19_b_list );
}

void i20_a(void)
{
   bind(curs20_a, c->a, active_rule20, i21_a, curs20_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 20 (visit_twoj_0)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule20( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i21_a, curs20_a_list );
}

void i20_b(void)
{
   bind(curs20_b, c->b, active_rule20, i21_b, curs20_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 20 (visit_twoj_0)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule20( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i21_b, curs20_b_list );
}

void i20_c(void)
{
   bind(curs20_c, c->c, active_rule20, i21_c, curs20_c_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 20 (visit_twoj_0)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule20( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i21_c, curs20_c_list );
}

void i20_d(void)
{
   bind(curs20_d, c->d, active_rule20, i21_d, curs20_d_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 20 (visit_twoj_0)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule20( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i20_e, curs20_d_list );
}

void i20_e(void)
{
   bind(curs20_e, c->e, active_rule20, i21_d, curs20_e_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 20 (visit_twoj_0)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule20( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i21_d, curs20_e_list );
}

void i20_f(void)
{
   bind(curs20_f, c->f, active_rule20, i21_e, curs20_f_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 20 (visit_twoj_0)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts,c->f._ts);
   fire_rule20( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i21_e, curs20_f_list );
}

void i21_a(void)
{
   bind(curs21_a, c->a, active_rule21, i22_a, curs21_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 21 (visit_twoj_1)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule21( &c->a, &c->b, &c->c, &c->d );
   next_rule( i22_a, curs21_a_list );
}

void i21_b(void)
{
   bind(curs21_b, c->b, active_rule21, i22_b, curs21_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 21 (visit_twoj_1)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule21( &c->a, &c->b, &c->c, &c->d );
   next_rule( i22_b, curs21_b_list );
}

void i21_c(void)
{
   bind(curs21_c, c->c, active_rule21, i22_c, curs21_c_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 21 (visit_twoj_1)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule21( &c->a, &c->b, &c->c, &c->d );
   next_rule( i22_c, curs21_c_list );
}

void i21_d(void)
{
   bind(curs21_d, c->d, active_rule21, i22_d, curs21_d_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 21 (visit_twoj_1)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule21( &c->a, &c->b, &c->c, &c->d );
   next_rule( i22_d, curs21_d_list );
}

void i21_e(void)
{
   bind(curs21_e, c->e, active_rule21, i22_e, curs21_e_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 21 (visit_twoj_1)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule21( &c->a, &c->b, &c->c, &c->d );
   next_rule( i21_f, curs21_e_list );
}

void i21_f(void)
{
   bind(curs21_f, c->e, active_rule21, i22_e, curs21_f_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 21 (visit_twoj_1)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule21( &c->a, &c->b, &c->c, &c->d );
   next_rule( i22_e, curs21_f_list );
}

void i22_a(void)
{
   bind(curs22_a, c->a, active_rule22, i23_a, curs22_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 22 (visit_twoj_2)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule22( &c->a, &c->b, &c->c, &c->d );
   next_rule( i23_a, curs22_a_list );
}

void i22_b(void)
{
   bind(curs22_b, c->b, active_rule22, i23_b, curs22_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 22 (visit_twoj_2)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule22( &c->a, &c->b, &c->c, &c->d );
   next_rule( i23_b, curs22_b_list );
}

void i22_c(void)
{
   bind(curs22_c, c->c, active_rule22, i23_c, curs22_c_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 22 (visit_twoj_2)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule22( &c->a, &c->b, &c->c, &c->d );
   next_rule( i23_c, curs22_c_list );
}

void i22_d(void)
{
   bind(curs22_d, c->d, active_rule22, i29_d, curs22_d_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 22 (visit_twoj_2)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule22( &c->a, &c->b, &c->c, &c->d );
   next_rule( i29_d, curs22_d_list );
}

void i22_e(void)
{
   bind(curs22_e, c->e, active_rule22, i23_d, curs22_e_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 22 (visit_twoj_2)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule22( &c->a, &c->b, &c->c, &c->d );
   next_rule( i22_f, curs22_e_list );
}

void i22_f(void)
{
   bind(curs22_f, c->e, active_rule22, i23_d, curs22_f_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 22 (visit_twoj_2)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule22( &c->a, &c->b, &c->c, &c->d );
   next_rule( i23_d, curs22_f_list );
}

void i23_a(void)
{
   bind(curs23_a, c->a, active_rule23, i29_a, curs23_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 23 (visit_twoj_3)  %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts);
   fire_rule23( &c->a, &c->b, &c->c );
   next_rule( i29_a, curs23_a_list );
}

void i23_b(void)
{
   bind(curs23_b, c->b, active_rule23, i29_c, curs23_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 23 (visit_twoj_3)  %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts);
   fire_rule23( &c->a, &c->b, &c->c );
   next_rule( i29_c, curs23_b_list );
}

void i23_c(void)
{
   bind(curs23_c, c->c, active_rule23, i37_b, curs23_c_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 23 (visit_twoj_3)  %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts);
   fire_rule23( &c->a, &c->b, &c->c );
   next_rule( i37_b, curs23_c_list );
}

void i23_d(void)
{
   bind(curs23_d, c->d, active_rule23, i28_e, curs23_d_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 23 (visit_twoj_3)  %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule23( &c->a, &c->b, &c->c );
   next_rule( i23_e, curs23_d_list );
}

void i23_e(void)
{
   bind(curs23_e, c->d, active_rule23, i28_e, curs23_e_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 23 (visit_twoj_3)  %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule23( &c->a, &c->b, &c->c );
   next_rule( i23_f, curs23_e_list );
}

void i23_f(void)
{
   bind(curs23_f, c->d, active_rule23, i28_e, curs23_f_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 23 (visit_twoj_3)  %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule23( &c->a, &c->b, &c->c );
   next_rule( i28_e, curs23_f_list );
}

void i24_a(void)
{
   bind(curs24_a, c->a, active_rule24, i26_a, curs24_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 24 (end_visit)  %d %d\n",rfc++,c->a._ts,c->b._ts);
   fire_rule24( &c->a, &c->b );
   next_rule( i26_a, curs24_a_list );
}

void i24_b(void)
{
   bind(curs24_b, c->b, active_rule24, i26_b, curs24_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 24 (end_visit)  %d %d\n",rfc++,c->a._ts,c->b._ts);
   fire_rule24( &c->a, &c->b );
   next_rule( i26_b, curs24_b_list );
}

void i25_a(void)
{
   bind(curs25_a, c->a, active_rule25, i1_a, curs25_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 25 (marking)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule25( &c->a, &c->b, &c->c, &c->d );
   next_rule( i1_a, curs25_a_list );
}

void i25_b(void)
{
   bind(curs25_b, c->b, active_rule25, i10_b, curs25_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 25 (marking)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule25( &c->a, &c->b, &c->c, &c->d );
   next_rule( i25_d, curs25_b_list );
}

void i25_c(void)
{
   bind(curs25_c, c->c, active_rule25, i35_b, curs25_c_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 25 (marking)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule25( &c->a, &c->b, &c->c, &c->d );
   next_rule( i35_b, curs25_c_list );
}

void i25_d(void)
{
   bind(curs25_d, c->d, active_rule25, i10_b, curs25_d_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 25 (marking)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule25( &c->a, &c->b, &c->c, &c->d );
   next_rule( i10_b, curs25_d_list );
}

void i26_a(void)
{
   bind(curs26_a, c->a, active_rule26, i31_a, curs26_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 26 (stop_marking)  %d %d\n",rfc++,c->a._ts,c->b._ts);
   fire_rule26( &c->a, &c->b );
   next_rule( i31_a, curs26_a_list );
}

void i26_b(void)
{
   bind(curs26_b, c->b, active_rule26, i31_b, curs26_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 26 (stop_marking)  %d %d\n",rfc++,c->a._ts,c->b._ts);
   fire_rule26( &c->a, &c->b );
   next_rule( i31_b, curs26_b_list );
}

void i27_a(void)
{
   bind(curs27_a, c->a, active_rule27, i32_a, curs27_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 27 (start_checking)  %d\n",rfc++,c->a._ts);
   fire_rule27( &c->a );
   next_rule( i32_a, curs27_a_list );
}

void i28_a(void)
{
   bind(curs28_a, c->a, active_rule28, i30_a, curs28_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 28 (checking)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule28( &c->a, &c->b, &c->c, &c->d );
   next_rule( i30_a, curs28_a_list );
}

void i28_b(void)
{
   bind(curs28_b, c->b, active_rule28, i30_c, curs28_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 28 (checking)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule28( &c->a, &c->b, &c->c, &c->d );
   next_rule( i28_d, curs28_b_list );
}

void i28_c(void)
{
   bind(curs28_c, c->c, active_rule28, i30_d, curs28_c_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 28 (checking)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule28( &c->a, &c->b, &c->c, &c->d );
   next_rule( i30_d, curs28_c_list );
}

void i28_d(void)
{
   bind(curs28_d, c->d, active_rule28, i30_c, curs28_d_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 28 (checking)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts);
   fire_rule28( &c->a, &c->b, &c->c, &c->d );
   next_rule( i30_c, curs28_d_list );
}

void i28_e(void)
{
   bind(curs28_e, c->e, active_rule28, pop, curs28_e_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 28 (checking)  %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule28( &c->a, &c->b, &c->c, &c->d );
   next_rule( pop, curs28_e_list );
}

void i29_a(void)
{
   bind(curs29_a, c->a, active_rule29, i6_a, curs29_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 29 (remove_label_threej)  %d %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts,c->f._ts);
   fire_rule29( &c->a, &c->b, &c->c, &c->d, &c->e, &c->f );
   next_rule( i6_a, curs29_a_list );
}

void i29_b(void)
{
   bind(curs29_b, c->b, active_rule29, i30_b, curs29_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 29 (remove_label_threej)  %d %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts,c->f._ts);
   fire_rule29( &c->a, &c->b, &c->c, &c->d, &c->e, &c->f );
   next_rule( i30_b, curs29_b_list );
}

void i29_c(void)
{
   bind(curs29_c, c->c, active_rule29, i6_b, curs29_c_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 29 (remove_label_threej)  %d %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts,c->f._ts);
   fire_rule29( &c->a, &c->b, &c->c, &c->d, &c->e, &c->f );
   next_rule( i6_b, curs29_c_list );
}

void i29_d(void)
{
   bind(curs29_d, c->d, active_rule29, i28_c, curs29_d_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 29 (remove_label_threej)  %d %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts,c->f._ts);
   fire_rule29( &c->a, &c->b, &c->c, &c->d, &c->e, &c->f );
   next_rule( i29_e, curs29_d_list );
}

void i29_e(void)
{
   bind(curs29_e, c->e, active_rule29, i28_c, curs29_e_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 29 (remove_label_threej)  %d %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts,c->f._ts);
   fire_rule29( &c->a, &c->b, &c->c, &c->d, &c->e, &c->f );
   next_rule( i29_f, curs29_e_list );
}

void i29_f(void)
{
   bind(curs29_f, c->f, active_rule29, i28_c, curs29_f_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 29 (remove_label_threej)  %d %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts,c->f._ts);
   fire_rule29( &c->a, &c->b, &c->c, &c->d, &c->e, &c->f );
   next_rule( i28_c, curs29_f_list );
}

void i30_a(void)
{
   bind(curs30_a, c->a, active_rule30, i3_a, curs30_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 30 (remove_edge_twoj)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule30( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i3_a, curs30_a_list );
}

void i30_b(void)
{
   bind(curs30_b, c->b, active_rule30, i38_b, curs30_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 30 (remove_edge_twoj)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule30( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i38_b, curs30_b_list );
}

void i30_c(void)
{
   bind(curs30_c, c->c, active_rule30, i25_b, curs30_c_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 30 (remove_edge_twoj)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule30( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i25_b, curs30_c_list );
}

void i30_d(void)
{
   bind(curs30_d, c->d, active_rule30, i34_b, curs30_d_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 30 (remove_edge_twoj)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule30( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i30_e, curs30_d_list );
}

void i30_e(void)
{
   bind(curs30_e, c->e, active_rule30, i34_b, curs30_e_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 30 (remove_edge_twoj)  %d %d %d %d %d\n",rfc++,c->a._ts,c->b._ts,c->c._ts,c->d._ts,c->e._ts);
   fire_rule30( &c->a, &c->b, &c->c, &c->d, &c->e );
   next_rule( i34_b, curs30_e_list );
}

void i31_a(void)
{
   bind(curs31_a, c->a, active_rule31, i34_a, curs31_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 31 (checking)  %d %d\n",rfc++,c->a._ts,c->b._ts);
   fire_rule31( &c->a, &c->b );
   next_rule( i34_a, curs31_a_list );
}

void i31_b(void)
{
   bind(curs31_b, c->b, active_rule31, i36_b, curs31_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 31 (checking)  %d %d\n",rfc++,c->a._ts,c->b._ts);
   fire_rule31( &c->a, &c->b );
   next_rule( i36_b, curs31_b_list );
}

void i32_a(void)
{
   bind(curs32_a, c->a, active_rule32, i33_a, curs32_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 32 (stop_checking)  %d\n",rfc++,c->a._ts);
   fire_rule32( &c->a );
   next_rule( i33_a, curs32_a_list );
}

void i33_a(void)
{
   bind(curs33_a, c->a, active_rule33, pop, curs33_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 33 (done_labeling)  %d\n",rfc++,c->a._ts);
   fire_rule33( &c->a );
   next_rule( pop, curs33_a_list );
}

void i34_a(void)
{
   bind(curs34_a, c->a, active_rule34, i35_a, curs34_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 34 (printing_edge_label)  %d %d\n",rfc++,c->a._ts,c->b._ts);
   fire_rule34( &c->a, &c->b );
   next_rule( i35_a, curs34_a_list );
}

void i34_b(void)
{
   bind(curs34_b, c->b, active_rule34, pop, curs34_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 34 (printing_edge_label)  %d %d\n",rfc++,c->a._ts,c->b._ts);
   fire_rule34( &c->a, &c->b );
   next_rule( pop, curs34_b_list );
}

void i35_a(void)
{
   bind(curs35_a, c->a, active_rule35, i36_a, curs35_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 35 (printing_edge)  %d %d\n",rfc++,c->a._ts,c->b._ts);
   fire_rule35( &c->a, &c->b );
   next_rule( i36_a, curs35_a_list );
}

void i35_b(void)
{
   bind(curs35_b, c->b, active_rule35, pop, curs35_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 35 (printing_edge)  %d %d\n",rfc++,c->a._ts,c->b._ts);
   fire_rule35( &c->a, &c->b );
   next_rule( pop, curs35_b_list );
}

void i36_a(void)
{
   bind(curs36_a, c->a, active_rule36, i37_a, curs36_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 36 (printing_junction)  %d %d\n",rfc++,c->a._ts,c->b._ts);
   fire_rule36( &c->a, &c->b );
   next_rule( i37_a, curs36_a_list );
}

void i36_b(void)
{
   bind(curs36_b, c->b, active_rule36, pop, curs36_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 36 (printing_junction)  %d %d\n",rfc++,c->a._ts,c->b._ts);
   fire_rule36( &c->a, &c->b );
   next_rule( pop, curs36_b_list );
}

void i37_a(void)
{
   bind(curs37_a, c->a, active_rule37, i38_a, curs37_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 37 (printing_label)  %d %d\n",rfc++,c->a._ts,c->b._ts);
   fire_rule37( &c->a, &c->b );
   next_rule( i38_a, curs37_a_list );
}

void i37_b(void)
{
   bind(curs37_b, c->b, active_rule37, pop, curs37_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 37 (printing_label)  %d %d\n",rfc++,c->a._ts,c->b._ts);
   fire_rule37( &c->a, &c->b );
   next_rule( pop, curs37_b_list );
}

void i38_a(void)
{
   bind(curs38_a, c->a, active_rule38, i27_a, curs38_a_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 38 (printing_illegal)  %d %d\n",rfc++,c->a._ts,c->b._ts);
   fire_rule38( &c->a, &c->b );
   next_rule( i27_a, curs38_a_list );
}

void i38_b(void)
{
   bind(curs38_b, c->b, active_rule38, pop, curs38_b_list );
   if (watch)
      fprintf(stderr,"%d. Firing rule 38 (printing_illegal)  %d %d\n",rfc++,c->a._ts,c->b._ts);
   fire_rule38( &c->a, &c->b );
   next_rule( pop, curs38_b_list );
}


void insert_data_tuple (void)
{
char      cont_name[TOKEN_LEN];
char      skip[TOKEN_LEN];
FIELDNAME fieldname[TOKEN_LEN];
char      brace[TOKEN_LEN];
string words[12];

   sscanf (inp_line, "(make %s", cont_name);
   if (strcmp(cont_name,"stage") == 0) {
      stage r;
      sscanf(inp_line, "%s %s %s %s %s", skip, cont_name, fieldname[0], words[0], brace);
      if (strcmp(fieldname[0], "^value") !=0) input_format_error();
      if (brace[0] != R_PAREN) input_format_error();
      r.value = add_unique_symbol(words[0]);
      r._ts = global_counter++;
      insert_stage(&r);
      push_wl( a_stage.obj, a_stage._ts, stage_num );
      return;
   }
   if (strcmp(cont_name,"line") == 0) {
      line r;
      sscanf(inp_line, "%s %s %s %d %s %d %s", skip, cont_name, fieldname[0], &r.p1, fieldname[1], &r.p2, brace);
      if (strcmp(fieldname[0], "^p1") !=0) input_format_error();
      if (strcmp(fieldname[1], "^p2") !=0) input_format_error();
      if (brace[0] != R_PAREN) input_format_error();
      r._ts = global_counter++;
      insert_line(&r);
      push_wl( a_line.obj, a_line._ts, line_num );
      return;
   }
   if (strcmp(cont_name,"edge") == 0) {
      edge r;
      sscanf(inp_line, "%s %s %s %s %s %d %s %d %s %s %s", skip, cont_name, fieldname[0], words[0], fieldname[1], &r.p1, fieldname[2], &r.p2, fieldname[3], words[1], brace);
      if (strcmp(fieldname[0], "^type") !=0) input_format_error();
      if (strcmp(fieldname[1], "^p1") !=0) input_format_error();
      if (strcmp(fieldname[2], "^p2") !=0) input_format_error();
      if (strcmp(fieldname[3], "^joined") !=0) input_format_error();
      if (brace[0] != R_PAREN) input_format_error();
      r.type = add_unique_symbol(words[0]);
      r.joined = add_unique_symbol(words[1]);
      r._ts = global_counter++;
      insert_edge(&r);
      push_wl( a_edge.obj, a_edge._ts, edge_num );
      return;
   }
   if (strcmp(cont_name,"edge_label") == 0) {
      edge_label r;
      sscanf(inp_line, "%s %s %s %d %s %d %s %s %s %d %s", skip, cont_name, fieldname[0], &r.p1, fieldname[1], &r.p2, fieldname[2], words[0], fieldname[3], &r.l_id, brace);
      if (strcmp(fieldname[0], "^p1") !=0) input_format_error();
      if (strcmp(fieldname[1], "^p2") !=0) input_format_error();
      if (strcmp(fieldname[2], "^l_name") !=0) input_format_error();
      if (strcmp(fieldname[3], "^l_id") !=0) input_format_error();
      if (brace[0] != R_PAREN) input_format_error();
      r.l_name = add_unique_symbol(words[0]);
      r._ts = global_counter++;
      insert_edge_label(&r);
      push_wl( a_edge_label.obj, a_edge_label._ts, edge_label_num );
      return;
   }
   if (strcmp(cont_name,"junction") == 0) {
      junction r;
      sscanf(inp_line, "%s %s %s %d %s %d %s %d %s %d %s %s %s %s %s %s %s", skip, cont_name, fieldname[0], &r.p1, fieldname[1], &r.p2, fieldname[2], &r.p3, fieldname[3], &r.base_point, fieldname[4], words[0], fieldname[5], words[1], fieldname[6], words[2], brace);
      if (strcmp(fieldname[0], "^p1") !=0) input_format_error();
      if (strcmp(fieldname[1], "^p2") !=0) input_format_error();
      if (strcmp(fieldname[2], "^p3") !=0) input_format_error();
      if (strcmp(fieldname[3], "^base_point") !=0) input_format_error();
      if (strcmp(fieldname[4], "^type") !=0) input_format_error();
      if (strcmp(fieldname[5], "^name") !=0) input_format_error();
      if (strcmp(fieldname[6], "^visited") !=0) input_format_error();
      if (brace[0] != R_PAREN) input_format_error();
      r.type = add_unique_symbol(words[0]);
      r.name = add_unique_symbol(words[1]);
      r.visited = add_unique_symbol(words[2]);
      r._ts = global_counter++;
      insert_junction(&r);
      push_wl( a_junction.obj, a_junction._ts, junction_num );
      return;
   }
   if (strcmp(cont_name,"label") == 0) {
      label r;
      sscanf(inp_line, "%s %s %s %d %s %s %s %s %s %s %s %s %s %s %s", skip, cont_name, fieldname[0], &r.id, fieldname[1], words[0], fieldname[2], words[1], fieldname[3], words[2], fieldname[4], words[3], fieldname[5], words[4], brace);
      if (strcmp(fieldname[0], "^id") !=0) input_format_error();
      if (strcmp(fieldname[1], "^type") !=0) input_format_error();
      if (strcmp(fieldname[2], "^name") !=0) input_format_error();
      if (strcmp(fieldname[3], "^n1") !=0) input_format_error();
      if (strcmp(fieldname[4], "^n2") !=0) input_format_error();
      if (strcmp(fieldname[5], "^n3") !=0) input_format_error();
      if (brace[0] != R_PAREN) input_format_error();
      r.type = add_unique_symbol(words[0]);
      r.name = add_unique_symbol(words[1]);
      r.n1 = add_unique_symbol(words[2]);
      r.n2 = add_unique_symbol(words[3]);
      r.n3 = add_unique_symbol(words[4]);
      r._ts = global_counter++;
      insert_label(&r);
      push_wl( a_label.obj, a_label._ts, label_num );
      return;
   }
   if (strcmp(cont_name,"illegal") == 0) {
      illegal r;
      sscanf(inp_line, "%s %s %s %d %s %d %s", skip, cont_name, fieldname[0], &r.bp, fieldname[1], &r.l_id, brace);
      if (strcmp(fieldname[0], "^bp") !=0) input_format_error();
      if (strcmp(fieldname[1], "^l_id") !=0) input_format_error();
      if (brace[0] != R_PAREN) input_format_error();
      r._ts = global_counter++;
      insert_illegal(&r);
      push_wl( a_illegal.obj, a_illegal._ts, illegal_num );
      return;
   }
   printf("*** unrecognizable make - no action taken***\n");
}


void init_all(void)
{
   init_symbol_table();
   P2_init_fastmalloc();
   open_cont( stack );

   open_cont( cont_stage );
   init_curs( a_stage );

   open_cont( cont_line );
   init_curs( a_line );

   open_cont( shadow_line );
   init_curs( a_shadow_line );

   open_cont( cont_edge );
   init_curs( a_edge );

   open_cont( shadow_edge );
   init_curs( a_shadow_edge );

   open_cont( cont_edge_label );
   init_curs( a_edge_label );

   open_cont( shadow_edge_label );
   init_curs( a_shadow_edge_label );

   open_cont( cont_junction );
   init_curs( a_junction );

   open_cont( shadow_junction );
   init_curs( a_shadow_junction );

   open_cont( cont_label );
   init_curs( a_label );

   open_cont( cont_illegal );
   init_curs( a_illegal );
}

#include "leaps.c"
