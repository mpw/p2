/* $Id: mmap_shared02.p2,v 45.0 1997/09/19 05:43:48 jthomas Exp $ */
/* Copyright (C) 1997, The University of Texas at Austin. */

/* Demonstrate that the mmap_shared MEM layer works.  Spawn 10 child
   processes, each of which adds a single tuple to a container stored
   in mmap_shared, then print the contents of the container. */

/* Like mmap_shared01.p2, but using the IPC semaphores in
   P2_process-unix.[ch] (JAT) */

#include <assert.h>      /* assert() */
#include <stdarg.h>      /* va_list, va_start(), va_end() */
#include <stdio.h>       /* fprintf(), vfprintf() */
#include <unistd.h>      /* getpid() */

#include "P2_paces.h"

/*****************************************************************************/
/*                  Declarations                                             */
/*****************************************************************************/

typedef struct {
   int f;
} TUPLE;

#define CARDINALITY
#define ORDERBY

typex {
#ifdef ORDERBY
  t = top2ds[orderby_fast[cardinality[array1[mmap_shared]],
			 top2ds[array2[transient]]]];
#else
  t = top2ds[cardinality[array1[mmap_shared]]];
#endif /* ORDERBY */
}

container <TUPLE> stored_as t with {
#if 0
  mmap_persistent file is "/tmp/P2_mmap_shared02-data" with size 2000;
#else
  mmap_shared file is "/tmp/P2_mmap_shared02-data" with size 2000;
#endif
  array1 size is 10;
#ifdef ORDERBY
  array2 size is 10;
#endif /* ORDERBY */
} cont;

cursor <cont> curs;

#ifdef ORDERBY
cursor <cont> orderby ascending f ordered_curs;
#else
cursor <cont> ordered_curs;
#endif /* ORDERBY */

/*****************************************************************************/
/*                  Tracing Routines                                         */
/*****************************************************************************/

#ifdef TRACE
P2_SEMAPHORE_ID trace_mutex;
#endif /* TRACE */

void
print_trace(char *format, ...)
{
#ifdef TRACE
  va_list args;

  P2_lock_semaphore(&trace_mutex);
  fprintf(stderr, "pid=%d ", getpid());
  va_start(args, format);
  vfprintf(stderr, format, args);
  va_end(args);
  fprintf(stderr, "\n");
  fflush(stderr);
  P2_unlock_semaphore(&trace_mutex);
#endif /* TRACE */
}

void
print_error(char *format, ...)
{
  va_list args;

  fprintf(stderr, "pid=%d error: ", getpid());
  va_start(args, format);
  vfprintf(stderr, format, args);
  va_end(args);
  perror(" ");
  fflush(stderr);
  exit(1);
}

/*****************************************************************************/
/*                  Main                                                     */
/*****************************************************************************/

int
main(void) 
{
  P2_PROCESS_ID child_pid;
  P2_SEMAPHORE_ID child_mutex;
  P2_SEMAPHORE_ID barrier;
  int i;
  
  /* Initialize process manager. */
  P2_init_process();

  if (P2_init_semaphore(&child_mutex, 1) < 0)
    print_error("Can't initialize child_mutex semaphore");
  if (P2_init_semaphore(&barrier, 0) < 0)
    print_error("Can't initialize barrier semaphore");
#ifdef TRACE
  if (P2_init_semaphore(&trace_mutex, 0) < 0)
    print_error("Can't initialize trace_mutex semaphore");
#endif /* TRACE */

  open_cont(cont);
  init_curs(curs);

#ifdef CARDINALITY
  assert(cardinality(cont) == 0);
#endif /* CARDINALITY */

  for (i = 0; i < 10; i++)
  {
    TUPLE tuple;
    int child_pid;

    child_pid = P2_fork_process();
    if (child_pid == -1)
      print_error("Can't fork child %d", i);
    else if (child_pid == 0)
    {
      /* Child process. */
      int j;
      /* Lock child mutex semaphore. */
      if (P2_lock_semaphore(&child_mutex) < 0)
	print_error("Can't lock child_mutex semaphore");
      /* Insert a new tuple. */
      print_trace("inserting %d", i);
      tuple.f = i;
      insert(curs, tuple);
      /* Make sure cardinality is valid. */
#ifdef CARDINALITY
      j = cardinality(cont);
#else
      j = 0;
      foreach(curs)
      {
	j++;
      }
#endif /* CARDINALITY */
      print_trace("cardinality = %d", j);
      assert(j > 0 && j <= 10);
      /* If this is the last tuple, unlock the barrier. */
      if (j == 10)
      {
	if (P2_unlock_semaphore(&barrier) < 0)
	  print_error("Can't unlock barrier semaphore");
      }
      print_trace("child exits");
      /* Unlock child mutex semaphore. */
      if (P2_unlock_semaphore(&child_mutex) < 0)
	print_error("Can't unlock child_mutex semaphore");
      exit(0);
    }
  }

  print_trace("parent waits");
  if (P2_lock_semaphore(&barrier) < 0)
    print_error("Can't lock barrier semaphore");
  if (P2_lock_semaphore(&child_mutex) < 0)
    print_error("Can't lock child_mutex semaphore");
  print_trace("parent continues");

  init_curs(ordered_curs);
  foreach(ordered_curs)
  {
    printf("%d\n", ordered_curs.f);
  }

#ifdef TRACE
  if (P2_delete_semaphore(&trace_mutex) < 0)
    print_error("Can't delete trace_mutex semaphore");
#endif /* TRACE */
  if (P2_delete_semaphore(&barrier) < 0)
    print_error("Can't initialize barrier semaphore");
  if (P2_delete_semaphore(&child_mutex) < 0)
    print_error("Can't initialize child_mutex semaphore");
  close_cont(cont);
  /* Delete process manager. */
  P2_delete_process();
  exit(0);
}
