/* $Id: xact20.p2,v 45.1 1997/09/29 03:50:24 jthomas Exp $ */
/* Copyright (C) 1997, The University of Texas at Austin. */

/* COMMIT lots of LITTLE transactions. */
/* Analogous to paces/xact18.p2 (COMMIT one BIG transaction). */
/* Analogous to paces/xact21.p2 (ABORT lots of LITTLE transactions) */

/*****************************************************************************/
/*                  Includes.                                                */
/*****************************************************************************/

/* Use the NON-durable transaction log manager (do NOT flush log at commit).
   The durable transaction log manager (synchronously flush log at
   commit) is too slow, since we are going to be calling xact_sync()
   so many times. */

#define P2_LOG_LAYER log_async

#include <assert.h>     /* assert() */
#include <stdio.h>      /* printf() */
#include "P2_paces.h"

/* Number of transactions. */
#define N 10000

/*****************************************************************************/
/*                  Globals.                                                 */
/*****************************************************************************/

typex {
#if 0
  /* Debugging. */
  t = conceptual[P2_LOG_LAYER[xact[lock[process[avail[array[transient]]]]]]];
#else
  /* Normal. */
  t = P2_XACT_TYPEX(P2_PROTOCOL_LAYER, P2_BOTTOM_LAYER);
#endif
}

typedef struct {
  int i;
} E;

schema {
  container <E> k;
} stored_as t with {
  P2_BOTTOM_SCHEMA_ANNOTE(k, i, N);
} s;

cursor <s.k> c;

/*****************************************************************************/
/*                  Main.                                                    */
/*****************************************************************************/

int main()
{
  E e;
  
  /* Initialize. */
  open_schema(s);
  open_cont(s.k);
  init_curs(c);

  for (e.i = 0; e.i < N; e.i++)
  {
    /* Begin transaction. */
    begin_xact(s);
    /* Transaction. */
    insert(c, e);
    /* Abort transaction. */
    commit_xact(s);
  }

#if 1
  /* Finalize. */
  close_cont(s.k);
  close_schema(s);
#endif

#if 0
  /* Print log anchor. */
  P2_print_log_anchor();
#endif

  /* Exit. */
  exit(0);
}
