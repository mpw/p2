/* $Id: container-malloc.p2,v 45.0 1997/09/19 05:43:03 jthomas Exp $ */
/* Copyright (C) 1995, The University of Texas at Austin. */

#include <stdio.h>
#include <string.h> /* memcpy */
#include "P2_paces.h"

typedef struct {
   int   empno;
   int   age;
   char  dept_name[20];
   char  name[22];
} EMP_TYPE;

EMP_TYPE rawdata[] = {
   { 10000,60,"Biology","Akers, Mark" },
   { 10070,22,"Biology","Andrews, Kay" },
   { 10020,21,"Biology","Alexander, Joe" },
   { 10010,40,"Biology","Akin, Monica" },
   { 10050,42,"Biology","Akerson, Suzanne" },
   { 10040,53,"Biology","Akerson, Mary" },
   { 10060,61,"Biology","Andrews, John" },
   { 10030,23,"Biology","Akerson, Gwyn" },
   { -1 }
};

typex {
  t = conceptual[delflag[array1[transient]]];
}

typedef container <EMP_TYPE> stored_as t with {
  array1 size is 10;
} EMP_CONT;

EMP_CONT *emp_cont;

typedef cursor <*emp_cont>
  orderby P2_DESCENDING empno
ALL_EMP_TYPE;
ALL_EMP_TYPE  all_emp;

cursor <*emp_cont>
  where "$.name <= 'Al' "
  orderby P2_DESCENDING name
ak_emp;

cursor <*emp_cont>
  where "$.empno > 10020"
  orderby P2_DESCENDING empno
recent_emp;

typedef cursor <*emp_cont>
  where "$.age > 40"
  orderby  P2_ASCENDING age
OLD_EMP_TYPE;
OLD_EMP_TYPE  old_emp;

int main (void) 
{
  emp_cont = (EMP_CONT *) malloc(sizeof(EMP_CONT));
  open_cont(*emp_cont);
  init_curs(old_emp);
  init_curs(all_emp);
  init_curs(recent_emp);
  init_curs(ak_emp);

  {
    EMP_TYPE *p;
    for (p = rawdata; p->empno != -1; p++) {
      insert(all_emp, *p);
    }
  }

  printf("\nall emp are:\n(orderby descending empno)\n");
  P2_ITERATOR(all_emp)
  {
    element < *emp_cont > *k;
    k = all_emp.obj;
    printf("%d %d %s\n", k->empno, 
                         k->age,
                         k->name);
  }

  printf("\nak emp are:\n(orderby descending name)\n");
  P2_ITERATOR(ak_emp)
  {
    element <ak_emp> *c;
    c = ak_emp.obj;
    printf("%d %d %s\n", c->empno,
                         c->age,
                         c->name);
  }

  printf("\nrecent (empno > 10020) emp are:\n(orderby descending empno)\n");
  P2_ITERATOR(recent_emp)
  {
    element <*emp_cont> *k;
    element < recent_emp > *c;
    k = c = recent_emp.obj;
    printf("%d %d %s\n", k->empno, 
                         k->age,
                         k->name);
  }
 
  printf("\nold emp are:\n(orderby ascending age)\n");
  P2_ITERATOR(old_emp)
  {
    printf("%d %d %s\n", old_emp.empno, 
                         old_emp.age,
                         old_emp.name);
    delete(old_emp);
  }

  printf("\nold emp are:\n(orderby ascending age)\n");
  P2_ITERATOR(old_emp)
  {
    printf("%d %d %s\n", old_emp.empno, 
                         old_emp.age,
                         old_emp.name);
  }

  printf("\nremaining emp are:\n(orderby descending empno)\n");
  P2_ITERATOR(all_emp)
  {
    element < all_emp > *c = all_emp.obj;
    EMP_TYPE r;
    memcpy((void *) &r, (void *) c, sizeof(r));
    printf("%d %d %s\n", r.empno, 
                         r.age,
                         r.name);
  }

  close_cont(*emp_cont);
  exit(0);
}
