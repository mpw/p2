/* $Id: xact-lock07.p2,v 45.0 1997/09/19 05:45:18 jthomas Exp $ */
/* Copyright (C) 1997, The University of Texas at Austin. */

/* Demonstrate process_id mismatch in P2_log_transaction() in
   paces/P2_xact-manager.p2 */
/* begin_xact INside mutex. */

/*****************************************************************************/
/*                  Includes.                                                */
/*****************************************************************************/

#include "P2_paces.h"

#include <assert.h>   /* assert() */
#include <stdio.h>    /* fprintf() */

/*****************************************************************************/
/*                  Defines.                                                 */
/*****************************************************************************/

/* Mutex lock name. */
#define LOCK_NAME 7

/* Mutex lock timeout. */
#define LOCK_TIMEOUT 10

/* Mutex lock class (aka duration). */
#define LOCK_CLASS P2_LOCK_MEDIUM

/*****************************************************************************/
/*                  Declare typex and schema.                                */
/*****************************************************************************/

typex {
  t = P2_XACT_TYPEX(P2_PROTOCOL_LAYER, P2_BOTTOM_LAYER);
}

typedef struct {
  int i;
} E;

schema {
  container <E> k;
} stored_as t with {
  P2_BOTTOM_SCHEMA_ANNOTE(k, i, 1);
} s;

/*****************************************************************************/
/*                  Print errors.                                            */
/*****************************************************************************/

static void
parent_error (const char *s)
{
  fprintf(stderr, "Parent: ");
  perror(s);
  fflush(stderr);
  exit(1);
}

static void
child_error (const char *s)
{
  fprintf(stderr, "Child: ");
  perror(s);
  fflush(stderr);
  exit(1);
}

/*****************************************************************************/
/*                  Main.                                                    */
/*****************************************************************************/

int
main()
{
  P2_PROCESS_ID child_pid;
  P2_LOCK_REPLY lock_reply;

  /* Open schema. */
  open_schema(s);

  /* Fork child. */
  child_pid = P2_fork_process();
  if (child_pid == -1)
  {
    /*** This is an error. ***/

    parent_error("P2_fork_process() failed");
  }
  else if (child_pid == 0)
  {
    /*** This is the child. ***/

    /* Lock mutex lock. */
    lock_reply = P2_lock(LOCK_NAME, P2_LOCK_X, LOCK_CLASS, LOCK_TIMEOUT);
    assert(lock_reply == P2_LOCK_OK
	   || lock_reply == P2_LOCK_TIMEOUT
	   || lock_reply == P2_LOCK_REQUEST_OVERFLOW
	   || lock_reply == P2_LOCK_HEAD_OVERFLOW);
    if (lock_reply != P2_LOCK_OK)
      child_error("P2_lock(mutex) failed");
    else
    {
      /* Begin transaction. */
      begin_xact(s);

      /* Print "Hello World" */
      printf("Hello World!\n");

      /* Flush stdout. */
      fflush(stdout);

      /* Commit transaction--will release all locks held by the transaction,
	 but since lock is acquired outside of the transaction, it will
	 not be released. */
      commit_xact(s);
    }

    /* Unlock mutex lock. */
    lock_reply = P2_unlock(LOCK_NAME);
    assert(lock_reply == P2_LOCK_OK);
    if (lock_reply != P2_LOCK_OK)
      child_error("P2_unlock(mutex) failed");

    /* Exit success. */
    exit(0);
  }
  else
  {
    /*** This is the parent. ***/
  }

  /* Barrier: wait for child to exit. */
  if (P2_join_process(child_pid) != 0)
    parent_error("P2_join_process() != 0");

  /* Lock mutex lock. */
  lock_reply = P2_lock(LOCK_NAME, P2_LOCK_X, LOCK_CLASS, LOCK_TIMEOUT);
  assert(lock_reply == P2_LOCK_OK
	 || lock_reply == P2_LOCK_TIMEOUT
	 || lock_reply == P2_LOCK_REQUEST_OVERFLOW
	 || lock_reply == P2_LOCK_HEAD_OVERFLOW);
  if (lock_reply != P2_LOCK_OK)
    parent_error("P2_lock(mutex) failed");

  /* Close schema. */
  close_schema(s);

  printf("Parent Exits\n");
  /* Flush stdout. */
  fflush(stdout);

  /* Exit. */
  exit(0);
}
